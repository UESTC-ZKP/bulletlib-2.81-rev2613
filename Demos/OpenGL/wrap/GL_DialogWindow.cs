/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GL_DialogWindow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GL_DialogWindow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GL_DialogWindow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GL_DialogWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenGLSupportPINVOKE.delete_GL_DialogWindow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public GL_DialogWindow(int horPos, int vertPos, int dialogWidth, int dialogHeight, SWIGTYPE_p_btCollisionObject colObject, string dialogTitle) : this(OpenGLSupportPINVOKE.new_GL_DialogWindow(horPos, vertPos, dialogWidth, dialogHeight, SWIGTYPE_p_btCollisionObject.getCPtr(colObject), dialogTitle), true) {
  }

  public void draw(float deltaTime) {
    OpenGLSupportPINVOKE.GL_DialogWindow_draw(swigCPtr, deltaTime);
  }

  public void setScreenSize(int width, int height) {
    OpenGLSupportPINVOKE.GL_DialogWindow_setScreenSize(swigCPtr, width, height);
  }

  public void setStartPosition(int dialogHorPos, int dialogVertPos) {
    OpenGLSupportPINVOKE.GL_DialogWindow_setStartPosition(swigCPtr, dialogHorPos, dialogVertPos);
  }

  public void addControl(GL_DialogControl control) {
    OpenGLSupportPINVOKE.GL_DialogWindow_addControl(swigCPtr, GL_DialogControl.getCPtr(control));
  }

  public void removeControl(GL_DialogControl control) {
    OpenGLSupportPINVOKE.GL_DialogWindow_removeControl(swigCPtr, GL_DialogControl.getCPtr(control));
  }

  public SWIGTYPE_p_btCollisionObject getCollisionObject() {
    IntPtr cPtr = OpenGLSupportPINVOKE.GL_DialogWindow_getCollisionObject(swigCPtr);
    SWIGTYPE_p_btCollisionObject ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btCollisionObject(cPtr, false);
    return ret;
  }

  public int getDialogHorPos() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getDialogHorPos(swigCPtr);
    return ret;
  }

  public int getDialogVertPos() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getDialogVertPos(swigCPtr);
    return ret;
  }

  public int getDialogWidth() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getDialogWidth(swigCPtr);
    return ret;
  }

  public int getDialogHeight() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getDialogHeight(swigCPtr);
    return ret;
  }

  public int getScreenWidth() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getScreenWidth(swigCPtr);
    return ret;
  }

  public int getScreenHeight() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getScreenHeight(swigCPtr);
    return ret;
  }

  public int getNumControls() {
    int ret = OpenGLSupportPINVOKE.GL_DialogWindow_getNumControls(swigCPtr);
    return ret;
  }

  public GL_DialogControl getControl(int index) {
    IntPtr cPtr = OpenGLSupportPINVOKE.GL_DialogWindow_getControl__SWIG_0(swigCPtr, index);
    GL_DialogControl ret = (cPtr == IntPtr.Zero) ? null : new GL_DialogControl(cPtr, false);
    return ret;
  }

}
