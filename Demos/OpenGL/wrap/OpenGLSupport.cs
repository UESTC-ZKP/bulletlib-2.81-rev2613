/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class OpenGLSupport {
  public static void GLDebugDrawStringInternal(int x, int y, string arg2, SWIGTYPE_p_btVector3 rgb, bool enableBlend, int spacing) {
    OpenGLSupportPINVOKE.GLDebugDrawStringInternal__SWIG_0(x, y, arg2, SWIGTYPE_p_btVector3.getCPtr(rgb), enableBlend, spacing);
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GLDebugDrawStringInternal(int x, int y, string arg2, SWIGTYPE_p_btVector3 rgb) {
    OpenGLSupportPINVOKE.GLDebugDrawStringInternal__SWIG_1(x, y, arg2, SWIGTYPE_p_btVector3.getCPtr(rgb));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GLDebugDrawString(int x, int y, string arg2) {
    OpenGLSupportPINVOKE.GLDebugDrawString(x, y, arg2);
  }

  public static void GLDebugResetFont(int screenWidth, int screenHeight) {
    OpenGLSupportPINVOKE.GLDebugResetFont(screenWidth, screenHeight);
  }

  public static void OGL_displaylist_register_shape(SWIGTYPE_p_btCollisionShape shape) {
    OpenGLSupportPINVOKE.OGL_displaylist_register_shape(SWIGTYPE_p_btCollisionShape.getCPtr(shape));
  }

  public static void OGL_displaylist_clean() {
    OpenGLSupportPINVOKE.OGL_displaylist_clean();
  }

  public static int glutmain(int argc, SWIGTYPE_p_p_char argv, int width, int height, string title, DemoApplication demoApp) {
    int ret = OpenGLSupportPINVOKE.glutmain(argc, SWIGTYPE_p_p_char.getCPtr(argv), width, height, title, DemoApplication.getCPtr(demoApp));
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char stbi_load_from_memory(SWIGTYPE_p_unsigned_char buffer, int len, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_load_from_memory(SWIGTYPE_p_unsigned_char.getCPtr(buffer), len, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char stbi_load(string filename, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_load(filename, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char stbi_load_from_file(SWIGTYPE_p_FILE f, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_load_from_file(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char stbi_load_from_callbacks(stbi_io_callbacks clbk, SWIGTYPE_p_void user, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_load_from_callbacks(stbi_io_callbacks.getCPtr(clbk), SWIGTYPE_p_void.getCPtr(user), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_float stbi_loadf_from_memory(SWIGTYPE_p_unsigned_char buffer, int len, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_loadf_from_memory(SWIGTYPE_p_unsigned_char.getCPtr(buffer), len, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_float stbi_loadf(string filename, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_loadf(filename, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_float stbi_loadf_from_file(SWIGTYPE_p_FILE f, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_loadf_from_file(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_float stbi_loadf_from_callbacks(stbi_io_callbacks clbk, SWIGTYPE_p_void user, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp, int req_comp) {
    IntPtr cPtr = OpenGLSupportPINVOKE.stbi_loadf_from_callbacks(stbi_io_callbacks.getCPtr(clbk), SWIGTYPE_p_void.getCPtr(user), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp), req_comp);
    SWIGTYPE_p_float ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static void stbi_hdr_to_ldr_gamma(float gamma) {
    OpenGLSupportPINVOKE.stbi_hdr_to_ldr_gamma(gamma);
  }

  public static void stbi_hdr_to_ldr_scale(float scale) {
    OpenGLSupportPINVOKE.stbi_hdr_to_ldr_scale(scale);
  }

  public static void stbi_ldr_to_hdr_gamma(float gamma) {
    OpenGLSupportPINVOKE.stbi_ldr_to_hdr_gamma(gamma);
  }

  public static void stbi_ldr_to_hdr_scale(float scale) {
    OpenGLSupportPINVOKE.stbi_ldr_to_hdr_scale(scale);
  }

  public static int stbi_is_hdr_from_callbacks(stbi_io_callbacks clbk, SWIGTYPE_p_void user) {
    int ret = OpenGLSupportPINVOKE.stbi_is_hdr_from_callbacks(stbi_io_callbacks.getCPtr(clbk), SWIGTYPE_p_void.getCPtr(user));
    return ret;
  }

  public static int stbi_is_hdr_from_memory(SWIGTYPE_p_unsigned_char buffer, int len) {
    int ret = OpenGLSupportPINVOKE.stbi_is_hdr_from_memory(SWIGTYPE_p_unsigned_char.getCPtr(buffer), len);
    return ret;
  }

  public static int stbi_is_hdr(string filename) {
    int ret = OpenGLSupportPINVOKE.stbi_is_hdr(filename);
    return ret;
  }

  public static int stbi_is_hdr_from_file(SWIGTYPE_p_FILE f) {
    int ret = OpenGLSupportPINVOKE.stbi_is_hdr_from_file(SWIGTYPE_p_FILE.getCPtr(f));
    return ret;
  }

  public static string stbi_failure_reason() {
    string ret = OpenGLSupportPINVOKE.stbi_failure_reason();
    return ret;
  }

  public static void stbi_image_free(SWIGTYPE_p_void retval_from_stbi_load) {
    OpenGLSupportPINVOKE.stbi_image_free(SWIGTYPE_p_void.getCPtr(retval_from_stbi_load));
  }

  public static int stbi_info_from_memory(SWIGTYPE_p_unsigned_char buffer, int len, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp) {
    int ret = OpenGLSupportPINVOKE.stbi_info_from_memory(SWIGTYPE_p_unsigned_char.getCPtr(buffer), len, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp));
    return ret;
  }

  public static int stbi_info_from_callbacks(stbi_io_callbacks clbk, SWIGTYPE_p_void user, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp) {
    int ret = OpenGLSupportPINVOKE.stbi_info_from_callbacks(stbi_io_callbacks.getCPtr(clbk), SWIGTYPE_p_void.getCPtr(user), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp));
    return ret;
  }

  public static int stbi_info(string filename, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp) {
    int ret = OpenGLSupportPINVOKE.stbi_info(filename, SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp));
    return ret;
  }

  public static int stbi_info_from_file(SWIGTYPE_p_FILE f, SWIGTYPE_p_int x, SWIGTYPE_p_int y, SWIGTYPE_p_int comp) {
    int ret = OpenGLSupportPINVOKE.stbi_info_from_file(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_int.getCPtr(x), SWIGTYPE_p_int.getCPtr(y), SWIGTYPE_p_int.getCPtr(comp));
    return ret;
  }

  public static void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply) {
    OpenGLSupportPINVOKE.stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply);
  }

  public static void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert) {
    OpenGLSupportPINVOKE.stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert);
  }

  public static string stbi_zlib_decode_malloc_guesssize(string buffer, int len, int initial_size, SWIGTYPE_p_int outlen) {
    string ret = OpenGLSupportPINVOKE.stbi_zlib_decode_malloc_guesssize(buffer, len, initial_size, SWIGTYPE_p_int.getCPtr(outlen));
    return ret;
  }

  public static string stbi_zlib_decode_malloc(string buffer, int len, SWIGTYPE_p_int outlen) {
    string ret = OpenGLSupportPINVOKE.stbi_zlib_decode_malloc(buffer, len, SWIGTYPE_p_int.getCPtr(outlen));
    return ret;
  }

  public static int stbi_zlib_decode_buffer(string obuffer, int olen, string ibuffer, int ilen) {
    int ret = OpenGLSupportPINVOKE.stbi_zlib_decode_buffer(obuffer, olen, ibuffer, ilen);
    return ret;
  }

  public static string stbi_zlib_decode_noheader_malloc(string buffer, int len, SWIGTYPE_p_int outlen) {
    string ret = OpenGLSupportPINVOKE.stbi_zlib_decode_noheader_malloc(buffer, len, SWIGTYPE_p_int.getCPtr(outlen));
    return ret;
  }

  public static int stbi_zlib_decode_noheader_buffer(string obuffer, int olen, string ibuffer, int ilen) {
    int ret = OpenGLSupportPINVOKE.stbi_zlib_decode_noheader_buffer(obuffer, olen, ibuffer, ilen);
    return ret;
  }

  public static readonly char BT_KEY_K = OpenGLSupportPINVOKE.BT_KEY_K_get();
  public static readonly int STBI_VERSION = OpenGLSupportPINVOKE.STBI_VERSION_get();
  public static readonly int STBI_default = OpenGLSupportPINVOKE.STBI_default_get();
  public static readonly int STBI_grey = OpenGLSupportPINVOKE.STBI_grey_get();
  public static readonly int STBI_grey_alpha = OpenGLSupportPINVOKE.STBI_grey_alpha_get();
  public static readonly int STBI_rgb = OpenGLSupportPINVOKE.STBI_rgb_get();
  public static readonly int STBI_rgb_alpha = OpenGLSupportPINVOKE.STBI_rgb_alpha_get();

}
