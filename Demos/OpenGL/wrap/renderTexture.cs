/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class renderTexture : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal renderTexture(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(renderTexture obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~renderTexture() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenGLSupportPINVOKE.delete_renderTexture(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public renderTexture(int width, int height) : this(OpenGLSupportPINVOKE.new_renderTexture(width, height), true) {
  }

  public void setPixel(int x, int y, SWIGTYPE_p_btVector4 rgba) {
    OpenGLSupportPINVOKE.renderTexture_setPixel(swigCPtr, x, y, SWIGTYPE_p_btVector4.getCPtr(rgba));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addPixel(int x, int y, SWIGTYPE_p_btVector4 rgba) {
    OpenGLSupportPINVOKE.renderTexture_addPixel(swigCPtr, x, y, SWIGTYPE_p_btVector4.getCPtr(rgba));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector4 getPixel(int x, int y) {
    SWIGTYPE_p_btVector4 ret = new SWIGTYPE_p_btVector4(OpenGLSupportPINVOKE.renderTexture_getPixel(swigCPtr, x, y), true);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getBuffer() {
    IntPtr cPtr = OpenGLSupportPINVOKE.renderTexture_getBuffer(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public int getWidth() {
    int ret = OpenGLSupportPINVOKE.renderTexture_getWidth(swigCPtr);
    return ret;
  }

  public int getHeight() {
    int ret = OpenGLSupportPINVOKE.renderTexture_getHeight(swigCPtr);
    return ret;
  }

  public void grapicalPrintf(string str, SWIGTYPE_p_void fontData, int startx, int starty) {
    OpenGLSupportPINVOKE.renderTexture_grapicalPrintf__SWIG_0(swigCPtr, str, SWIGTYPE_p_void.getCPtr(fontData), startx, starty);
  }

  public void grapicalPrintf(string str, SWIGTYPE_p_void fontData, int startx) {
    OpenGLSupportPINVOKE.renderTexture_grapicalPrintf__SWIG_1(swigCPtr, str, SWIGTYPE_p_void.getCPtr(fontData), startx);
  }

  public void grapicalPrintf(string str, SWIGTYPE_p_void fontData) {
    OpenGLSupportPINVOKE.renderTexture_grapicalPrintf__SWIG_2(swigCPtr, str, SWIGTYPE_p_void.getCPtr(fontData));
  }

}
