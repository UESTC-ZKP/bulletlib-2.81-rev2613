/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DemoApplication : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DemoApplication(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DemoApplication obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DemoApplication() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenGLSupportPINVOKE.delete_DemoApplication(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int m_modifierKeys {
    set {
      OpenGLSupportPINVOKE.DemoApplication_m_modifierKeys_set(swigCPtr, value);
    } 
    get {
      int ret = OpenGLSupportPINVOKE.DemoApplication_m_modifierKeys_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btDynamicsWorld getDynamicsWorld() {
    IntPtr cPtr = OpenGLSupportPINVOKE.DemoApplication_getDynamicsWorld(swigCPtr);
    SWIGTYPE_p_btDynamicsWorld ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btDynamicsWorld(cPtr, false);
    return ret;
  }

  public virtual void initPhysics() {
    OpenGLSupportPINVOKE.DemoApplication_initPhysics(swigCPtr);
  }

  public virtual void setDrawClusters(bool drawClusters) {
    OpenGLSupportPINVOKE.DemoApplication_setDrawClusters(swigCPtr, drawClusters);
  }

  public void overrideGLShapeDrawer(GL_ShapeDrawer shapeDrawer) {
    OpenGLSupportPINVOKE.DemoApplication_overrideGLShapeDrawer(swigCPtr, GL_ShapeDrawer.getCPtr(shapeDrawer));
  }

  public void setOrthographicProjection() {
    OpenGLSupportPINVOKE.DemoApplication_setOrthographicProjection(swigCPtr);
  }

  public void resetPerspectiveProjection() {
    OpenGLSupportPINVOKE.DemoApplication_resetPerspectiveProjection(swigCPtr);
  }

  public bool setTexturing(bool enable) {
    bool ret = OpenGLSupportPINVOKE.DemoApplication_setTexturing(swigCPtr, enable);
    return ret;
  }

  public bool setShadows(bool enable) {
    bool ret = OpenGLSupportPINVOKE.DemoApplication_setShadows(swigCPtr, enable);
    return ret;
  }

  public bool getTexturing() {
    bool ret = OpenGLSupportPINVOKE.DemoApplication_getTexturing(swigCPtr);
    return ret;
  }

  public bool getShadows() {
    bool ret = OpenGLSupportPINVOKE.DemoApplication_getShadows(swigCPtr);
    return ret;
  }

  public int getDebugMode() {
    int ret = OpenGLSupportPINVOKE.DemoApplication_getDebugMode(swigCPtr);
    return ret;
  }

  public void setDebugMode(int mode) {
    OpenGLSupportPINVOKE.DemoApplication_setDebugMode(swigCPtr, mode);
  }

  public void setAzi(float azi) {
    OpenGLSupportPINVOKE.DemoApplication_setAzi(swigCPtr, azi);
  }

  public void setCameraUp(SWIGTYPE_p_btVector3 camUp) {
    OpenGLSupportPINVOKE.DemoApplication_setCameraUp(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(camUp));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCameraForwardAxis(int axis) {
    OpenGLSupportPINVOKE.DemoApplication_setCameraForwardAxis(swigCPtr, axis);
  }

  public virtual void myinit() {
    OpenGLSupportPINVOKE.DemoApplication_myinit(swigCPtr);
  }

  public void toggleIdle() {
    OpenGLSupportPINVOKE.DemoApplication_toggleIdle(swigCPtr);
  }

  public virtual void updateCamera() {
    OpenGLSupportPINVOKE.DemoApplication_updateCamera(swigCPtr);
  }

  public SWIGTYPE_p_btVector3 getCameraPosition() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(OpenGLSupportPINVOKE.DemoApplication_getCameraPosition(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_btVector3 getCameraTargetPosition() {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(OpenGLSupportPINVOKE.DemoApplication_getCameraTargetPosition(swigCPtr), true);
    return ret;
  }

  public float getDeltaTimeMicroseconds() {
    float ret = OpenGLSupportPINVOKE.DemoApplication_getDeltaTimeMicroseconds(swigCPtr);
    return ret;
  }

  public void setFrustumZPlanes(float zNear, float zFar) {
    OpenGLSupportPINVOKE.DemoApplication_setFrustumZPlanes(swigCPtr, zNear, zFar);
  }

  public float getCameraDistance() {
    float ret = OpenGLSupportPINVOKE.DemoApplication_getCameraDistance(swigCPtr);
    return ret;
  }

  public void setCameraDistance(float dist) {
    OpenGLSupportPINVOKE.DemoApplication_setCameraDistance(swigCPtr, dist);
  }

  public void moveAndDisplay() {
    OpenGLSupportPINVOKE.DemoApplication_moveAndDisplay(swigCPtr);
  }

  public virtual void clientMoveAndDisplay() {
    OpenGLSupportPINVOKE.DemoApplication_clientMoveAndDisplay(swigCPtr);
  }

  public virtual void clientResetScene() {
    OpenGLSupportPINVOKE.DemoApplication_clientResetScene(swigCPtr);
  }

  public virtual void setShootBoxShape() {
    OpenGLSupportPINVOKE.DemoApplication_setShootBoxShape(swigCPtr);
  }

  public virtual void shootBox(SWIGTYPE_p_btVector3 destination) {
    OpenGLSupportPINVOKE.DemoApplication_shootBox(swigCPtr, SWIGTYPE_p_btVector3.getCPtr(destination));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btVector3 getRayTo(int x, int y) {
    SWIGTYPE_p_btVector3 ret = new SWIGTYPE_p_btVector3(OpenGLSupportPINVOKE.DemoApplication_getRayTo(swigCPtr, x, y), true);
    return ret;
  }

  public SWIGTYPE_p_btRigidBody localCreateRigidBody(float mass, SWIGTYPE_p_btTransform startTransform, SWIGTYPE_p_btCollisionShape shape) {
    IntPtr cPtr = OpenGLSupportPINVOKE.DemoApplication_localCreateRigidBody(swigCPtr, mass, SWIGTYPE_p_btTransform.getCPtr(startTransform), SWIGTYPE_p_btCollisionShape.getCPtr(shape));
    SWIGTYPE_p_btRigidBody ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_btRigidBody(cPtr, false);
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void keyboardCallback(byte key, int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_keyboardCallback(swigCPtr, key, x, y);
  }

  public virtual void keyboardUpCallback(byte key, int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_keyboardUpCallback(swigCPtr, key, x, y);
  }

  public virtual void specialKeyboard(int key, int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_specialKeyboard(swigCPtr, key, x, y);
  }

  public virtual void specialKeyboardUp(int key, int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_specialKeyboardUp(swigCPtr, key, x, y);
  }

  public virtual void reshape(int w, int h) {
    OpenGLSupportPINVOKE.DemoApplication_reshape(swigCPtr, w, h);
  }

  public virtual void mouseFunc(int button, int state, int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_mouseFunc(swigCPtr, button, state, x, y);
  }

  public virtual void mouseMotionFunc(int x, int y) {
    OpenGLSupportPINVOKE.DemoApplication_mouseMotionFunc(swigCPtr, x, y);
  }

  public virtual void displayCallback() {
    OpenGLSupportPINVOKE.DemoApplication_displayCallback(swigCPtr);
  }

  public virtual void renderme() {
    OpenGLSupportPINVOKE.DemoApplication_renderme(swigCPtr);
  }

  public virtual void swapBuffers() {
    OpenGLSupportPINVOKE.DemoApplication_swapBuffers(swigCPtr);
  }

  public virtual void updateModifierKeys() {
    OpenGLSupportPINVOKE.DemoApplication_updateModifierKeys(swigCPtr);
  }

  public void stepLeft() {
    OpenGLSupportPINVOKE.DemoApplication_stepLeft(swigCPtr);
  }

  public void stepRight() {
    OpenGLSupportPINVOKE.DemoApplication_stepRight(swigCPtr);
  }

  public void stepFront() {
    OpenGLSupportPINVOKE.DemoApplication_stepFront(swigCPtr);
  }

  public void stepBack() {
    OpenGLSupportPINVOKE.DemoApplication_stepBack(swigCPtr);
  }

  public void zoomIn() {
    OpenGLSupportPINVOKE.DemoApplication_zoomIn(swigCPtr);
  }

  public void zoomOut() {
    OpenGLSupportPINVOKE.DemoApplication_zoomOut(swigCPtr);
  }

  public bool isIdle() {
    bool ret = OpenGLSupportPINVOKE.DemoApplication_isIdle(swigCPtr);
    return ret;
  }

  public void setIdle(bool idle) {
    OpenGLSupportPINVOKE.DemoApplication_setIdle(swigCPtr, idle);
  }

}
