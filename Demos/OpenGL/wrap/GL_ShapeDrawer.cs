/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GL_ShapeDrawer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GL_ShapeDrawer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GL_ShapeDrawer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GL_ShapeDrawer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OpenGLSupportPINVOKE.delete_GL_ShapeDrawer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public GL_ShapeDrawer() : this(OpenGLSupportPINVOKE.new_GL_ShapeDrawer(), true) {
  }

  public virtual void drawOpenGL(SWIGTYPE_p_float m, SWIGTYPE_p_btCollisionShape shape, SWIGTYPE_p_btVector3 color, int debugMode, SWIGTYPE_p_btVector3 worldBoundsMin, SWIGTYPE_p_btVector3 worldBoundsMax) {
    OpenGLSupportPINVOKE.GL_ShapeDrawer_drawOpenGL(swigCPtr, SWIGTYPE_p_float.getCPtr(m), SWIGTYPE_p_btCollisionShape.getCPtr(shape), SWIGTYPE_p_btVector3.getCPtr(color), debugMode, SWIGTYPE_p_btVector3.getCPtr(worldBoundsMin), SWIGTYPE_p_btVector3.getCPtr(worldBoundsMax));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawShadow(SWIGTYPE_p_float m, SWIGTYPE_p_btVector3 extrusion, SWIGTYPE_p_btCollisionShape shape, SWIGTYPE_p_btVector3 worldBoundsMin, SWIGTYPE_p_btVector3 worldBoundsMax) {
    OpenGLSupportPINVOKE.GL_ShapeDrawer_drawShadow(swigCPtr, SWIGTYPE_p_float.getCPtr(m), SWIGTYPE_p_btVector3.getCPtr(extrusion), SWIGTYPE_p_btCollisionShape.getCPtr(shape), SWIGTYPE_p_btVector3.getCPtr(worldBoundsMin), SWIGTYPE_p_btVector3.getCPtr(worldBoundsMax));
    if (OpenGLSupportPINVOKE.SWIGPendingException.Pending) throw OpenGLSupportPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool enableTexture(bool enable) {
    bool ret = OpenGLSupportPINVOKE.GL_ShapeDrawer_enableTexture(swigCPtr, enable);
    return ret;
  }

  public bool hasTextureEnabled() {
    bool ret = OpenGLSupportPINVOKE.GL_ShapeDrawer_hasTextureEnabled(swigCPtr);
    return ret;
  }

  public static void drawCylinder(float radius, float halfHeight, int upAxis) {
    OpenGLSupportPINVOKE.GL_ShapeDrawer_drawCylinder(radius, halfHeight, upAxis);
  }

  public void drawSphere(float r, int lats, int longs) {
    OpenGLSupportPINVOKE.GL_ShapeDrawer_drawSphere(swigCPtr, r, lats, longs);
  }

  public static void drawCoordSystem() {
    OpenGLSupportPINVOKE.GL_ShapeDrawer_drawCoordSystem();
  }

}
