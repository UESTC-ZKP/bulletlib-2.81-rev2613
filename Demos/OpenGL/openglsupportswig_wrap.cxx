/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_OpenGLSupport(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_OpenGLSupport(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_OpenGLSupport(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


        #include "GLDebugFont.h"
		#include "GLDebugFont.h"
		#include "GL_DialogDynamicsWorld.h"
		#include "GL_DialogWindow.h"
		#include "GL_ShapeDrawer.h"
		#include "GL_Simplex1to4.h"
		#include "GLDebugDrawer.h"
		
		#include "RenderTexture.h"
		#include "DemoApplication.h"
		
		#include "GlutDemoApplication.h"
		#include "GlutStuff.h"

		#include "stb_image.h"
		#include "Win32DemoApplication.h"



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawStringInternal__SWIG_0(int jarg1, int jarg2, char * jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  int arg6 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  GLDebugDrawStringInternal(arg1,arg2,(char const *)arg3,(btVector3 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawStringInternal__SWIG_1(int jarg1, int jarg2, char * jarg3, void * jarg4) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  GLDebugDrawStringInternal(arg1,arg2,(char const *)arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawString(int jarg1, int jarg2, char * jarg3) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  GLDebugDrawString(arg1,arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugResetFont(int jarg1, int jarg2) {
  int arg1 ;
  int arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  GLDebugResetFont(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_DialogDynamicsWorld() {
  void * jresult ;
  GL_DialogDynamicsWorld *result = 0 ;
  
  result = (GL_DialogDynamicsWorld *)new GL_DialogDynamicsWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_DialogDynamicsWorld(void * jarg1) {
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_setScreenSize(void * jarg1, int jarg2, int jarg3) {
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setScreenSize(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_createDialog(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, char * jarg6) {
  void * jresult ;
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  GL_DialogWindow *result = 0 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (GL_DialogWindow *)(arg1)->createDialog(arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_createToggle(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  GL_DialogWindow *arg2 = (GL_DialogWindow *) 0 ;
  char *arg3 = (char *) 0 ;
  GL_ToggleControl *result = 0 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (GL_DialogWindow *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (GL_ToggleControl *)(arg1)->createToggle(arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_createSlider__SWIG_0(void * jarg1, void * jarg2, char * jarg3, float jarg4) {
  void * jresult ;
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  GL_DialogWindow *arg2 = (GL_DialogWindow *) 0 ;
  char *arg3 = (char *) 0 ;
  btScalar arg4 ;
  GL_SliderControl *result = 0 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (GL_DialogWindow *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (GL_SliderControl *)(arg1)->createSlider(arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_createSlider__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  GL_DialogWindow *arg2 = (GL_DialogWindow *) 0 ;
  char *arg3 = (char *) 0 ;
  GL_SliderControl *result = 0 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (GL_DialogWindow *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (GL_SliderControl *)(arg1)->createSlider(arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_draw(void * jarg1, float jarg2) {
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_mouseFunc(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->mouseFunc(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogDynamicsWorld_mouseMotionFunc(void * jarg1, int jarg2, int jarg3) {
  GL_DialogDynamicsWorld *arg1 = (GL_DialogDynamicsWorld *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GL_DialogDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->mouseMotionFunc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_DialogControl(void * jarg1) {
  GL_DialogControl *arg1 = (GL_DialogControl *) 0 ;
  
  arg1 = (GL_DialogControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogControl_draw(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GL_DialogControl *arg1 = (GL_DialogControl *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (GL_DialogControl *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->draw(*arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogControl_getType(void * jarg1) {
  int jresult ;
  GL_DialogControl *arg1 = (GL_DialogControl *) 0 ;
  int result;
  
  arg1 = (GL_DialogControl *)jarg1; 
  result = (int)((GL_DialogControl const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_TextControl_m_textLines_set(void * jarg1, void * jarg2) {
  GL_TextControl *arg1 = (GL_TextControl *) 0 ;
  btAlignedObjectArray< char const * > arg2 ;
  btAlignedObjectArray< char const * > *argp2 ;
  
  arg1 = (GL_TextControl *)jarg1; 
  argp2 = (btAlignedObjectArray< char const * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btAlignedObjectArray< char const * >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_textLines = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_TextControl_m_textLines_get(void * jarg1) {
  void * jresult ;
  GL_TextControl *arg1 = (GL_TextControl *) 0 ;
  btAlignedObjectArray< char const * > result;
  
  arg1 = (GL_TextControl *)jarg1; 
  result =  ((arg1)->m_textLines);
  jresult = new btAlignedObjectArray< char const * >((const btAlignedObjectArray< char const * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_TextControl() {
  void * jresult ;
  GL_TextControl *result = 0 ;
  
  result = (GL_TextControl *)new GL_TextControl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_TextControl(void * jarg1) {
  GL_TextControl *arg1 = (GL_TextControl *) 0 ;
  
  arg1 = (GL_TextControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_TextControl_draw(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GL_TextControl *arg1 = (GL_TextControl *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (GL_TextControl *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->draw(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ToggleControl_m_toggleBody_set(void * jarg1, void * jarg2) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_toggleBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_ToggleControl_m_toggleBody_get(void * jarg1) {
  void * jresult ;
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_toggleBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ToggleControl_m_parentWindow_set(void * jarg1, void * jarg2) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  GL_DialogWindow *arg2 = (GL_DialogWindow *) 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  arg2 = (GL_DialogWindow *)jarg2; 
  if (arg1) (arg1)->m_parentWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_ToggleControl_m_parentWindow_get(void * jarg1) {
  void * jresult ;
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  GL_DialogWindow *result = 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  result = (GL_DialogWindow *) ((arg1)->m_parentWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ToggleControl_m_toggleText_set(void * jarg1, char * jarg2) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_toggleText = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_toggleText, (const char *)arg2);
    } else {
      arg1->m_toggleText = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GL_ToggleControl_m_toggleText_get(void * jarg1) {
  char * jresult ;
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  char *result = 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  result = (char *) ((arg1)->m_toggleText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ToggleControl_m_active_set(void * jarg1, unsigned int jarg2) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  bool arg2 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_active = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GL_ToggleControl_m_active_get(void * jarg1) {
  unsigned int jresult ;
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  bool result;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  result = (bool) ((arg1)->m_active);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_ToggleControl(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  GL_DialogWindow *arg3 = (GL_DialogWindow *) 0 ;
  GL_ToggleControl *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (GL_DialogWindow *)jarg3; 
  result = (GL_ToggleControl *)new GL_ToggleControl((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ToggleControl_draw(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->draw(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_ToggleControl(void * jarg1) {
  GL_ToggleControl *arg1 = (GL_ToggleControl *) 0 ;
  
  arg1 = (GL_ToggleControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_sliderBody_set(void * jarg1, void * jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_sliderBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_SliderControl_m_sliderBody_get(void * jarg1) {
  void * jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_sliderBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_parentWindow_set(void * jarg1, void * jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  GL_DialogWindow *arg2 = (GL_DialogWindow *) 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (GL_DialogWindow *)jarg2; 
  if (arg1) (arg1)->m_parentWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_SliderControl_m_parentWindow_get(void * jarg1) {
  void * jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  GL_DialogWindow *result = 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (GL_DialogWindow *) ((arg1)->m_parentWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_lowerLimit_set(void * jarg1, float jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_upperLimit_set(void * jarg1, float jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_m_upperLimit_get(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_constraint_set(void * jarg1, void * jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  if (arg1) (arg1)->m_constraint = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_SliderControl_m_constraint_get(void * jarg1) {
  void * jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btTypedConstraint *) ((arg1)->m_constraint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_fraction_set(void * jarg1, float jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_fraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_m_fraction_get(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar) ((arg1)->m_fraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_m_sliderText_set(void * jarg1, char * jarg2) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_sliderText = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_sliderText, (const char *)arg2);
    } else {
      arg1->m_sliderText = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GL_SliderControl_m_sliderText_get(void * jarg1) {
  char * jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  char *result = 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (char *) ((arg1)->m_sliderText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_SliderControl(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, void * jarg6) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  GL_DialogWindow *arg3 = (GL_DialogWindow *) 0 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btTypedConstraint *arg6 = (btTypedConstraint *) 0 ;
  GL_SliderControl *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (GL_DialogWindow *)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btTypedConstraint *)jarg6; 
  result = (GL_SliderControl *)new GL_SliderControl((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_SliderControl_draw(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->draw(*arg2,*arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_btGetFraction(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar)(arg1)->btGetFraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_getLowerLimit(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar)(arg1)->getLowerLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GL_SliderControl_getUpperLimit(void * jarg1) {
  float jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btScalar result;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btScalar)(arg1)->getUpperLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_SliderControl_getConstraint(void * jarg1) {
  void * jresult ;
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  result = (btTypedConstraint *)(arg1)->getConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_SliderControl(void * jarg1) {
  GL_SliderControl *arg1 = (GL_SliderControl *) 0 ;
  
  arg1 = (GL_SliderControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_DialogWindow(int jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, char * jarg6) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  btCollisionObject *arg5 = (btCollisionObject *) 0 ;
  char *arg6 = (char *) 0 ;
  GL_DialogWindow *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btCollisionObject *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (GL_DialogWindow *)new GL_DialogWindow(arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_DialogWindow(void * jarg1) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogWindow_draw(void * jarg1, float jarg2) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogWindow_setScreenSize(void * jarg1, int jarg2, int jarg3) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setScreenSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogWindow_setStartPosition(void * jarg1, int jarg2, int jarg3) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setStartPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogWindow_addControl(void * jarg1, void * jarg2) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  GL_DialogControl *arg2 = (GL_DialogControl *) 0 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (GL_DialogControl *)jarg2; 
  (arg1)->addControl(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_DialogWindow_removeControl(void * jarg1, void * jarg2) {
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  GL_DialogControl *arg2 = (GL_DialogControl *) 0 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (GL_DialogControl *)jarg2; 
  (arg1)->removeControl(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogWindow_getCollisionObject(void * jarg1) {
  void * jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (btCollisionObject *)(arg1)->getCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getDialogHorPos(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getDialogHorPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getDialogVertPos(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getDialogVertPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getDialogWidth(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getDialogWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getDialogHeight(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getDialogHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getScreenWidth(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getScreenWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getScreenHeight(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getScreenHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GL_DialogWindow_getNumControls(void * jarg1) {
  int jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int result;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  result = (int)((GL_DialogWindow const *)arg1)->getNumControls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GL_DialogWindow_getControl__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  GL_DialogWindow *arg1 = (GL_DialogWindow *) 0 ;
  int arg2 ;
  GL_DialogControl *result = 0 ;
  
  arg1 = (GL_DialogWindow *)jarg1; 
  arg2 = (int)jarg2; 
  result = (GL_DialogControl *)((GL_DialogWindow const *)arg1)->getControl(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_ShapeDrawer() {
  void * jresult ;
  GL_ShapeDrawer *result = 0 ;
  
  result = (GL_ShapeDrawer *)new GL_ShapeDrawer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_ShapeDrawer(void * jarg1) {
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ShapeDrawer_drawOpenGL(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7) {
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawOpenGL(arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4,arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ShapeDrawer_drawShadow(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionShape *)jarg4; 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawShadow(arg2,(btVector3 const &)*arg3,(btCollisionShape const *)arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GL_ShapeDrawer_enableTexture(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->enableTexture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GL_ShapeDrawer_hasTextureEnabled(void * jarg1) {
  unsigned int jresult ;
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  bool result;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  result = (bool)((GL_ShapeDrawer const *)arg1)->hasTextureEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ShapeDrawer_drawCylinder(float jarg1, float jarg2, int jarg3) {
  float arg1 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  GL_ShapeDrawer::drawCylinder(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ShapeDrawer_drawSphere(void * jarg1, float jarg2, int jarg3, int jarg4) {
  GL_ShapeDrawer *arg1 = (GL_ShapeDrawer *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GL_ShapeDrawer *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->drawSphere(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_ShapeDrawer_drawCoordSystem() {
  GL_ShapeDrawer::drawCoordSystem();
}



SWIGEXPORT void * SWIGSTDCALL CSharp_new_GL_Simplex1to4() {
  void * jresult ;
  GL_Simplex1to4 *result = 0 ;
  
  result = (GL_Simplex1to4 *)new GL_Simplex1to4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GL_Simplex1to4(void * jarg1) {
  GL_Simplex1to4 *arg1 = (GL_Simplex1to4 *) 0 ;
  
  arg1 = (GL_Simplex1to4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_Simplex1to4_calcClosest(void * jarg1, void * jarg2) {
  GL_Simplex1to4 *arg1 = (GL_Simplex1to4 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (GL_Simplex1to4 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  (arg1)->calcClosest(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GL_Simplex1to4_setSimplexSolver(void * jarg1, void * jarg2) {
  GL_Simplex1to4 *arg1 = (GL_Simplex1to4 *) 0 ;
  btSimplexSolverInterface *arg2 = (btSimplexSolverInterface *) 0 ;
  
  arg1 = (GL_Simplex1to4 *)jarg1; 
  arg2 = (btSimplexSolverInterface *)jarg2; 
  (arg1)->setSimplexSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GLDebugDrawer() {
  void * jresult ;
  GLDebugDrawer *result = 0 ;
  
  result = (GLDebugDrawer *)new GLDebugDrawer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GLDebugDrawer(void * jarg1) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_drawLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_drawLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_drawSphere(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_drawTriangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_drawContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, void * jarg6) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_reportErrorWarning(void * jarg1, char * jarg2) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->reportErrorWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_draw3dText(void * jarg1, void * jarg2, char * jarg3) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GLDebugDrawer_setDebugMode(void * jarg1, int jarg2) {
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  int arg2 ;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDebugMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GLDebugDrawer_getDebugMode(void * jarg1) {
  int jresult ;
  GLDebugDrawer *arg1 = (GLDebugDrawer *) 0 ;
  int result;
  
  arg1 = (GLDebugDrawer *)jarg1; 
  result = (int)((GLDebugDrawer const *)arg1)->getDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_renderTexture(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  renderTexture *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (renderTexture *)new renderTexture(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_renderTexture(void * jarg1) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  
  arg1 = (renderTexture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_renderTexture_setPixel(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  btVector4 *arg4 = 0 ;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setPixel(arg2,arg3,(btVector4 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_renderTexture_addPixel(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  btVector4 *arg4 = 0 ;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->addPixel(arg2,arg3,(btVector4 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_renderTexture_getPixel(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  renderTexture *arg1 = (renderTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  btVector4 result;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->getPixel(arg2,arg3);
  jresult = new btVector4((const btVector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_renderTexture_getBuffer(void * jarg1) {
  void * jresult ;
  renderTexture *arg1 = (renderTexture *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (renderTexture *)jarg1; 
  result = (unsigned char *)((renderTexture const *)arg1)->getBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_renderTexture_getWidth(void * jarg1) {
  int jresult ;
  renderTexture *arg1 = (renderTexture *) 0 ;
  int result;
  
  arg1 = (renderTexture *)jarg1; 
  result = (int)((renderTexture const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_renderTexture_getHeight(void * jarg1) {
  int jresult ;
  renderTexture *arg1 = (renderTexture *) 0 ;
  int result;
  
  arg1 = (renderTexture *)jarg1; 
  result = (int)((renderTexture const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_renderTexture_grapicalPrintf__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->grapicalPrintf(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_renderTexture_grapicalPrintf__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->grapicalPrintf(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_renderTexture_grapicalPrintf__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  renderTexture *arg1 = (renderTexture *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (renderTexture *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->grapicalPrintf(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_m_modifierKeys_set(void * jarg1, int jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_modifierKeys = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DemoApplication_m_modifierKeys_get(void * jarg1) {
  int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (int) ((arg1)->m_modifierKeys);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DemoApplication(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DemoApplication_getDynamicsWorld(void * jarg1) {
  void * jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btDynamicsWorld *result = 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (btDynamicsWorld *)(arg1)->getDynamicsWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_initPhysics(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->initPhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setDrawClusters(void * jarg1, unsigned int jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawClusters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_overrideGLShapeDrawer(void * jarg1, void * jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  GL_ShapeDrawer *arg2 = (GL_ShapeDrawer *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (GL_ShapeDrawer *)jarg2; 
  (arg1)->overrideGLShapeDrawer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setOrthographicProjection(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->setOrthographicProjection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_resetPerspectiveProjection(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->resetPerspectiveProjection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DemoApplication_setTexturing(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTexturing(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DemoApplication_setShadows(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setShadows(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DemoApplication_getTexturing(void * jarg1) {
  unsigned int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (bool)((DemoApplication const *)arg1)->getTexturing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DemoApplication_getShadows(void * jarg1) {
  unsigned int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (bool)((DemoApplication const *)arg1)->getShadows();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DemoApplication_getDebugMode(void * jarg1) {
  int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (int)(arg1)->getDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setDebugMode(void * jarg1, int jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDebugMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setAzi(void * jarg1, float jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  float arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAzi(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setCameraUp(void * jarg1, void * jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setCameraUp((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setCameraForwardAxis(void * jarg1, int jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCameraForwardAxis(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_myinit(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->myinit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_toggleIdle(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->toggleIdle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_updateCamera(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->updateCamera();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DemoApplication_getCameraPosition(void * jarg1) {
  void * jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btVector3 result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (arg1)->getCameraPosition();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DemoApplication_getCameraTargetPosition(void * jarg1) {
  void * jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btVector3 result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (arg1)->getCameraTargetPosition();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DemoApplication_getDeltaTimeMicroseconds(void * jarg1) {
  float jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btScalar result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (btScalar)(arg1)->getDeltaTimeMicroseconds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setFrustumZPlanes(void * jarg1, float jarg2, float jarg3) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setFrustumZPlanes(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DemoApplication_getCameraDistance(void * jarg1) {
  float jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  float result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (float)(arg1)->getCameraDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setCameraDistance(void * jarg1, float jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  float arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCameraDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_moveAndDisplay(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->moveAndDisplay();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_clientMoveAndDisplay(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->clientMoveAndDisplay();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_clientResetScene(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->clientResetScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setShootBoxShape(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->setShootBoxShape();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_shootBox(void * jarg1, void * jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->shootBox((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DemoApplication_getRayTo(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  btVector3 result;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->getRayTo(arg2,arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DemoApplication_localCreateRigidBody(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  float arg2 ;
  btTransform *arg3 = 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btCollisionShape *)jarg4; 
  result = (btRigidBody *)(arg1)->localCreateRigidBody(arg2,(btTransform const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_keyboardCallback(void * jarg1, unsigned char jarg2, int jarg3, int jarg4) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  unsigned char arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->keyboardCallback(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_keyboardUpCallback(void * jarg1, unsigned char jarg2, int jarg3, int jarg4) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  unsigned char arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->keyboardUpCallback(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_specialKeyboard(void * jarg1, int jarg2, int jarg3, int jarg4) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->specialKeyboard(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_specialKeyboardUp(void * jarg1, int jarg2, int jarg3, int jarg4) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->specialKeyboardUp(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_reshape(void * jarg1, int jarg2, int jarg3) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->reshape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_mouseFunc(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->mouseFunc(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_mouseMotionFunc(void * jarg1, int jarg2, int jarg3) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->mouseMotionFunc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_displayCallback(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->displayCallback();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_renderme(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->renderme();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_swapBuffers(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->swapBuffers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_updateModifierKeys(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->updateModifierKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_stepLeft(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->stepLeft();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_stepRight(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->stepRight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_stepFront(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->stepFront();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_stepBack(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->stepBack();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_zoomIn(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->zoomIn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_zoomOut(void * jarg1) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  
  arg1 = (DemoApplication *)jarg1; 
  (arg1)->zoomOut();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DemoApplication_isIdle(void * jarg1) {
  unsigned int jresult ;
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool result;
  
  arg1 = (DemoApplication *)jarg1; 
  result = (bool)((DemoApplication const *)arg1)->isIdle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DemoApplication_setIdle(void * jarg1, unsigned int jarg2) {
  DemoApplication *arg1 = (DemoApplication *) 0 ;
  bool arg2 ;
  
  arg1 = (DemoApplication *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlutDemoApplication_specialKeyboard(void * jarg1, int jarg2, int jarg3, int jarg4) {
  GlutDemoApplication *arg1 = (GlutDemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (GlutDemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->specialKeyboard(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlutDemoApplication_swapBuffers(void * jarg1) {
  GlutDemoApplication *arg1 = (GlutDemoApplication *) 0 ;
  
  arg1 = (GlutDemoApplication *)jarg1; 
  (arg1)->swapBuffers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GlutDemoApplication_updateModifierKeys(void * jarg1) {
  GlutDemoApplication *arg1 = (GlutDemoApplication *) 0 ;
  
  arg1 = (GlutDemoApplication *)jarg1; 
  (arg1)->updateModifierKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GlutDemoApplication(void * jarg1) {
  GlutDemoApplication *arg1 = (GlutDemoApplication *) 0 ;
  
  arg1 = (GlutDemoApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT char SWIGSTDCALL CSharp_BT_KEY_K_get() {
  char jresult ;
  char result;
  
  result = (char)('k');
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_glutmain(int jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, void * jarg6) {
  int jresult ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  DemoApplication *arg6 = (DemoApplication *) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (DemoApplication *)jarg6; 
  result = (int)glutmain(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_default_get() {
  int jresult ;
  int result;
  
  result = (int)STBI_default;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_grey_get() {
  int jresult ;
  int result;
  
  result = (int)STBI_grey;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_grey_alpha_get() {
  int jresult ;
  int result;
  
  result = (int)STBI_grey_alpha;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_rgb_get() {
  int jresult ;
  int result;
  
  result = (int)STBI_rgb;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STBI_rgb_alpha_get() {
  int jresult ;
  int result;
  
  result = (int)STBI_rgb_alpha;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_load_from_memory(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  stbi_uc *arg1 = (stbi_uc *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  stbi_uc *result = 0 ;
  
  arg1 = (stbi_uc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  result = (stbi_uc *)stbi_load_from_memory((unsigned char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_load(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  stbi_uc *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (stbi_uc *)stbi_load((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_load_from_file(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  stbi_uc *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (stbi_uc *)stbi_load_from_file(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_io_callbacks_read_set(void * jarg1, void * jarg2) {
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  int (*arg2)(void *,char *,int) = (int (*)(void *,char *,int)) 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (int (*)(void *,char *,int))jarg2; 
  if (arg1) (arg1)->read = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_io_callbacks_read_get(void * jarg1) {
  void * jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  int (*result)(void *,char *,int) = 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  result = (int (*)(void *,char *,int)) ((arg1)->read);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_io_callbacks_skip_set(void * jarg1, void * jarg2) {
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void (*arg2)(void *,unsigned int) = (void (*)(void *,unsigned int)) 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (void (*)(void *,unsigned int))jarg2; 
  if (arg1) (arg1)->skip = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_io_callbacks_skip_get(void * jarg1) {
  void * jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void (*result)(void *,unsigned int) = 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  result = (void (*)(void *,unsigned int)) ((arg1)->skip);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_io_callbacks_eof_set(void * jarg1, void * jarg2) {
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  int (*arg2)(void *) = (int (*)(void *)) 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (int (*)(void *))jarg2; 
  if (arg1) (arg1)->eof = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_io_callbacks_eof_get(void * jarg1) {
  void * jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  int (*result)(void *) = 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  result = (int (*)(void *)) ((arg1)->eof);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_stbi_io_callbacks() {
  void * jresult ;
  stbi_io_callbacks *result = 0 ;
  
  result = (stbi_io_callbacks *)new stbi_io_callbacks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_stbi_io_callbacks(void * jarg1) {
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_load_from_callbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void *arg2 = (void *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  stbi_uc *result = 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  result = (stbi_uc *)stbi_load_from_callbacks((stbi_io_callbacks const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_loadf_from_memory(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  stbi_uc *arg1 = (stbi_uc *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  float *result = 0 ;
  
  arg1 = (stbi_uc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  result = (float *)stbi_loadf_from_memory((unsigned char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_loadf(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  float *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (float *)stbi_loadf((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_loadf_from_file(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  float *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (float *)stbi_loadf_from_file(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_stbi_loadf_from_callbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void *arg2 = (void *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  float *result = 0 ;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  result = (float *)stbi_loadf_from_callbacks((stbi_io_callbacks const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_hdr_to_ldr_gamma(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  stbi_hdr_to_ldr_gamma(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_hdr_to_ldr_scale(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  stbi_hdr_to_ldr_scale(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_ldr_to_hdr_gamma(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  stbi_ldr_to_hdr_gamma(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_ldr_to_hdr_scale(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  stbi_ldr_to_hdr_scale(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_is_hdr_from_callbacks(void * jarg1, void * jarg2) {
  int jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (int)stbi_is_hdr_from_callbacks((stbi_io_callbacks const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_is_hdr_from_memory(void * jarg1, int jarg2) {
  int jresult ;
  stbi_uc *arg1 = (stbi_uc *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (stbi_uc *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)stbi_is_hdr_from_memory((unsigned char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_is_hdr(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)stbi_is_hdr((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_is_hdr_from_file(void * jarg1) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  result = (int)stbi_is_hdr_from_file(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_stbi_failure_reason() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)stbi_failure_reason();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_image_free(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  stbi_image_free(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_info_from_memory(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  stbi_uc *arg1 = (stbi_uc *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  arg1 = (stbi_uc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (int)stbi_info_from_memory((unsigned char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_info_from_callbacks(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  stbi_io_callbacks *arg1 = (stbi_io_callbacks *) 0 ;
  void *arg2 = (void *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  arg1 = (stbi_io_callbacks *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (int)stbi_info_from_callbacks((stbi_io_callbacks const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_info(char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  result = (int)stbi_info((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_info_from_file(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  result = (int)stbi_info_from_file(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_set_unpremultiply_on_load(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  stbi_set_unpremultiply_on_load(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_stbi_convert_iphone_png_to_rgb(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  stbi_convert_iphone_png_to_rgb(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_stbi_zlib_decode_malloc_guesssize(char * jarg1, int jarg2, int jarg3, void * jarg4) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  result = (char *)stbi_zlib_decode_malloc_guesssize((char const *)arg1,arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_stbi_zlib_decode_malloc(char * jarg1, int jarg2, void * jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (char *)stbi_zlib_decode_malloc((char const *)arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_zlib_decode_buffer(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)stbi_zlib_decode_buffer(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_stbi_zlib_decode_noheader_malloc(char * jarg1, int jarg2, void * jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (char *)stbi_zlib_decode_noheader_malloc((char const *)arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_stbi_zlib_decode_noheader_buffer(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)stbi_zlib_decode_noheader_buffer(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Win32DemoApplication_swapBuffers(void * jarg1) {
  Win32DemoApplication *arg1 = (Win32DemoApplication *) 0 ;
  
  arg1 = (Win32DemoApplication *)jarg1; 
  (arg1)->swapBuffers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Win32DemoApplication_specialKeyboard(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Win32DemoApplication *arg1 = (Win32DemoApplication *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Win32DemoApplication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->specialKeyboard(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Win32DemoApplication_updateModifierKeys(void * jarg1) {
  Win32DemoApplication *arg1 = (Win32DemoApplication *) 0 ;
  
  arg1 = (Win32DemoApplication *)jarg1; 
  (arg1)->updateModifierKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Win32DemoApplication(void * jarg1) {
  Win32DemoApplication *arg1 = (Win32DemoApplication *) 0 ;
  
  arg1 = (Win32DemoApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT GL_DialogControl * SWIGSTDCALL CSharp_GL_TextControl_SWIGUpcast(GL_TextControl *jarg1) {
    return (GL_DialogControl *)jarg1;
}

SWIGEXPORT GL_DialogControl * SWIGSTDCALL CSharp_GL_ToggleControl_SWIGUpcast(GL_ToggleControl *jarg1) {
    return (GL_DialogControl *)jarg1;
}

SWIGEXPORT GL_DialogControl * SWIGSTDCALL CSharp_GL_SliderControl_SWIGUpcast(GL_SliderControl *jarg1) {
    return (GL_DialogControl *)jarg1;
}

SWIGEXPORT DemoApplication * SWIGSTDCALL CSharp_GlutDemoApplication_SWIGUpcast(GlutDemoApplication *jarg1) {
    return (DemoApplication *)jarg1;
}

SWIGEXPORT DemoApplication * SWIGSTDCALL CSharp_Win32DemoApplication_SWIGUpcast(Win32DemoApplication *jarg1) {
    return (DemoApplication *)jarg1;
}

#ifdef __cplusplus
}
#endif

