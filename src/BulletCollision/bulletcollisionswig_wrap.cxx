/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_BulletCollision(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_BulletCollision(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_BulletCollision(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


	///Bullet's btCollisionWorld and btCollisionObject definitions
	#include "CollisionDispatch/btCollisionWorld.h"
	#include "CollisionDispatch/btCollisionObject.h"

	///Collision Shapes
	#include "CollisionShapes/btBoxShape.h"
	#include "CollisionShapes/btSphereShape.h"
	#include "CollisionShapes/btCapsuleShape.h"
	#include "CollisionShapes/btCylinderShape.h"
	#include "CollisionShapes/btConeShape.h"
	#include "CollisionShapes/btConvexPolyhedron.h"
	#include "CollisionShapes/btStaticPlaneShape.h"
	#include "CollisionShapes/btConvexHullShape.h"
	#include "CollisionShapes/btTriangleMesh.h"
	#include "CollisionShapes/btConvexTriangleMeshShape.h"
	#include "CollisionShapes/btBvhTriangleMeshShape.h"
	#include "CollisionShapes/btScaledBvhTriangleMeshShape.h"
	#include "CollisionShapes/btTriangleMeshShape.h"
	#include "CollisionShapes/btTriangleIndexVertexArray.h"
	#include "CollisionShapes/btCompoundShape.h"
	#include "CollisionShapes/btTetrahedronShape.h"
	#include "CollisionShapes/btEmptyShape.h"
	#include "CollisionShapes/btMultiSphereShape.h"
	#include "CollisionShapes/btUniformScalingShape.h"
	#include "CollisionShapes/btPolyhedralConvexShape.h"

	///Narrowphase Collision Detector
	#include "CollisionDispatch/btSphereSphereCollisionAlgorithm.h"

	//#include "CollisionDispatch/btSphereBoxCollisionAlgorithm.h"
	#include "CollisionDispatch/btDefaultCollisionConfiguration.h"

	///Dispatching and generation of collision pairs (broadphase)
	#include "CollisionDispatch/btCollisionDispatcher.h"
	#include "BroadphaseCollision/btSimpleBroadphase.h"
	#include "BroadphaseCollision/btAxisSweep3.h"
	#include "BroadphaseCollision/btDbvtBroadphase.h"
	#include "NarrowPhaseCollision/btVoronoiSimplexSolver.h"
 


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btCollisionConfiguration *arg3 = (btCollisionConfiguration *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btCollisionConfiguration *)jarg3; 
  result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setBroadphase(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  (arg1)->setBroadphase(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getBroadphase__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btBroadphaseInterface *)((btCollisionWorld const *)arg1)->getBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getPairCache(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDispatcher__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btDispatcher *)(arg1)->getDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_updateSingleAabb(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->updateSingleAabb(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_updateAabbs(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->updateAabbs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_computeOverlappingPairs(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->computeOverlappingPairs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setDebugDrawer(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  (arg1)->setDebugDrawer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDebugDrawer(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btIDebugDraw *)(arg1)->getDebugDrawer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_debugDrawWorld(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_debugDrawObject(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionWorld_getNumCollisionObjects(void * jarg1) {
  int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (int)((btCollisionWorld const *)arg1)->getNumCollisionObjects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  ((btCollisionWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_convexSweepTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_convexSweepTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_contactTest(void * jarg1, void * jarg2, void * jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg3 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionWorld::ContactResultCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  (arg1)->contactTest(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_contactPairTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionWorld::ContactResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  (arg1)->contactPairTest(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTestSingle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  btCollisionWorld::RayResultCallback *arg6 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionShape *)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btCollisionWorld::RayResultCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTestSingleInternal(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_objectQuerySingle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObject *)jarg4; 
  arg5 = (btCollisionShape *)jarg5; 
  arg6 = (btTransform *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg7 = (btCollisionWorld::ConvexResultCallback *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg8 = (btScalar)jarg8; 
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_objectQuerySingleInternal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_0(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addCollisionObject(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->addCollisionObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_2(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->addCollisionObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getCollisionObjectArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btCollisionObjectArray *) &(arg1)->getCollisionObjectArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_performDiscreteCollisionDetection(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->performDiscreteCollisionDetection();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDispatchInfo__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btDispatcherInfo *) &(arg1)->getDispatchInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_getForceUpdateAllAabbs(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (bool)((btCollisionWorld const *)arg1)->getForceUpdateAllAabbs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setForceUpdateAllAabbs(void * jarg1, unsigned int jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setForceUpdateAllAabbs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_serialize(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  (arg1)->serialize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ACTIVE_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ISLAND_SLEEPING_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WANTS_DEACTIVATION_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DISABLE_DEACTIVATION_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DISABLE_SIMULATION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btCollisionObjectFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_mergesSimulationIslands(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->mergesSimulationIslands();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getAnisotropicFriction(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getAnisotropicFriction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setAnisotropicFriction__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setAnisotropicFriction__SWIG_1(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasAnisotropicFriction__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasAnisotropicFriction__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setContactProcessingThreshold(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setContactProcessingThreshold(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getContactProcessingThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getContactProcessingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isStaticObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isStaticObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isKinematicObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isKinematicObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isStaticOrKinematicObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isStaticOrKinematicObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasContactResponse(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->hasContactResponse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObject() {
  void * jresult ;
  btCollisionObject *result = 0 ;
  
  result = (btCollisionObject *)new btCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObject(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCollisionShape(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  (arg1)->setCollisionShape(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getCollisionShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btCollisionShape *)((btCollisionObject const *)arg1)->getCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_internalGetExtensionPointer(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (void *)((btCollisionObject const *)arg1)->internalGetExtensionPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_internalSetExtensionPointer(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->internalSetExtensionPointer(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getActivationState(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setActivationState(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  ((btCollisionObject const *)arg1)->setActivationState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setDeactivationTime(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDeactivationTime(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getDeactivationTime(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getDeactivationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_forceActivationState(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  ((btCollisionObject const *)arg1)->forceActivationState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_activate__SWIG_0(void * jarg1, unsigned int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((btCollisionObject const *)arg1)->activate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_activate__SWIG_1(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  ((btCollisionObject const *)arg1)->activate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isActive(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setRestitution(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitution(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getRestitution(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setFriction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getFriction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setRollingFriction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRollingFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getRollingFriction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getRollingFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getInternalType(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getInternalType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getWorldTransform__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btTransform *) &(arg1)->getWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setWorldTransform(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getBroadphaseHandle__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setBroadphaseHandle(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  (arg1)->setBroadphaseHandle(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationWorldTransform__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btTransform *) &((btCollisionObject const *)arg1)->getInterpolationWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationWorldTransform(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationLinearVelocity(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationAngularVelocity(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationLinearVelocity(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationAngularVelocity(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getIslandTag(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getIslandTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setIslandTag(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIslandTag(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getCompanionId(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getCompanionId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCompanionId(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCompanionId(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getHitFraction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getHitFraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setHitFraction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setHitFraction(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getCollisionFlags(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getCollisionFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCollisionFlags(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCollisionFlags(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdSweptSphereRadius(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSweptSphereRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCcdSweptSphereRadius(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setCcdSweptSphereRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdMotionThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdMotionThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdSquareMotionThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSquareMotionThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCcdMotionThreshold(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setCcdMotionThreshold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getUserPointer(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (void *)((btCollisionObject const *)arg1)->getUserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setUserPointer(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setUserPointer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_checkCollideWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (bool)((btCollisionObject const *)arg1)->checkCollideWith((btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObject_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCollisionObject const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_serializeSingleObject(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btCollisionObject const *)arg1)->serializeSingleObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_broadphaseHandle_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_broadphaseHandle_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rootCollisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rootCollisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_name_set(void * jarg1, char * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_name_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_worldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_worldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_worldTransform);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationWorldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationWorldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_interpolationWorldTransform);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_interpolationLinearVelocity);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_interpolationAngularVelocity);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_anisotropicFriction_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_anisotropicFriction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_anisotropicFriction_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result =  ((arg1)->m_anisotropicFriction);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_contactProcessingThreshold_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_contactProcessingThreshold_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_deactivationTime_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_deactivationTime_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_friction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_friction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rollingFriction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rollingFriction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_restitution_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_restitution_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hitFraction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hitFraction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdMotionThreshold_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdMotionThreshold_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionFlags_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionFlags_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_islandTag1_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_islandTag1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_companionId_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_companionId_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_activationState1_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_activationState1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_internalType_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_internalType_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_checkCollideWith_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_checkCollideWith_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_padding_set(void * jarg1, char * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObjectDoubleData() {
  void * jresult ;
  btCollisionObjectDoubleData *result = 0 ;
  
  result = (btCollisionObjectDoubleData *)new btCollisionObjectDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObjectDoubleData(void * jarg1) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_broadphaseHandle_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_broadphaseHandle_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rootCollisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rootCollisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_name_set(void * jarg1, char * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_name_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_worldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_worldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_worldTransform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationWorldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationWorldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_interpolationWorldTransform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationLinearVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationLinearVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_interpolationLinearVelocity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationAngularVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationAngularVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_interpolationAngularVelocity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_anisotropicFriction_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_anisotropicFriction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_anisotropicFriction_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result =  ((arg1)->m_anisotropicFriction);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_contactProcessingThreshold_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_contactProcessingThreshold_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_deactivationTime_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_deactivationTime_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_friction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_friction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rollingFriction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rollingFriction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_restitution_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_restitution_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hitFraction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdMotionThreshold_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdMotionThreshold_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hasAnisotropicFriction_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hasAnisotropicFriction_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionFlags_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionFlags_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_islandTag1_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_islandTag1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_companionId_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_companionId_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_activationState1_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_activationState1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_internalType_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_internalType_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_checkCollideWith_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_checkCollideWith_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_padding_set(void * jarg1, char * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObjectFloatData() {
  void * jresult ;
  btCollisionObjectFloatData *result = 0 ;
  
  result = (btCollisionObjectFloatData *)new btCollisionObjectFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObjectFloatData(void * jarg1) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_getHalfExtentsWithMargin(void * jarg1) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = ((btBoxShape const *)arg1)->getHalfExtentsWithMargin();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_getHalfExtentsWithoutMargin(void * jarg1) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (btVector3 *) &((btBoxShape const *)arg1)->getHalfExtentsWithoutMargin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btBoxShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btBoxShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btBoxShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBoxShape(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btBoxShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBoxShape *)new btBoxShape((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_setMargin(void * jarg1, float jarg2) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_setLocalScaling(void * jarg1, void * jarg2) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btBoxShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumVertices(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumEdges(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPlaneEquation(void * jarg1, void * jarg2, int jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector4 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  ((btBoxShape const *)arg1)->getPlaneEquation(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBoxShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btBoxShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBoxShape_getName(void * jarg1) {
  char * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (char *)((btBoxShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBoxShape(void * jarg1) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereShape(float jarg1) {
  void * jresult ;
  btScalar arg1 ;
  btSphereShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  result = (btSphereShape *)new btSphereShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSphereShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btSphereShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSphereShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSphereShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereShape_getRadius(void * jarg1) {
  float jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (btScalar)((btSphereShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_setUnscaledRadius(void * jarg1, float jarg2) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUnscaledRadius(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSphereShape_getName(void * jarg1) {
  char * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (char *)((btSphereShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_setMargin(void * jarg1, float jarg2) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereShape_getMargin(void * jarg1) {
  float jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (btScalar)((btSphereShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSphereShape(void * jarg1) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShape__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShape *)new btCapsuleShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCapsuleShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCapsuleShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCapsuleShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_setMargin(void * jarg1, float jarg2) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCapsuleShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShape_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (char *)((btCapsuleShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShape_getUpAxis(void * jarg1) {
  int jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (int)((btCapsuleShape const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCapsuleShape_getRadius(void * jarg1) {
  float jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (btScalar)((btCapsuleShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCapsuleShape_getHalfHeight(void * jarg1) {
  float jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (btScalar)((btCapsuleShape const *)arg1)->getHalfHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = ((btCapsuleShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (int)((btCapsuleShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCapsuleShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShape(void * jarg1) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeX(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeX *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShapeX *)new btCapsuleShapeX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeX_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeX *)jarg1; 
  result = (char *)((btCapsuleShapeX const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeX(void * jarg1) {
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  
  arg1 = (btCapsuleShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeZ(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeZ *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShapeZ *)new btCapsuleShapeZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeZ_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeZ *)jarg1; 
  result = (char *)((btCapsuleShapeZ const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeZ(void * jarg1) {
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  
  arg1 = (btCapsuleShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData arg2 ;
  btConvexInternalShapeData *argp2 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  argp2 = (btConvexInternalShapeData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btConvexInternalShapeData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_convexInternalShapeData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData result;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result =  ((arg1)->m_convexInternalShapeData);
  jresult = new btConvexInternalShapeData((const btConvexInternalShapeData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_upAxis_set(void * jarg1, int jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShapeData_m_upAxis_get(void * jarg1) {
  int jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int result;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeData() {
  void * jresult ;
  btCapsuleShapeData *result = 0 ;
  
  result = (btCapsuleShapeData *)new btCapsuleShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeData(void * jarg1) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getHalfExtentsWithMargin(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = ((btCylinderShape const *)arg1)->getHalfExtentsWithMargin();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getHalfExtentsWithoutMargin(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (btVector3 *) &((btCylinderShape const *)arg1)->getHalfExtentsWithoutMargin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShape(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShape *)new btCylinderShape((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCylinderShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCylinderShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_setMargin(void * jarg1, float jarg2) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShape_getUpAxis(void * jarg1) {
  int jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (int)((btCylinderShape const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = ((btCylinderShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShape_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (btScalar)((btCylinderShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShape_getName(void * jarg1) {
  char * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (char *)((btCylinderShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (int)((btCylinderShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCylinderShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShape(void * jarg1) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeX(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShapeX *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShapeX *)new btCylinderShapeX((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeX_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShapeX const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShapeX const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeX_getName(void * jarg1) {
  char * jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  result = (char *)((btCylinderShapeX const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShapeX_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  result = (btScalar)((btCylinderShapeX const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeX(void * jarg1) {
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeZ(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShapeZ *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShapeZ *)new btCylinderShapeZ((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeZ_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShapeZ const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShapeZ const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeZ_getName(void * jarg1) {
  char * jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  result = (char *)((btCylinderShapeZ const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShapeZ_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  result = (btScalar)((btCylinderShapeZ const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeZ(void * jarg1) {
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData arg2 ;
  btConvexInternalShapeData *argp2 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  argp2 = (btConvexInternalShapeData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btConvexInternalShapeData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_convexInternalShapeData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData result;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result =  ((arg1)->m_convexInternalShapeData);
  jresult = new btConvexInternalShapeData((const btConvexInternalShapeData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_upAxis_set(void * jarg1, int jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShapeData_m_upAxis_get(void * jarg1) {
  int jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int result;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeData() {
  void * jresult ;
  btCylinderShapeData *result = 0 ;
  
  result = (btCylinderShapeData *)new btCylinderShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeData(void * jarg1) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShape(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShape *)new btConeShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConeShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConeShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConeShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeShape_getRadius(void * jarg1) {
  float jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (btScalar)((btConeShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeShape_getHeight(void * jarg1) {
  float jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (btScalar)((btConeShape const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConeShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShape_getName(void * jarg1) {
  char * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  result = (char *)((btConeShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_setConeUpIndex(void * jarg1, int jarg2) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  int arg2 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConeUpIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeShape_getConeUpIndex(void * jarg1) {
  int jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (int)((btConeShape const *)arg1)->getConeUpIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  result = ((btConeShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShape(void * jarg1) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShapeX(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeX *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShapeX *)new btConeShapeX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShapeX_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShapeX *)jarg1; 
  result = ((btConeShapeX const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShapeX(void * jarg1) {
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  
  arg1 = (btConeShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShapeZ(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeZ *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShapeZ *)new btConeShapeZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShapeZ_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShapeZ *)jarg1; 
  result = ((btConeShapeZ const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShapeZ(void * jarg1) {
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  
  arg1 = (btConeShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStaticPlaneShape(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btStaticPlaneShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btScalar)jarg2; 
  result = (btStaticPlaneShape *)new btStaticPlaneShape((btVector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStaticPlaneShape(void * jarg1) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_setLocalScaling(void * jarg1, void * jarg2) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShape_getPlaneNormal(void * jarg1) {
  void * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getPlaneNormal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btStaticPlaneShape_getPlaneConstant(void * jarg1) {
  float jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btScalar *) &((btStaticPlaneShape const *)arg1)->getPlaneConstant();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShape_getName(void * jarg1) {
  char * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (char *)((btStaticPlaneShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStaticPlaneShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  int result;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (int)((btStaticPlaneShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btStaticPlaneShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_localScaling_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_localScaling = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_localScaling_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result =  ((arg1)->m_localScaling);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeNormal_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_planeNormal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeNormal_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result =  ((arg1)->m_planeNormal);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeConstant_set(void * jarg1, float jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_planeConstant = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeConstant_get(void * jarg1) {
  float jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float result;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (float) ((arg1)->m_planeConstant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_pad_set(void * jarg1, char * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_pad_get(void * jarg1) {
  char * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStaticPlaneShapeData() {
  void * jresult ;
  btStaticPlaneShapeData *result = 0 ;
  
  result = (btStaticPlaneShapeData *)new btStaticPlaneShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStaticPlaneShapeData(void * jarg1) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TEST_INTERNAL_OBJECTS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFace_m_indices_set(void * jarg1, void * jarg2) {
  btFace *arg1 = (btFace *) 0 ;
  btAlignedObjectArray< int > *arg2 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btFace *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2; 
  if (arg1) (arg1)->m_indices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btFace_m_indices_get(void * jarg1) {
  void * jresult ;
  btFace *arg1 = (btFace *) 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (btFace *)jarg1; 
  result = (btAlignedObjectArray< int > *)& ((arg1)->m_indices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFace_m_plane_set(void * jarg1, void * jarg2) {
  btFace *arg1 = (btFace *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btFace *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_plane;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btFace_m_plane_get(void * jarg1) {
  void * jresult ;
  btFace *arg1 = (btFace *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btFace *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_plane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btFace() {
  void * jresult ;
  btFace *result = 0 ;
  
  result = (btFace *)new btFace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btFace(void * jarg1) {
  btFace *arg1 = (btFace *) 0 ;
  
  arg1 = (btFace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexPolyhedron() {
  void * jresult ;
  btConvexPolyhedron *result = 0 ;
  
  result = (btConvexPolyhedron *)new btConvexPolyhedron();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexPolyhedron(void * jarg1) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_vertices_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_vertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_m_vertices_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_faces_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btFace > *arg2 = (btAlignedObjectArray< btFace > *) 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  arg2 = (btAlignedObjectArray< btFace > *)jarg2; 
  if (arg1) (arg1)->m_faces = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_m_faces_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btFace > *result = 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result = (btAlignedObjectArray< btFace > *)& ((arg1)->m_faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_uniqueEdges_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_uniqueEdges = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_m_uniqueEdges_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_uniqueEdges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_localCenter_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_localCenter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_m_localCenter_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result =  ((arg1)->m_localCenter);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_extents_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_extents = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_m_extents_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result =  ((arg1)->m_extents);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_m_radius_set(void * jarg1, float jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexPolyhedron_m_radius_get(void * jarg1) {
  float jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btScalar result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result = (btScalar) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_mC_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mC = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_mC_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result =  ((arg1)->mC);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_mE_set(void * jarg1, void * jarg2) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mE = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexPolyhedron_mE_get(void * jarg1) {
  void * jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btVector3 result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result =  ((arg1)->mE);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_initialize(void * jarg1) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  (arg1)->initialize();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConvexPolyhedron_testContainment(void * jarg1) {
  unsigned int jresult ;
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  bool result;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  result = (bool)((btConvexPolyhedron const *)arg1)->testContainment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexPolyhedron_project(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  btConvexPolyhedron *arg1 = (btConvexPolyhedron *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btConvexPolyhedron *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexPolyhedron const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_0(float* jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  int arg3 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = jarg1;
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_1(float* jarg1, int jarg2) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = jarg1;
  arg2 = (int)jarg2; 
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_2(float* jarg1) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = jarg1;
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_3() {
  void * jresult ;
  btConvexHullShape *result = 0 ;
  
  result = (btConvexHullShape *)new btConvexHullShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_addPoint(void * jarg1, void * jarg2) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addPoint((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getUnscaledPoints__SWIG_0(void * jarg1) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (btVector3 *)(arg1)->getUnscaledPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getPoints(void * jarg1) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getScaledPoint(void * jarg1, int jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btConvexHullShape const *)arg1)->getScaledPoint(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumPoints(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConvexHullShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_project(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShape_getName(void * jarg1) {
  char * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (char *)((btConvexHullShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumVertices(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumEdges(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btConvexHullShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConvexHullShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btConvexHullShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_GetPolihedralConvexShape(void * jarg1) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btPolyhedralConvexShape *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (btPolyhedralConvexShape *)(arg1)->GetPolihedralConvexShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConvexHullShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexHullShape(void * jarg1) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData arg2 ;
  btConvexInternalShapeData *argp2 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  argp2 = (btConvexInternalShapeData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btConvexInternalShapeData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_convexInternalShapeData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData result;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result =  ((arg1)->m_convexInternalShapeData);
  jresult = new btConvexInternalShapeData((const btConvexInternalShapeData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsFloatPtr_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_unscaledPointsFloatPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsFloatPtr_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (btVector3FloatData *) ((arg1)->m_unscaledPointsFloatPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsDoublePtr_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_unscaledPointsDoublePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsDoublePtr_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (btVector3DoubleData *) ((arg1)->m_unscaledPointsDoublePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_numUnscaledPoints_set(void * jarg1, int jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numUnscaledPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShapeData_m_numUnscaledPoints_get(void * jarg1) {
  int jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int result;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (int) ((arg1)->m_numUnscaledPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_padding3_set(void * jarg1, char * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding3, (const char *)arg2, 4-1);
      arg1->m_padding3[4-1] = 0;
    } else {
      arg1->m_padding3[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShapeData_m_padding3_get(void * jarg1) {
  char * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShapeData() {
  void * jresult ;
  btConvexHullShapeData *result = 0 ;
  
  result = (btConvexHullShapeData *)new btConvexHullShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexHullShapeData(void * jarg1) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_m_weldingThreshold_set(void * jarg1, float jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_weldingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleMesh_m_weldingThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (btScalar) ((arg1)->m_weldingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  btTriangleMesh *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (btTriangleMesh *)new btTriangleMesh(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  btTriangleMesh *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (btTriangleMesh *)new btTriangleMesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_2() {
  void * jresult ;
  btTriangleMesh *result = 0 ;
  
  result = (btTriangleMesh *)new btTriangleMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleMesh_getUse32bitIndices(void * jarg1) {
  unsigned int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (bool)((btTriangleMesh const *)arg1)->getUse32bitIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleMesh_getUse4componentVertices(void * jarg1) {
  unsigned int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (bool)((btTriangleMesh const *)arg1)->getUse4componentVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addTriangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addTriangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleMesh_getNumTriangles(void * jarg1) {
  int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (int)((btTriangleMesh const *)arg1)->getNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_preallocateVertices(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_preallocateIndices(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateIndices(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleMesh_findOrAddVertex(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->findOrAddVertex((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addIndex(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMesh(void * jarg1) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexTriangleMeshShape__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexTriangleMeshShape__SWIG_1(void * jarg1) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getMeshInterface__SWIG_0(void * jarg1) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConvexTriangleMeshShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (char *)((btConvexTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumVertices(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumEdges(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btConvexTriangleMeshShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btConvexTriangleMeshShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btConvexTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_calculatePrincipalAxisTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->calculatePrincipalAxisTransform(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexTriangleMeshShape(void * jarg1) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_2(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_3(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBvhTriangleMeshShape(void * jarg1) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getOwnsBvh(void * jarg1) {
  unsigned int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->getOwnsBvh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_performRaycast(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->performRaycast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_performConvexcast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->performConvexcast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_refitTree(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->refitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_partialRefitTree(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->partialRefitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getOptimizedBvh(void * jarg1) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (btOptimizedBvh *)(arg1)->getOptimizedBvh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btOptimizedBvh *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setOptimizedBvh(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btOptimizedBvh *)jarg2; 
  (arg1)->setOptimizedBvh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_buildOptimizedBvh(void * jarg1) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  (arg1)->buildOptimizedBvh();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_usesQuantizedAabbCompression(void * jarg1) {
  unsigned int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->usesQuantizedAabbCompression();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setTriangleInfoMap(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *arg2 = (btTriangleInfoMap *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleInfoMap *)jarg2; 
  (arg1)->setTriangleInfoMap(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(void * jarg1) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (btTriangleInfoMap *)((btBvhTriangleMeshShape const *)arg1)->getTriangleInfoMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (int)((btBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serializeSingleBvh(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleBvh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleTriangleInfoMap(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_meshInterface_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData arg2 ;
  btStridingMeshInterfaceData *argp2 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  argp2 = (btStridingMeshInterfaceData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btStridingMeshInterfaceData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_meshInterface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_meshInterface_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData result;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result =  ((arg1)->m_meshInterface);
  jresult = new btStridingMeshInterfaceData((const btStridingMeshInterfaceData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedFloatBvh_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *arg2 = (btQuantizedBvhFloatData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btQuantizedBvhFloatData *)jarg2; 
  if (arg1) (arg1)->m_quantizedFloatBvh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedFloatBvh_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btQuantizedBvhFloatData *) ((arg1)->m_quantizedFloatBvh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedDoubleBvh_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *arg2 = (btQuantizedBvhDoubleData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btQuantizedBvhDoubleData *)jarg2; 
  if (arg1) (arg1)->m_quantizedDoubleBvh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedDoubleBvh_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btQuantizedBvhDoubleData *) ((arg1)->m_quantizedDoubleBvh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_triangleInfoMap_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *arg2 = (btTriangleInfoMapData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btTriangleInfoMapData *)jarg2; 
  if (arg1) (arg1)->m_triangleInfoMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_triangleInfoMap_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btTriangleInfoMapData *) ((arg1)->m_triangleInfoMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionMargin_set(void * jarg1, float jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionMargin_get(void * jarg1) {
  float jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float result;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_pad3_set(void * jarg1, char * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad3, (const char *)arg2, 4-1);
      arg1->m_pad3[4-1] = 0;
    } else {
      arg1->m_pad3[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_pad3_get(void * jarg1) {
  char * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMeshShapeData() {
  void * jresult ;
  btTriangleMeshShapeData *result = 0 ;
  
  result = (btTriangleMeshShapeData *)new btTriangleMeshShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMeshShapeData(void * jarg1) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btScaledBvhTriangleMeshShape(void * jarg1, void * jarg2) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScaledBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScaledBvhTriangleMeshShape *)new btScaledBvhTriangleMeshShape(arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btScaledBvhTriangleMeshShape(void * jarg1) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btScaledBvhTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getChildShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (btBvhTriangleMeshShape *)(arg1)->getChildShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (int)((btScaledBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_trimeshShapeData_set(void * jarg1, void * jarg2) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *arg2 = (btTriangleMeshShapeData *) 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  arg2 = (btTriangleMeshShapeData *)jarg2; 
  if (arg1) (arg1)->m_trimeshShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_trimeshShapeData_get(void * jarg1) {
  void * jresult ;
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *result = 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  result = (btTriangleMeshShapeData *)& ((arg1)->m_trimeshShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_localScaling_set(void * jarg1, void * jarg2) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_localScaling = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_localScaling_get(void * jarg1) {
  void * jresult ;
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  result =  ((arg1)->m_localScaling);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btScaledTriangleMeshShapeData() {
  void * jresult ;
  btScaledTriangleMeshShapeData *result = 0 ;
  
  result = (btScaledTriangleMeshShapeData *)new btScaledTriangleMeshShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btScaledTriangleMeshShapeData(void * jarg1) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMeshShape(void * jarg1) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_recalcLocalAabb(void * jarg1) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  (arg1)->recalcLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getMeshInterface__SWIG_0(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalAabbMin(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalAabbMax(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (char *)((btTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_numTriangles_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTriangles = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_numTriangles_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexBase_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_triangleIndexBase = (unsigned char const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexBase_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (unsigned char *) ((arg1)->m_triangleIndexBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexStride_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndexStride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexStride_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_triangleIndexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_numVertices_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numVertices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_numVertices_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexBase_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_vertexBase = (unsigned char const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_vertexBase_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (unsigned char *) ((arg1)->m_vertexBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexStride_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexStride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_vertexStride_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_vertexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_indexType_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  PHY_ScalarType *argp2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  argp2 = (PHY_ScalarType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PHY_ScalarType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_indexType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_indexType_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result =  ((arg1)->m_indexType);
  jresult = new PHY_ScalarType((const PHY_ScalarType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexType_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  PHY_ScalarType *argp2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  argp2 = (PHY_ScalarType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PHY_ScalarType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vertexType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_vertexType_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result =  ((arg1)->m_vertexType);
  jresult = new PHY_ScalarType((const PHY_ScalarType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btIndexedMesh() {
  void * jresult ;
  btIndexedMesh *result = 0 ;
  
  result = (btIndexedMesh *)new btIndexedMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btIndexedMesh(void * jarg1) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleIndexVertexArray__SWIG_0() {
  void * jresult ;
  btTriangleIndexVertexArray *result = 0 ;
  
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleIndexVertexArray(void * jarg1) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleIndexVertexArray__SWIG_1(int jarg1, int* jarg2, int jarg3, int jarg4, float* jarg5, int jarg6) {
  void * jresult ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar *arg5 = (btScalar *) 0 ;
  int arg6 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5;
  arg6 = (int)jarg6; 
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  PHY_ScalarType arg3 ;
  PHY_ScalarType *argp3 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btIndexedMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btIndexedMesh const & type is null", 0);
    return ;
  } 
  argp3 = (PHY_ScalarType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PHY_ScalarType", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(void * jarg1, void * jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btIndexedMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btIndexedMesh const & type is null", 0);
    return ;
  } 
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_unLockVertexBase(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->unLockVertexBase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_unLockReadOnlyVertexBase(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  ((btTriangleIndexVertexArray const *)arg1)->unLockReadOnlyVertexBase(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getNumSubParts(void * jarg1) {
  int jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int result;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (int)((btTriangleIndexVertexArray const *)arg1)->getNumSubParts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (IndexedMeshArray *) &(arg1)->getIndexedMeshArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_preallocateVertices(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_preallocateIndices(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateIndices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleIndexVertexArray_hasPremadeAabb(void * jarg1) {
  unsigned int jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  bool result;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (bool)((btTriangleIndexVertexArray const *)arg1)->hasPremadeAabb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_setPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btTriangleIndexVertexArray const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  ((btTriangleIndexVertexArray const *)arg1)->getPremadeAabb(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_transform_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform arg2 ;
  btTransform *argp2 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  argp2 = (btTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_transform_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform result;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result =  ((arg1)->m_transform);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShape_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShape_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_childShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShapeType_set(void * jarg1, int jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childShapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShapeType_get(void * jarg1) {
  int jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (int) ((arg1)->m_childShapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_childMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeChild_m_childMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar result;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btScalar) ((arg1)->m_childMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_node_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_node_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeChild() {
  void * jresult ;
  btCompoundShapeChild *result = 0 ;
  
  result = (btCompoundShapeChild *)new btCompoundShapeChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeChild(void * jarg1) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShape__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  btCompoundShape *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (btCompoundShape *)new btCompoundShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShape__SWIG_1() {
  void * jresult ;
  btCompoundShape *result = 0 ;
  
  result = (btCompoundShape *)new btCompoundShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShape(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_addChildShape(void * jarg1, void * jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  (arg1)->addChildShape((btTransform const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_removeChildShape(void * jarg1, void * jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  (arg1)->removeChildShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_removeChildShapeByIndex(void * jarg1, int jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeChildShapeByIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_getNumChildShapes(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->getNumChildShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildShape__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btCollisionShape *)(arg1)->getChildShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildTransform__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTransform *) &(arg1)->getChildTransform(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_updateChildTransform__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_updateChildTransform__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildList(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCompoundShapeChild *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btCompoundShapeChild *)(arg1)->getChildList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_recalculateLocalAabb(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  (arg1)->recalculateLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btVector3 *) &((btCompoundShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_setMargin(void * jarg1, float jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShape_getMargin(void * jarg1) {
  float jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btScalar)((btCompoundShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCompoundShape_getName(void * jarg1) {
  char * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (char *)((btCompoundShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getDynamicAabbTree__SWIG_0(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btDbvt *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btDbvt *)((btCompoundShape const *)arg1)->getDynamicAabbTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_createAabbTreeFromChildren(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  (arg1)->createAabbTreeFromChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_calculatePrincipalAxisTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->calculatePrincipalAxisTransform(arg2,*arg3,*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_getUpdateRevision(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->getUpdateRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCompoundShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCompoundShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_transform_set(void * jarg1, void * jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChildData_m_transform_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result =  ((arg1)->m_transform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShape_set(void * jarg1, void * jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShape_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_childShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShapeType_set(void * jarg1, int jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childShapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShapeType_get(void * jarg1) {
  int jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (int) ((arg1)->m_childShapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float arg2 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_childMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float result;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (float) ((arg1)->m_childMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeChildData() {
  void * jresult ;
  btCompoundShapeChildData *result = 0 ;
  
  result = (btCompoundShapeChildData *)new btCompoundShapeChildData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeChildData(void * jarg1) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_childShapePtr_set(void * jarg1, void * jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *arg2 = (btCompoundShapeChildData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (btCompoundShapeChildData *)jarg2; 
  if (arg1) (arg1)->m_childShapePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeData_m_childShapePtr_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *result = 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (btCompoundShapeChildData *) ((arg1)->m_childShapePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_numChildShapes_set(void * jarg1, int jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numChildShapes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeData_m_numChildShapes_get(void * jarg1) {
  int jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (int) ((arg1)->m_numChildShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float result;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeData() {
  void * jresult ;
  btCompoundShapeData *result = 0 ;
  
  result = (btCompoundShapeData *)new btCompoundShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeData(void * jarg1) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_0() {
  void * jresult ;
  btBU_Simplex1to4 *result = 0 ;
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_1(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_reset(void * jarg1) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_addVertex(void * jarg1, void * jarg2) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addVertex((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumVertices(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumEdges(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumPlanes(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btBU_Simplex1to4 const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getIndex(void * jarg1, int jarg2) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBU_Simplex1to4_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btBU_Simplex1to4 const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBU_Simplex1to4_getName(void * jarg1) {
  char * jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (char *)((btBU_Simplex1to4 const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBU_Simplex1to4(void * jarg1) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btEmptyShape() {
  void * jresult ;
  btEmptyShape *result = 0 ;
  
  result = (btEmptyShape *)new btEmptyShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btEmptyShape(void * jarg1) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_setLocalScaling(void * jarg1, void * jarg2) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btEmptyShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  result = (btVector3 *) &((btEmptyShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btEmptyShape_getName(void * jarg1) {
  char * jresult ;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  result = (char *)((btEmptyShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMultiSphereShape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btMultiSphereShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (int)jarg3; 
  result = (btMultiSphereShape *)new btMultiSphereShape((btVector3 const *)arg1,(btScalar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btMultiSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btMultiSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btMultiSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShape_getSphereCount(void * jarg1) {
  int jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (int)((btMultiSphereShape const *)arg1)->getSphereCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShape_getSpherePosition(void * jarg1, int jarg2) {
  void * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btMultiSphereShape const *)arg1)->getSpherePosition(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMultiSphereShape_getSphereRadius(void * jarg1, int jarg2) {
  float jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btMultiSphereShape const *)arg1)->getSphereRadius(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShape_getName(void * jarg1) {
  char * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (char *)((btMultiSphereShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (int)((btMultiSphereShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btMultiSphereShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSphereShape(void * jarg1) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPositionAndRadius_m_pos_set(void * jarg1, void * jarg2) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPositionAndRadius_m_pos_get(void * jarg1) {
  void * jresult ;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  result =  ((arg1)->m_pos);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPositionAndRadius_m_radius_set(void * jarg1, float jarg2) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float arg2 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPositionAndRadius_m_radius_get(void * jarg1) {
  float jresult ;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float result;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  result = (float) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPositionAndRadius() {
  void * jresult ;
  btPositionAndRadius *result = 0 ;
  
  result = (btPositionAndRadius *)new btPositionAndRadius();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPositionAndRadius(void * jarg1) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData arg2 ;
  btConvexInternalShapeData *argp2 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  argp2 = (btConvexInternalShapeData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btConvexInternalShapeData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_convexInternalShapeData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData result;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result =  ((arg1)->m_convexInternalShapeData);
  jresult = new btConvexInternalShapeData((const btConvexInternalShapeData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArrayPtr_set(void * jarg1, void * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *arg2 = (btPositionAndRadius *) 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (btPositionAndRadius *)jarg2; 
  if (arg1) (arg1)->m_localPositionArrayPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArrayPtr_get(void * jarg1) {
  void * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *result = 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (btPositionAndRadius *) ((arg1)->m_localPositionArrayPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArraySize_set(void * jarg1, int jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_localPositionArraySize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArraySize_get(void * jarg1) {
  int jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (int) ((arg1)->m_localPositionArraySize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMultiSphereShapeData() {
  void * jresult ;
  btMultiSphereShapeData *result = 0 ;
  
  result = (btMultiSphereShapeData *)new btMultiSphereShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSphereShapeData(void * jarg1) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btUniformScalingShape(void * jarg1, float jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  btUniformScalingShape *result = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btUniformScalingShape *)new btUniformScalingShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btUniformScalingShape(void * jarg1) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btUniformScalingShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniformScalingShape_getUniformScalingFactor(void * jarg1) {
  float jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btScalar)((btUniformScalingShape const *)arg1)->getUniformScalingFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_getChildShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btConvexShape *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btConvexShape *)(arg1)->getChildShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btUniformScalingShape_getName(void * jarg1) {
  char * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (char *)((btUniformScalingShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getAabbSlow(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_setLocalScaling(void * jarg1, void * jarg2) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btVector3 *) &((btUniformScalingShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_setMargin(void * jarg1, float jarg2) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniformScalingShape_getMargin(void * jarg1) {
  float jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btScalar)((btUniformScalingShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btUniformScalingShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (int)((btUniformScalingShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPolyhedralConvexShape(void * jarg1) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->initializePolyhedralFeatures(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (bool)(arg1)->initializePolyhedralFeatures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPolyhedralConvexShape_getConvexPolyhedron(void * jarg1) {
  void * jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)arg1)->getConvexPolyhedron();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btPolyhedralConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btPolyhedralConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumVertices(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumEdges(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btPolyhedralConvexShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btPolyhedralConvexShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_setLocalScaling(void * jarg1, void * jarg2) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_recalcLocalAabb(void * jarg1) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  (arg1)->recalcLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPolyhedralConvexAabbCachingShape(void * jarg1) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereSphereCollisionAlgorithm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm(arg1,(btCollisionAlgorithmConstructionInfo const &)*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereSphereCollisionAlgorithm__SWIG_1(void * jarg1) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm((btCollisionAlgorithmConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSphereSphereCollisionAlgorithm(void * jarg1) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_stackAlloc_set(void * jarg1, void * jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btStackAlloc *arg2 = (btStackAlloc *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (btStackAlloc *)jarg2; 
  if (arg1) (arg1)->m_stackAlloc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_stackAlloc_get(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btStackAlloc *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (btStackAlloc *) ((arg1)->m_stackAlloc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set(void * jarg1, void * jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (btPoolAllocator *)jarg2; 
  if (arg1) (arg1)->m_persistentManifoldPool = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (btPoolAllocator *) ((arg1)->m_persistentManifoldPool);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set(void * jarg1, void * jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (btPoolAllocator *)jarg2; 
  if (arg1) (arg1)->m_collisionAlgorithmPool = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (btPoolAllocator *) ((arg1)->m_collisionAlgorithmPool);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_defaultMaxPersistentManifoldPoolSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_defaultMaxPersistentManifoldPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_defaultMaxCollisionAlgorithmPoolSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_defaultMaxCollisionAlgorithmPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_customCollisionAlgorithmMaxElementSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_customCollisionAlgorithmMaxElementSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_defaultStackAllocatorSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_defaultStackAllocatorSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useEpaPenetrationAlgorithm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_useEpaPenetrationAlgorithm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConstructionInfo() {
  void * jresult ;
  btDefaultCollisionConstructionInfo *result = 0 ;
  
  result = (btDefaultCollisionConstructionInfo *)new btDefaultCollisionConstructionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultCollisionConstructionInfo(void * jarg1) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConfiguration__SWIG_0(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = 0 ;
  btDefaultCollisionConfiguration *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDefaultCollisionConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration((btDefaultCollisionConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConfiguration__SWIG_1() {
  void * jresult ;
  btDefaultCollisionConfiguration *result = 0 ;
  
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultCollisionConfiguration(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getPersistentManifoldPool(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getPersistentManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getCollisionAlgorithmPool(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getCollisionAlgorithmPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getStackAllocator(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btStackAlloc *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btStackAlloc *)(arg1)->getStackAllocator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getSimplexSolver(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btVoronoiSimplexSolver *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btVoronoiSimplexSolver *)(arg1)->getSimplexSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setConvexConvexMultipointIterations(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1(void * jarg1, int jarg2) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConvexConvexMultipointIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  (arg1)->setConvexConvexMultipointIterations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPlaneConvexMultipointIterations(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1(void * jarg1, int jarg2) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPlaneConvexMultipointIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  (arg1)->setPlaneConvexMultipointIterations();
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_DISPATCH_REGISTRY_ARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionDispatcher_getDispatcherFlags(void * jarg1) {
  int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (int)((btCollisionDispatcher const *)arg1)->getDispatcherFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setDispatcherFlags(void * jarg1, int jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDispatcherFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_registerCollisionCreateFunc(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *arg4 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btCollisionAlgorithmCreateFunc *)jarg4; 
  (arg1)->registerCollisionCreateFunc(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionDispatcher_getNumManifolds(void * jarg1) {
  int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (int)((btCollisionDispatcher const *)arg1)->getNumManifolds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getInternalManifoldPointer(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionDispatcher(void * jarg1) {
  void * jresult ;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btCollisionDispatcher *result = 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  result = (btCollisionDispatcher *)new btCollisionDispatcher(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionDispatcher(void * jarg1) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getNewManifold(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_releaseManifold(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->releaseManifold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_clearManifold(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->clearManifold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_findAlgorithm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btPersistentManifold *)jarg4; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_findAlgorithm__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionDispatcher_needsCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionDispatcher_needsResponse(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_dispatchAllCollisionPairs(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  arg3 = (btDispatcherInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg4 = (btDispatcher *)jarg4; 
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setNearCallback(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback arg2 = (btNearCallback) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btNearCallback)jarg2; 
  (arg1)->setNearCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getNearCallback(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btNearCallback)((btCollisionDispatcher const *)arg1)->getNearCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_defaultNearCallback(void * jarg1, void * jarg2, void * jarg3) {
  btBroadphasePair *arg1 = 0 ;
  btCollisionDispatcher *arg2 = 0 ;
  btDispatcherInfo *arg3 = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg2 = (btCollisionDispatcher *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionDispatcher & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcherInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  btCollisionDispatcher::defaultNearCallback(*arg1,*arg2,(btDispatcherInfo const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_allocateCollisionAlgorithm(void * jarg1, int jarg2) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_freeCollisionAlgorithm(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->freeCollisionAlgorithm(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getCollisionConfiguration__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btCollisionConfiguration *)(arg1)->getCollisionConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setCollisionConfiguration(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *arg2 = (btCollisionConfiguration *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionConfiguration *)jarg2; 
  (arg1)->setCollisionConfiguration(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getInternalManifoldPool__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_m_nextFree_set(void * jarg1, int jarg2) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nextFree = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_m_nextFree_get(void * jarg1) {
  int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  result = (int) ((arg1)->m_nextFree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphaseProxy__SWIG_0() {
  void * jresult ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphaseProxy__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6, void * jarg7) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  short arg5 ;
  short arg6 ;
  void *arg7 = (void *) 0 ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (short)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (void *)jarg7; 
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_SetNextFree(void * jarg1, int jarg2) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNextFree(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_GetNextFree(void * jarg1) {
  int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  result = (int)((btSimpleBroadphaseProxy const *)arg1)->GetNextFree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleBroadphaseProxy(void * jarg1) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btSimpleBroadphase *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  btSimpleBroadphase *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_2() {
  void * jresult ;
  btSimpleBroadphase *result = 0 ;
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleBroadphase(void * jarg1) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSimpleBroadphase_aabbOverlap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btSimpleBroadphaseProxy *arg2 = (btSimpleBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (btSimpleBroadphaseProxy *)jarg2; 
  result = (bool)btSimpleBroadphase::aabbOverlap(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleBroadphase_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSimpleBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_aabbTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseAabbCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseAabbCallback & type is null", 0);
    return ;
  } 
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleBroadphase_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSimpleBroadphase_testAabbOverlap(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSimpleBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_printStats(void * jarg1) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_OVERLAP_TEST_ON_REMOVES_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gOverlappingPairs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  gOverlappingPairs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gOverlappingPairs_get() {
  int jresult ;
  int result;
  
  result = (int)gOverlappingPairs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAxisSweep3(void * jarg1) {
  btAxisSweep3 *arg1 = (btAxisSweep3 *) 0 ;
  
  arg1 = (btAxisSweep3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_bt32BitAxisSweep3(void * jarg1) {
  bt32BitAxisSweep3 *arg1 = (bt32BitAxisSweep3 *) 0 ;
  
  arg1 = (bt32BitAxisSweep3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_PROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_PREVENTFALSEUPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_ACCURATESLEEPING_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_ENABLE_BENCHMARK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_leaf_set(void * jarg1, void * jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->leaf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtProxy_leaf_get(void * jarg1) {
  void * jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (btDbvtNode *) ((arg1)->leaf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_links_set(void * jarg1, void * jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **arg2 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (btDbvtProxy **)jarg2; 
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->links;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtProxy_links_get(void * jarg1) {
  void * jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **result = 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->links);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_stage_set(void * jarg1, int jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtProxy_stage_get(void * jarg1) {
  int jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int result;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (int) ((arg1)->stage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtProxy(void * jarg1, void * jarg2, void * jarg3, short jarg4, short jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btDbvtProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = (short)jarg5; 
  result = (btDbvtProxy *)new btDbvtProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtProxy(void * jarg1) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_DYNAMIC_SET_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::DYNAMIC_SET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_FIXED_SET_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::FIXED_SET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_STAGECOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::STAGECOUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_sets_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDbvt *)jarg2; 
  {
    size_t ii;
    btDbvt *b = (btDbvt *) arg1->m_sets;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvt *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_sets_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btDbvt *)(btDbvt *) ((arg1)->m_sets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageRoots_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDbvtProxy **)jarg2; 
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->m_stageRoots;
    for (ii = 0; ii < (size_t)btDbvtBroadphase::STAGECOUNT+1; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageRoots_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->m_stageRoots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_paircache_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  if (arg1) (arg1)->m_paircache = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_paircache_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btOverlappingPairCache *) ((arg1)->m_paircache);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_prediction_set(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_prediction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_m_prediction_get(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar) ((arg1)->m_prediction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageCurrent_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_stageCurrent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageCurrent_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_stageCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_fupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_fupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_fupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_fupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_dupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_dupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_dupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_cupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_cupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_cupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_cupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_newpairs_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_newpairs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_newpairs_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_newpairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_fixedleft_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_fixedleft = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_fixedleft_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_fixedleft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_call_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_updates_call = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_call_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (unsigned int) ((arg1)->m_updates_call);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_done_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_updates_done = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_done_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (unsigned int) ((arg1)->m_updates_done);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_ratio_set(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_updates_ratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_ratio_get(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar) ((arg1)->m_updates_ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_pid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_pid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_pid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_cid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_cid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_cid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_cid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_gid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_gid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_gid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_gid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_releasepaircache_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_releasepaircache = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_releasepaircache_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_releasepaircache);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_deferedcollide_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_deferedcollide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_deferedcollide_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_deferedcollide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_needcleanup_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_needcleanup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_needcleanup_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_needcleanup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtBroadphase__SWIG_0(void * jarg1) {
  void * jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDbvtBroadphase *result = 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (btDbvtBroadphase *)new btDbvtBroadphase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtBroadphase__SWIG_1() {
  void * jresult ;
  btDbvtBroadphase *result = 0 ;
  
  result = (btDbvtBroadphase *)new btDbvtBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtBroadphase(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_collide(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->collide(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_optimize(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  (arg1)->optimize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_aabbTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseAabbCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseAabbCallback & type is null", 0);
    return ;
  } 
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btDbvtBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btDbvtBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_printStats(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_resetPool(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->resetPool(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_performDeferredRemoval(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->performDeferredRemoval(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setVelocityPrediction(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setVelocityPrediction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_getVelocityPrediction(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar)((btDbvtBroadphase const *)arg1)->getVelocityPrediction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setAabbForceUpdate(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabbForceUpdate(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_benchmark(void * jarg1) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  btDbvtBroadphase::benchmark(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VORONOI_SIMPLEX_MAX_VERTS_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_VORONOI_DEFAULT_EQUAL_VERTEX_THRESHOLD_get() {
  double jresult ;
  double result;
  
  result = (double)(0.0001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btUsageBitfield() {
  void * jresult ;
  btUsageBitfield *result = 0 ;
  
  result = (btUsageBitfield *)new btUsageBitfield();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_reset(void * jarg1) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_usedVertexA_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->usedVertexA = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_usedVertexA_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->usedVertexA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_usedVertexB_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->usedVertexB = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_usedVertexB_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->usedVertexB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_usedVertexC_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->usedVertexC = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_usedVertexC_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->usedVertexC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_usedVertexD_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->usedVertexD = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_usedVertexD_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->usedVertexD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_unused1_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->unused1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_unused1_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->unused1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_unused2_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->unused2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_unused2_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->unused2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_unused3_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->unused3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_unused3_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->unused3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUsageBitfield_unused4_set(void * jarg1, unsigned short jarg2) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->unused4 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btUsageBitfield_unused4_get(void * jarg1) {
  unsigned short jresult ;
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  unsigned short result;
  
  arg1 = (btUsageBitfield *)jarg1; 
  result = (unsigned short) ((arg1)->unused4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btUsageBitfield(void * jarg1) {
  btUsageBitfield *arg1 = (btUsageBitfield *) 0 ;
  
  arg1 = (btUsageBitfield *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_closestPointOnSimplex_set(void * jarg1, void * jarg2) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_closestPointOnSimplex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_closestPointOnSimplex_get(void * jarg1) {
  void * jresult ;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btVector3 result;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  result =  ((arg1)->m_closestPointOnSimplex);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_usedVertices_set(void * jarg1, void * jarg2) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btUsageBitfield *arg2 = (btUsageBitfield *) 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btUsageBitfield *)jarg2; 
  if (arg1) (arg1)->m_usedVertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_usedVertices_get(void * jarg1) {
  void * jresult ;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btUsageBitfield *result = 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  result = (btUsageBitfield *)& ((arg1)->m_usedVertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_barycentricCoords_set(void * jarg1, void * jarg2) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_barycentricCoords;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_barycentricCoords_get(void * jarg1) {
  void * jresult ;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_barycentricCoords);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_degenerate_set(void * jarg1, unsigned int jarg2) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool arg2 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_degenerate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSubSimplexClosestResult_m_degenerate_get(void * jarg1) {
  unsigned int jresult ;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool result;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  result = (bool) ((arg1)->m_degenerate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_reset(void * jarg1) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSubSimplexClosestResult_isValid(void * jarg1) {
  unsigned int jresult ;
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  bool result;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setBarycentricCoordinates(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setBarycentricCoordinates(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setBarycentricCoordinates(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_3(void * jarg1, float jarg2) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setBarycentricCoordinates(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSubSimplexClosestResult_setBarycentricCoordinates__SWIG_4(void * jarg1) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  (arg1)->setBarycentricCoordinates();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSubSimplexClosestResult() {
  void * jresult ;
  btSubSimplexClosestResult *result = 0 ;
  
  result = (btSubSimplexClosestResult *)new btSubSimplexClosestResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSubSimplexClosestResult(void * jarg1) {
  btSubSimplexClosestResult *arg1 = (btSubSimplexClosestResult *) 0 ;
  
  arg1 = (btSubSimplexClosestResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_numVertices_set(void * jarg1, int jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numVertices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_numVertices_get(void * jarg1) {
  int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (int) ((arg1)->m_numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexVectorW_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexVectorW;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexVectorW_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexVectorW);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexPointsP_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexPointsP;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexPointsP_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexPointsP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexPointsQ_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_simplexPointsQ;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_simplexPointsQ_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_simplexPointsQ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedP1_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_cachedP1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedP1_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result =  ((arg1)->m_cachedP1);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedP2_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_cachedP2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedP2_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result =  ((arg1)->m_cachedP2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedV_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_cachedV = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedV_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result =  ((arg1)->m_cachedV);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_lastW_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_lastW = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_lastW_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result =  ((arg1)->m_lastW);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_equalVertexThreshold_set(void * jarg1, float jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_equalVertexThreshold_get(void * jarg1) {
  float jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btScalar) ((arg1)->m_equalVertexThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedValidClosest_set(void * jarg1, unsigned int jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_cachedValidClosest = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedValidClosest_get(void * jarg1) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (bool) ((arg1)->m_cachedValidClosest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedBC_set(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btSubSimplexClosestResult *arg2 = (btSubSimplexClosestResult *) 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btSubSimplexClosestResult *)jarg2; 
  if (arg1) (arg1)->m_cachedBC = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_cachedBC_get(void * jarg1) {
  void * jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btSubSimplexClosestResult *result = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btSubSimplexClosestResult *)& ((arg1)->m_cachedBC);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_needsUpdate_set(void * jarg1, unsigned int jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_needsUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_m_needsUpdate_get(void * jarg1) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (bool) ((arg1)->m_needsUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_removeVertex(void * jarg1, int jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeVertex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_reduceVertices(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btUsageBitfield *arg2 = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btUsageBitfield *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btUsageBitfield const & type is null", 0);
    return ;
  } 
  (arg1)->reduceVertices((btUsageBitfield const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_updateClosestVectorAndPoints(void * jarg1) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (bool)(arg1)->updateClosestVectorAndPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_closestPtPointTetrahedron(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btSubSimplexClosestResult *arg7 = 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btSubSimplexClosestResult *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSubSimplexClosestResult & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->closestPtPointTetrahedron((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_pointOutsideOfPlane(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  int result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->pointOutsideOfPlane((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_closestPtPointTriangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btSubSimplexClosestResult *arg6 = 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btSubSimplexClosestResult *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSubSimplexClosestResult & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->closestPtPointTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVoronoiSimplexSolver() {
  void * jresult ;
  btVoronoiSimplexSolver *result = 0 ;
  
  result = (btVoronoiSimplexSolver *)new btVoronoiSimplexSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_reset(void * jarg1) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_addVertex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addVertex((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_setEqualVertexThreshold(void * jarg1, float jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setEqualVertexThreshold(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVoronoiSimplexSolver_getEqualVertexThreshold(void * jarg1) {
  float jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btScalar)((btVoronoiSimplexSolver const *)arg1)->getEqualVertexThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_closest(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->closest(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVoronoiSimplexSolver_maxVertex(void * jarg1) {
  float jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btScalar result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (btScalar)(arg1)->maxVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_fullSimplex(void * jarg1) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (bool)((btVoronoiSimplexSolver const *)arg1)->fullSimplex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_getSimplex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  result = (int)((btVoronoiSimplexSolver const *)arg1)->getSimplex(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_inSimplex(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->inSimplex((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_backup_closest(void * jarg1, void * jarg2) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->backup_closest(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_emptySimplex(void * jarg1) {
  unsigned int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  bool result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (bool)((btVoronoiSimplexSolver const *)arg1)->emptySimplex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVoronoiSimplexSolver_compute_points(void * jarg1, void * jarg2, void * jarg3) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->compute_points(*arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVoronoiSimplexSolver_numVertices(void * jarg1) {
  int jresult ;
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  int result;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  result = (int)((btVoronoiSimplexSolver const *)arg1)->numVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVoronoiSimplexSolver(void * jarg1) {
  btVoronoiSimplexSolver *arg1 = (btVoronoiSimplexSolver *) 0 ;
  
  arg1 = (btVoronoiSimplexSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayInt__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< int > *result = 0 ;
  
  result = (btAlignedObjectArray< int > *)new btAlignedObjectArray< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayInt(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayInt__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< int > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< int > *)new btAlignedObjectArray< int >((btAlignedObjectArray< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_at__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int *) &((btAlignedObjectArray< int > const *)arg1)->at(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_clear(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_pop_back(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(int const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expand__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int *) &(arg1)->expand((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_push_back(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_findBinarySearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->findBinarySearch((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_findLinearSearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->findLinearSearch((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_remove(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((int const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  btAlignedObjectArray< int > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< int > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArraybtFace__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< btFace > *result = 0 ;
  
  result = (btAlignedObjectArray< btFace > *)new btAlignedObjectArray< btFace >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArraybtFace(void * jarg1) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArraybtFace__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btFace > *arg1 = 0 ;
  btAlignedObjectArray< btFace > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btFace > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< btFace > *)new btAlignedObjectArray< btFace >((btAlignedObjectArray< btFace > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  result = (int)((btAlignedObjectArray< btFace > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  btFace *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btFace *) &((btAlignedObjectArray< btFace > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_clear(void * jarg1) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_pop_back(void * jarg1) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  btFace *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btFace *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(btFace const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  result = (btFace *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *arg2 = 0 ;
  btFace *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btFace *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return 0;
  } 
  result = (btFace *) &(arg1)->expand((btFace const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  result = (btFace *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btFace *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((btFace const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  result = (int)((btAlignedObjectArray< btFace > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btFace *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btFace > const *)arg1)->findBinarySearch((btFace const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btFace *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btFace > const *)arg1)->findLinearSearch((btFace const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btFace *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btFace *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btFace const & type is null", 0);
    return ;
  } 
  (arg1)->remove((btFace const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraybtFace_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btFace > *arg1 = (btAlignedObjectArray< btFace > *) 0 ;
  btAlignedObjectArray< btFace > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btFace > *)jarg1; 
  arg2 = (btAlignedObjectArray< btFace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btFace > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< btFace > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayVector3__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  result = (btAlignedObjectArray< btVector3 > *)new btAlignedObjectArray< btVector3 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayVector3(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayVector3__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< btVector3 > *)new btAlignedObjectArray< btVector3 >((btAlignedObjectArray< btVector3 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btAlignedObjectArray< btVector3 > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_clear(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_pop_back(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (btVector3 *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btVector3 *) &(arg1)->expand((btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (btVector3 *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->findBinarySearch((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->findLinearSearch((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->remove((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< btVector3 > const &)*arg2);
}


SWIGEXPORT btCapsuleShape * SWIGSTDCALL CSharp_btCapsuleShapeX_SWIGUpcast(btCapsuleShapeX *jarg1) {
    return (btCapsuleShape *)jarg1;
}

SWIGEXPORT btCapsuleShape * SWIGSTDCALL CSharp_btCapsuleShapeZ_SWIGUpcast(btCapsuleShapeZ *jarg1) {
    return (btCapsuleShape *)jarg1;
}

SWIGEXPORT btCylinderShape * SWIGSTDCALL CSharp_btCylinderShapeX_SWIGUpcast(btCylinderShapeX *jarg1) {
    return (btCylinderShape *)jarg1;
}

SWIGEXPORT btCylinderShape * SWIGSTDCALL CSharp_btCylinderShapeZ_SWIGUpcast(btCylinderShapeZ *jarg1) {
    return (btCylinderShape *)jarg1;
}

SWIGEXPORT btConeShape * SWIGSTDCALL CSharp_btConeShapeX_SWIGUpcast(btConeShapeX *jarg1) {
    return (btConeShape *)jarg1;
}

SWIGEXPORT btConeShape * SWIGSTDCALL CSharp_btConeShapeZ_SWIGUpcast(btConeShapeZ *jarg1) {
    return (btConeShape *)jarg1;
}

SWIGEXPORT btPolyhedralConvexShape * SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_SWIGUpcast(btPolyhedralConvexAabbCachingShape *jarg1) {
    return (btPolyhedralConvexShape *)jarg1;
}

#ifdef __cplusplus
}
#endif

