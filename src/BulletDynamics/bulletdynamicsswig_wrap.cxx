/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_BulletDynamics(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_BulletDynamics(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_BulletDynamics(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


    #include "Dynamics/btDiscreteDynamicsWorld.h"

	#include "Dynamics/btSimpleDynamicsWorld.h"
	#include "Dynamics/btRigidBody.h"

	#include "ConstraintSolver/btPoint2PointConstraint.h"
	#include "ConstraintSolver/btHingeConstraint.h"
	#include "ConstraintSolver/btConeTwistConstraint.h"
	#include "ConstraintSolver/btGeneric6DofConstraint.h"
	#include "ConstraintSolver/btSliderConstraint.h"
	#include "ConstraintSolver/btGeneric6DofSpringConstraint.h"
	#include "ConstraintSolver/btUniversalConstraint.h"
	#include "ConstraintSolver/btHinge2Constraint.h"
	#include "ConstraintSolver/btGearConstraint.h"

	#include "ConstraintSolver/btSequentialImpulseConstraintSolver.h"


	///Vehicle simulation, with wheel contact simulated by raycasts
	#include "Vehicle/btRaycastVehicle.h"



typedef btTypedConstraint::btConstraintInfo1 btConstraintInfo1;
typedef btTypedConstraint::btConstraintInfo2 btConstraintInfo2;
typedef btVehicleRaycaster::btVehicleRaycasterResult btVehicleRaycasterResult;
typedef btWheelInfo::RaycastInfo RaycastInfo;
typedef btRigidBody::btRigidBodyConstructionInfo btRigidBodyConstructionInfo;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo1_m_numConstraintRows_set(void * jarg1, int jarg2) {
  btConstraintInfo1 *arg1 = (btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  arg1 = (btConstraintInfo1 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numConstraintRows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConstraintInfo1_m_numConstraintRows_get(void * jarg1) {
  int jresult ;
  btConstraintInfo1 *arg1 = (btConstraintInfo1 *) 0 ;
  int result;
  
  arg1 = (btConstraintInfo1 *)jarg1; 
  result = (int) ((arg1)->m_numConstraintRows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo1_nub_set(void * jarg1, int jarg2) {
  btConstraintInfo1 *arg1 = (btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  arg1 = (btConstraintInfo1 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nub = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConstraintInfo1_nub_get(void * jarg1) {
  int jresult ;
  btConstraintInfo1 *arg1 = (btConstraintInfo1 *) 0 ;
  int result;
  
  arg1 = (btConstraintInfo1 *)jarg1; 
  result = (int) ((arg1)->nub);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConstraintInfo1() {
  void * jresult ;
  btConstraintInfo1 *result = 0 ;
  
  result = (btConstraintInfo1 *)new btConstraintInfo1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintInfo1(void * jarg1) {
  btConstraintInfo1 *arg1 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btConstraintInfo1 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_fps_set(void * jarg1, float jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintInfo2_fps_get(void * jarg1) {
  float jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_erp_set(void * jarg1, float jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintInfo2_erp_get(void * jarg1) {
  float jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_J1linearAxis_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J1linearAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_J1linearAxis_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J1linearAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_J1angularAxis_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J1angularAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_J1angularAxis_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J1angularAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_J2linearAxis_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J2linearAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_J2linearAxis_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J2linearAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_J2angularAxis_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J2angularAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_J2angularAxis_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J2angularAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_rowskip_set(void * jarg1, int jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int arg2 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rowskip = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConstraintInfo2_rowskip_get(void * jarg1) {
  int jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int result;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (int) ((arg1)->rowskip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_constraintError_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_constraintError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_constraintError_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_constraintError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_cfm_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->cfm = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_cfm_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->cfm);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_lowerLimit_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_lowerLimit_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_lowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_upperLimit_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_m_upperLimit_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_upperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_findex_set(void * jarg1, void * jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->findex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintInfo2_findex_get(void * jarg1) {
  void * jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int *result = 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (int *) ((arg1)->findex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_numIterations_set(void * jarg1, int jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int arg2 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConstraintInfo2_m_numIterations_get(void * jarg1) {
  int jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  int result;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintInfo2_m_damping_set(void * jarg1, float jarg2) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintInfo2_m_damping_get(void * jarg1) {
  float jresult ;
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConstraintInfo2() {
  void * jresult ;
  btConstraintInfo2 *result = 0 ;
  
  result = (btConstraintInfo2 *)new btConstraintInfo2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintInfo2(void * jarg1) {
  btConstraintInfo2 *arg1 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btConstraintInfo2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVehicleRaycasterResult() {
  void * jresult ;
  btVehicleRaycasterResult *result = 0 ;
  
  result = (btVehicleRaycasterResult *)new btVehicleRaycasterResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_hitPointInWorld_set(void * jarg1, void * jarg2) {
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_hitPointInWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_hitPointInWorld_get(void * jarg1) {
  void * jresult ;
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btVector3 result;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  result =  ((arg1)->m_hitPointInWorld);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_hitNormalInWorld_set(void * jarg1, void * jarg2) {
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_hitNormalInWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_hitNormalInWorld_get(void * jarg1) {
  void * jresult ;
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btVector3 result;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  result =  ((arg1)->m_hitNormalInWorld);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_distFraction_set(void * jarg1, float jarg2) {
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_distFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVehicleRaycasterResult_m_distFraction_get(void * jarg1) {
  float jresult ;
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  btScalar result;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  result = (btScalar) ((arg1)->m_distFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVehicleRaycasterResult(void * jarg1) {
  btVehicleRaycasterResult *arg1 = (btVehicleRaycasterResult *) 0 ;
  
  arg1 = (btVehicleRaycasterResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_contactNormalWS_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_contactNormalWS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_contactNormalWS_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result =  ((arg1)->m_contactNormalWS);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_contactPointWS_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_contactPointWS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_contactPointWS_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result =  ((arg1)->m_contactPointWS);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_suspensionLength_set(void * jarg1, float jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RaycastInfo_m_suspensionLength_get(void * jarg1) {
  float jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btScalar result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_hardPointWS_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_hardPointWS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_hardPointWS_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result =  ((arg1)->m_hardPointWS);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_wheelDirectionWS_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_wheelDirectionWS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_wheelDirectionWS_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result =  ((arg1)->m_wheelDirectionWS);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_wheelAxleWS_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_wheelAxleWS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_wheelAxleWS_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  btVector3 result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result =  ((arg1)->m_wheelAxleWS);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_isInContact_set(void * jarg1, unsigned int jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isInContact = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaycastInfo_m_isInContact_get(void * jarg1) {
  unsigned int jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  bool result;
  
  arg1 = (RaycastInfo *)jarg1; 
  result = (bool) ((arg1)->m_isInContact);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaycastInfo_m_groundObject_set(void * jarg1, void * jarg2) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_groundObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaycastInfo_m_groundObject_get(void * jarg1) {
  void * jresult ;
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  result = (void *) ((arg1)->m_groundObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaycastInfo() {
  void * jresult ;
  RaycastInfo *result = 0 ;
  
  result = (RaycastInfo *)new RaycastInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RaycastInfo(void * jarg1) {
  RaycastInfo *arg1 = (RaycastInfo *) 0 ;
  
  arg1 = (RaycastInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_mass_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_mass_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_motionState_set(void * jarg1, void * jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  if (arg1) (arg1)->m_motionState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_motionState_get(void * jarg1) {
  void * jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btMotionState *) ((arg1)->m_motionState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_startWorldTransform_set(void * jarg1, void * jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btTransform arg2 ;
  btTransform *argp2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  argp2 = (btTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_startWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_startWorldTransform_get(void * jarg1) {
  void * jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btTransform result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result =  ((arg1)->m_startWorldTransform);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_collisionShape_set(void * jarg1, void * jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_localInertia_set(void * jarg1, void * jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_localInertia = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_localInertia_get(void * jarg1) {
  void * jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btVector3 result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result =  ((arg1)->m_localInertia);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_linearDamping_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_linearDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_angularDamping_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_angularDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_friction_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_friction_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_restitution_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_restitution_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_linearSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_linearSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_angularSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_angularSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalDamping_set(void * jarg1, unsigned int jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalDamping_get(void * jarg1) {
  unsigned int jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  bool result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (bool) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyConstructionInfo__SWIG_0(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btRigidBodyConstructionInfo *)new btRigidBodyConstructionInfo(arg1,arg2,arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyConstructionInfo__SWIG_1(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  result = (btRigidBodyConstructionInfo *)new btRigidBodyConstructionInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBodyConstructionInfo(void * jarg1) {
  btRigidBodyConstructionInfo *arg1 = (btRigidBodyConstructionInfo *) 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDiscreteDynamicsWorld(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btDiscreteDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  result = (btDiscreteDynamicsWorld *)new btDiscreteDynamicsWorld(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDiscreteDynamicsWorld(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_synchronizeMotionStates(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->synchronizeMotionStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_synchronizeSingleMotionState(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->synchronizeSingleMotionState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addConstraint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addConstraint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addConstraint__SWIG_1(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->addConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeConstraint(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->removeConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addAction(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeAction(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btSimulationIslandManager *)(arg1)->getSimulationIslandManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getCollisionWorld(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btCollisionWorld *)(arg1)->getCollisionWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setGravity(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getGravity(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = ((btDiscreteDynamicsWorld const *)arg1)->getGravity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addCollisionObject(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->addCollisionObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->addCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addRigidBody__SWIG_0(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->addRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addRigidBody__SWIG_1(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addRigidBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeRigidBody(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->removeRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_debugDrawConstraint(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->debugDrawConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_debugDrawWorld(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setConstraintSolver(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  (arg1)->setConstraintSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getConstraintSolver(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getNumConstraints(void * jarg1) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (int)((btDiscreteDynamicsWorld const *)arg1)->getNumConstraints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getConstraint__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getWorldType(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = ((btDiscreteDynamicsWorld const *)arg1)->getWorldType();
  jresult = new btDynamicsWorldType((const btDynamicsWorldType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_clearForces(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_applyGravity(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->applyGravity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setNumTasks(void * jarg1, int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumTasks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_updateVehicles(void * jarg1, float jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateVehicles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addVehicle(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeVehicle(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCharacter(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeCharacter(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(void * jarg1, unsigned int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSynchronizeAllMotionStates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(void * jarg1) {
  unsigned int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getSynchronizeAllMotionStates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(void * jarg1, unsigned int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setApplySpeculativeContactRestitution(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(void * jarg1) {
  unsigned int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getApplySpeculativeContactRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_serialize(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  (arg1)->serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleDynamicsWorld(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSimpleDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  result = (btSimpleDynamicsWorld *)new btSimpleDynamicsWorld(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleDynamicsWorld(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_setGravity(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getGravity(void * jarg1) {
  void * jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = ((btSimpleDynamicsWorld const *)arg1)->getGravity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addRigidBody__SWIG_0(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->addRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addRigidBody__SWIG_1(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addRigidBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeRigidBody(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->removeRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_debugDrawWorld(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addAction(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeAction(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_updateAabbs(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->updateAabbs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_synchronizeMotionStates(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->synchronizeMotionStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_setConstraintSolver(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  (arg1)->setConstraintSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getConstraintSolver(void * jarg1) {
  void * jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getWorldType(void * jarg1) {
  void * jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = ((btSimpleDynamicsWorld const *)arg1)->getWorldType();
  jresult = new btDynamicsWorldType((const btDynamicsWorldType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_clearForces(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDeactivationTime_set(float jarg1) {
  btScalar arg1 ;
  
  arg1 = (btScalar)jarg1; 
  gDeactivationTime = arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_gDeactivationTime_get() {
  float jresult ;
  btScalar result;
  
  result = (btScalar)gDeactivationTime;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDisableDeactivation_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  gDisableDeactivation = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gDisableDeactivation_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)gDisableDeactivation;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBodyDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btRigidBodyFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBodyConstructionInfo *arg1 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btRigidBodyConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBodyConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btRigidBody *)new btRigidBody((btRigidBodyConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_1(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_2(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBody(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_proceedToTransform(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->proceedToTransform((btTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_upcast__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btRigidBody *)btRigidBody::upcast((btCollisionObject const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_predictIntegratedTransform(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  (arg1)->predictIntegratedTransform(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_saveKinematicState(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->saveKinematicState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyGravity(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->applyGravity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setGravity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getGravity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getGravity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setDamping(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setDamping(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getLinearDamping(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getAngularDamping(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getLinearSleepingThreshold(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getLinearSleepingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getAngularSleepingThreshold(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getAngularSleepingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyDamping(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->applyDamping(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCollisionShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btCollisionShape *)((btRigidBody const *)arg1)->getCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_GetCollisionObject(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btCollisionObject *)(arg1)->GetCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setMassProps(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMassProps(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getLinearFactor(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setLinearFactor(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearFactor((btVector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getInvMass(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getInvMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getInvInertiaTensorWorld(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btMatrix3x3 *) &((btRigidBody const *)arg1)->getInvInertiaTensorWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_integrateVelocities(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->integrateVelocities(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setCenterOfMassTransform(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setCenterOfMassTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyCentralForce(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyCentralForce((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getTotalForce(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getTotalTorque(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalTorque();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getInvInertiaDiagLocal(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getInvInertiaDiagLocal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setInvInertiaDiagLocal(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInvInertiaDiagLocal((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setSleepingThresholds(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setSleepingThresholds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyTorque(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyTorque((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyForce(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyForce((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyCentralImpulse(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyCentralImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyTorqueImpulse(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyTorqueImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyImpulse(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_clearForces(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_updateInertiaTensor(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->updateInertiaTensor();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCenterOfMassPosition(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getCenterOfMassPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getOrientation(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btQuaternion result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = ((btRigidBody const *)arg1)->getOrientation();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCenterOfMassTransform(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btTransform *) &((btRigidBody const *)arg1)->getCenterOfMassTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getLinearVelocity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getAngularVelocity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setLinearVelocity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularVelocity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getVelocityInLocalPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btRigidBody const *)arg1)->getVelocityInLocalPoint((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_translate(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_getAabb(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btRigidBody const *)arg1)->getAabb(*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_computeImpulseDenominator(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btRigidBody const *)arg1)->computeImpulseDenominator((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_computeAngularImpulseDenominator(void * jarg1, void * jarg2) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btRigidBody const *)arg1)->computeAngularImpulseDenominator((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_updateDeactivation(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateDeactivation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_wantsSleeping(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (bool)(arg1)->wantsSleeping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getBroadphaseProxy__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btBroadphaseProxy *)((btRigidBody const *)arg1)->getBroadphaseProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setNewBroadphaseProxy(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  (arg1)->setNewBroadphaseProxy(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getMotionState__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btMotionState *)(arg1)->getMotionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setMotionState(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  (arg1)->setMotionState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_m_contactSolverType_set(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_contactSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_m_contactSolverType_get(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_contactSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_m_frictionSolverType_set(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_frictionSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_m_frictionSolverType_get(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_frictionSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularFactor__SWIG_0(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularFactor((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularFactor__SWIG_1(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setAngularFactor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getAngularFactor(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_isInWorld(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (bool)((btRigidBody const *)arg1)->isInWorld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_checkCollideWithOverride(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (bool)((btRigidBody const *)arg1)->checkCollideWithOverride((btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_addConstraintRef(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->addConstraintRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_removeConstraintRef(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->removeConstraintRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getConstraintRef(void * jarg1, int jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)(arg1)->getConstraintRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_getNumConstraintRefs(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->getNumConstraintRefs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setFlags(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_getFlags(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->getFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_computeGyroscopicForce(void * jarg1, float jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = ((btRigidBody const *)arg1)->computeGyroscopicForce(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBody_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btRigidBody const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_serializeSingleObject(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btRigidBody const *)arg1)->serializeSingleObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_collisionObjectData_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData arg2 ;
  btCollisionObjectFloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btCollisionObjectFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btCollisionObjectFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_collisionObjectData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_collisionObjectData_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_collisionObjectData);
  jresult = new btCollisionObjectFloatData((const btCollisionObjectFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaTensorWorld_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaTensorWorld_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_invInertiaTensorWorld);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_linearVelocity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_angularVelocity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularFactor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_angularFactor);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearFactor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_linearFactor);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gravity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_gravity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_acceleration_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gravity_acceleration = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_acceleration_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_gravity_acceleration);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaLocal_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaLocal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaLocal_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_invInertiaLocal);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalForce_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_totalForce = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalForce_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_totalForce);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalTorque_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_totalTorque = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalTorque_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result =  ((arg1)->m_totalTorque);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_inverseMass_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_inverseMass_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearDamping_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularDamping_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDamping_set(void * jarg1, int jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDamping_get(void * jarg1) {
  int jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyFloatData() {
  void * jresult ;
  btRigidBodyFloatData *result = 0 ;
  
  result = (btRigidBodyFloatData *)new btRigidBodyFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBodyFloatData(void * jarg1) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_collisionObjectData_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData arg2 ;
  btCollisionObjectDoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btCollisionObjectDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btCollisionObjectDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_collisionObjectData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_collisionObjectData_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_collisionObjectData);
  jresult = new btCollisionObjectDoubleData((const btCollisionObjectDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaTensorWorld_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData arg2 ;
  btMatrix3x3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btMatrix3x3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaTensorWorld_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_invInertiaTensorWorld);
  jresult = new btMatrix3x3DoubleData((const btMatrix3x3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_linearVelocity);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_angularVelocity);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularFactor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_angularFactor);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearFactor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_linearFactor);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gravity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_gravity);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_acceleration_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gravity_acceleration = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_acceleration_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_gravity_acceleration);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaLocal_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invInertiaLocal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaLocal_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_invInertiaLocal);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalForce_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_totalForce = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalForce_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_totalForce);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalTorque_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_totalTorque = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalTorque_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result =  ((arg1)->m_totalTorque);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_inverseMass_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_inverseMass_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearDamping_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearDamping_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularDamping_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularDamping_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDampingFactor_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDampingFactor_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearSleepingThreshold_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearSleepingThreshold_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularSleepingThreshold_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularSleepingThreshold_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDamping_set(void * jarg1, int jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDamping_get(void * jarg1) {
  int jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_padding_set(void * jarg1, char * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_padding_get(void * jarg1) {
  char * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyDoubleData() {
  void * jresult ;
  btRigidBodyDoubleData *result = 0 ;
  
  result = (btRigidBodyDoubleData *)new btRigidBodyDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBodyDoubleData(void * jarg1) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btPoint2PointConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btPoint2PointConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConstraintSetting() {
  void * jresult ;
  btConstraintSetting *result = 0 ;
  
  result = (btConstraintSetting *)new btConstraintSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_tau_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_tau_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_damping_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_damping_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_impulseClamp_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_impulseClamp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_impulseClamp_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_impulseClamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintSetting(void * jarg1) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_m_useSolveConstraintObsolete_set(void * jarg1, unsigned int jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPoint2PointConstraint_m_useSolveConstraintObsolete_get(void * jarg1) {
  unsigned int jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_m_setting_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *arg2 = (btConstraintSetting *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintSetting *)jarg2; 
  if (arg1) (arg1)->m_setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_m_setting_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btConstraintSetting *)& ((arg1)->m_setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_buildJacobian(void * jarg1) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo1(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo2(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_updateRHS(void * jarg1, float jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setPivotA(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPivotA((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setPivotB(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPivotB((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_getPivotInA(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_getPivotInB(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPoint2PointConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPoint2PointConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoint2PointConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (int)((btPoint2PointConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btPoint2PointConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btPoint2PointConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraint(void * jarg1) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInA_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pivotInA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInA_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_pivotInA);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInB_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pivotInB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInB_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_pivotInB);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraintFloatData() {
  void * jresult ;
  btPoint2PointConstraintFloatData *result = 0 ;
  
  result = (btPoint2PointConstraintFloatData *)new btPoint2PointConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraintFloatData(void * jarg1) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInA_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pivotInA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInA_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_pivotInA);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInB_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData arg2 ;
  btVector3DoubleData *argp2 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  argp2 = (btVector3DoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3DoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pivotInB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInB_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData result;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_pivotInB);
  jresult = new btVector3DoubleData((const btVector3DoubleData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraintDoubleData() {
  void * jresult ;
  btPoint2PointConstraintDoubleData *result = 0 ;
  
  result = (btPoint2PointConstraintDoubleData *)new btPoint2PointConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraintDoubleData(void * jarg1) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp__BT_USE_CENTER_LIMIT__get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHingeConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btHingeConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool arg7 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = jarg7 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool arg4 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_buildJacobian(void * jarg1) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo1(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2Internal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2Internal(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2InternalUsingFrameOffset(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2InternalUsingFrameOffset(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_updateRHS(void * jarg1, float jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getRigidBodyA__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getRigidBodyB__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getFrameOffsetA(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getFrameOffsetB(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setAngularOnly(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAngularOnly(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_enableAngularMotor(void * jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->enableAngularMotor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_enableMotor(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMaxMotorImpulse(void * jarg1, float jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMotorTarget__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->setMotorTarget((btQuaternion const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMotorTarget__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setMotorTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_3(void * jarg1, float jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setAxis(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->setAxis(*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getLowerLimit(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getLowerLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getUpperLimit(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getUpperLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getHingeAngle__SWIG_0(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getHingeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getHingeAngle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->getHingeAngle((btTransform const &)*arg2,(btTransform const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_testLimit(void * jarg1, void * jarg2, void * jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->testLimit((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getAFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getAFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getBFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getBFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraint_getSolveLimit(void * jarg1) {
  int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (int)(arg1)->getSolveLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getLimitSign(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLimitSign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getAngularOnly(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getAngularOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getEnableAngularMotor(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getEnableAngularMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getMotorTargetVelosity(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMotorTargetVelosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getMaxMotorImpulse(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxMotorImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (int)((btHingeConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHingeConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btHingeConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraint(void * jarg1) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbAFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_rbAFrame);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData arg2 ;
  btTransformDoubleData *argp2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  argp2 = (btTransformDoubleData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformDoubleData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbBFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result =  ((arg1)->m_rbBFrame);
  jresult = new btTransformDoubleData((const btTransformDoubleData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_useReferenceFrameA_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_useReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_angularOnly_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_angularOnly_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_enableAngularMotor_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_enableAngularMotor_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_motorTargetVelocity_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_motorTargetVelocity_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_maxMotorImpulse_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_maxMotorImpulse_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_lowerLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_upperLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_biasFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraintDoubleData() {
  void * jresult ;
  btHingeConstraintDoubleData *result = 0 ;
  
  result = (btHingeConstraintDoubleData *)new btHingeConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraintDoubleData(void * jarg1) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbAFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_rbAFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbBFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result =  ((arg1)->m_rbBFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_useReferenceFrameA_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_useReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_angularOnly_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_angularOnly_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_enableAngularMotor_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_enableAngularMotor_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_motorTargetVelocity_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_motorTargetVelocity_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_maxMotorImpulse_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_maxMotorImpulse_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_lowerLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_upperLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_biasFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraintFloatData() {
  void * jresult ;
  btHingeConstraintFloatData *result = 0 ;
  
  result = (btHingeConstraintFloatData *)new btHingeConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraintFloatData(void * jarg1) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_buildJacobian(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo1(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo2(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  btMatrix3x3 *arg6 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btMatrix3x3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  arg6 = (btMatrix3x3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btMatrix3x3 const &)*arg5,(btMatrix3x3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_solveConstraintObsolete(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btSolverBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg3 = (btSolverBody *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_updateRHS(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getRigidBodyA(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getRigidBodyB(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setAngularOnly(void * jarg1, unsigned int jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAngularOnly(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getAFrame(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getAFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getBFrame(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getBFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_getSolveTwistLimit(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)(arg1)->getSolveTwistLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_getSolveSwingLimit(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)(arg1)->getSolveSwingLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistLimitSign(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistLimitSign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_calcAngleInfo(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  (arg1)->calcAngleInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_calcAngleInfo2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btMatrix3x3 *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btMatrix3x3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  arg5 = (btMatrix3x3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->calcAngleInfo2((btTransform const &)*arg2,(btTransform const &)*arg3,(btMatrix3x3 const &)*arg4,(btMatrix3x3 const &)*arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getSwingSpan1(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSwingSpan1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getSwingSpan2(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSwingSpan2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistSpan(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistSpan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistAngle(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConeTwistConstraint_isPastSwingLimit(void * jarg1) {
  unsigned int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (bool)(arg1)->isPastSwingLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setDamping(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDamping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_enableMotor(void * jarg1, unsigned int jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMaxMotorImpulse(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMaxMotorImpulseNormalized(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulseNormalized(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getFixThresh(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getFixThresh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setFixThresh(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setFixThresh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMotorTarget(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setMotorTarget((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMotorTargetInConstraintSpace(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setMotorTargetInConstraintSpace((btQuaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_GetPointForAngle(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btVector3 result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = ((btConeTwistConstraint const *)arg1)->GetPointForAngle(arg2,arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getFrameOffsetA(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getFrameOffsetB(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)((btConeTwistConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeTwistConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConeTwistConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeTwistConstraint(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbAFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result =  ((arg1)->m_rbAFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbBFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result =  ((arg1)->m_rbBFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan1_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan1_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_swingSpan1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan2_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan2_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_swingSpan2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_twistSpan_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_twistSpan = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_twistSpan_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_twistSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_biasFactor_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_damping_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_damping_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_pad_set(void * jarg1, char * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_pad_get(void * jarg1) {
  char * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraintData() {
  void * jresult ;
  btConeTwistConstraintData *result = 0 ;
  
  result = (btConeTwistConstraintData *)new btConeTwistConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeTwistConstraintData(void * jarg1) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_loLimit_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_loLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_loLimit_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_loLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_hiLimit_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hiLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_hiLimit_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_hiLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_targetVelocity_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_targetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_targetVelocity_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_targetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxMotorForce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxMotorForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxMotorForce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_maxMotorForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxLimitForce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxLimitForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxLimitForce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_maxLimitForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_damping_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_damping_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_limitSoftness_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_normalCFM_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_normalCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_normalCFM_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_normalCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopERP_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_stopERP = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopERP_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_stopERP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopCFM_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_stopCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopCFM_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_stopCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_bounce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_bounce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_bounce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_bounce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_enableMotor_set(void * jarg1, unsigned int jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableMotor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_m_enableMotor_get(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool) ((arg1)->m_enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimitError_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_currentLimitError = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimitError_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_currentLimitError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentPosition_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_currentPosition = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentPosition_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_currentPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimit_set(void * jarg1, int jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_currentLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimit_get(void * jarg1) {
  int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (int) ((arg1)->m_currentLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_accumulatedImpulse_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_accumulatedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_accumulatedImpulse_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_accumulatedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRotationalLimitMotor__SWIG_0() {
  void * jresult ;
  btRotationalLimitMotor *result = 0 ;
  
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRotationalLimitMotor__SWIG_1(void * jarg1) {
  void * jresult ;
  btRotationalLimitMotor *arg1 = 0 ;
  btRotationalLimitMotor *result = 0 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRotationalLimitMotor const & type is null", 0);
    return 0;
  } 
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor((btRotationalLimitMotor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_isLimited(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool)(arg1)->isLimited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_needApplyTorques(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool)(arg1)->needApplyTorques();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRotationalLimitMotor_testLimitValue(void * jarg1, float jarg2) {
  int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->testLimitValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_solveAngularLimits(void * jarg1, float jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btRigidBody *arg5 = (btRigidBody *) 0 ;
  btRigidBody *arg6 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (btRigidBody *)jarg5; 
  arg6 = (btRigidBody *)jarg6; 
  result = (btScalar)(arg1)->solveAngularLimits(arg2,*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRotationalLimitMotor(void * jarg1) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_lowerLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_lowerLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_lowerLimit);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_upperLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_upperLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_upperLimit);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_accumulatedImpulse_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_accumulatedImpulse = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_accumulatedImpulse_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_accumulatedImpulse);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_limitSoftness_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_damping_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_damping_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_restitution_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_restitution_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_normalCFM_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normalCFM = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_normalCFM_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_normalCFM);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopERP_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_stopERP = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopERP_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_stopERP);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopCFM_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_stopCFM = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopCFM_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_stopCFM);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_enableMotor_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->m_enableMotor;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_enableMotor_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (bool *)(bool *) ((arg1)->m_enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_targetVelocity_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_targetVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_targetVelocity_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_targetVelocity);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_maxMotorForce_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_maxMotorForce = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_maxMotorForce_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_maxMotorForce);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimitError_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_currentLimitError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimitError_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_currentLimitError);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLinearDiff_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_currentLinearDiff = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLinearDiff_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result =  ((arg1)->m_currentLinearDiff);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_currentLimit;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (int *)(int *) ((arg1)->m_currentLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTranslationalLimitMotor__SWIG_0() {
  void * jresult ;
  btTranslationalLimitMotor *result = 0 ;
  
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTranslationalLimitMotor__SWIG_1(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTranslationalLimitMotor const & type is null", 0);
    return 0;
  } 
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor((btTranslationalLimitMotor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTranslationalLimitMotor_isLimited(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isLimited(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTranslationalLimitMotor_needApplyForce(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->needApplyForce(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTranslationalLimitMotor_testLimitValue(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (int)(arg1)->testLimitValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_solveLinearAxis(void * jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btRigidBody *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btRigidBody *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  int arg8 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btRigidBody *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btRigidBody *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->solveLinearAxis(arg2,arg3,*arg4,(btVector3 const &)*arg5,*arg6,(btVector3 const &)*arg7,arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTranslationalLimitMotor(void * jarg1) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_6DOF_FLAGS_AXIS_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set(void * jarg1, unsigned int jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get(void * jarg1) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateTransforms__SWIG_1(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->calculateTransforms();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getCalculatedTransformA(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getCalculatedTransformB(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_buildJacobian(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo1(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_updateRHS(void * jarg1, float jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAxis(void * jarg1, int jarg2) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btGeneric6DofConstraint const *)arg1)->getAxis(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngle(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getAngle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getRelativePivotPosition(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getRelativePivotPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_testAngularLimitMotor(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->testAngularLimitMotor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLinearLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearLowerLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getLinearLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getLinearLowerLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLinearUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearUpperLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getLinearUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getLinearUpperLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAngularLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularLowerLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngularLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getAngularLowerLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAngularUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularUpperLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngularUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getAngularUpperLimit(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getRotationalLimitMotor(void * jarg1, int jarg2) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btRotationalLimitMotor *)(arg1)->getRotationalLimitMotor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getTranslationalLimitMotor(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTranslationalLimitMotor *)(arg1)->getTranslationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLimit(void * jarg1, int jarg2, float jarg3, float jarg4) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_isLimited(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isLimited(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calcAnchorPos(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->calcAnchorPos();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10, void * jarg11, int jarg12, int jarg13) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btConstraintInfo2 *arg9 = (btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int arg13 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btRotationalLimitMotor *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg9 = (btConstraintInfo2 *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (btVector3 *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10, void * jarg11, int jarg12) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btConstraintInfo2 *arg9 = (btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btRotationalLimitMotor *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg9 = (btConstraintInfo2 *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (btVector3 *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg12 = (int)jarg12; 
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (int)((btGeneric6DofConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btGeneric6DofConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofConstraint(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbAFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_rbAFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbBFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_rbBFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_linearUpperLimit);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_linearLowerLimit);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_angularUpperLimit);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result =  ((arg1)->m_angularLowerLimit);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraintData() {
  void * jresult ;
  btGeneric6DofConstraintData *result = 0 ;
  
  result = (btGeneric6DofConstraintData *)new btGeneric6DofConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofConstraintData(void * jarg1) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btSliderConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btSliderConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo1(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo2(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7, float jarg8) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btScalar arg8 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getRigidBodyA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getRigidBodyB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getCalculatedTransformA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getCalculatedTransformB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getFrameOffsetA__SWIG_0(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getFrameOffsetB__SWIG_0(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLowerLinLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLowerLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setLowerLinLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerLinLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getUpperLinLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getUpperLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUpperLinLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperLinLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLowerAngLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLowerAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setLowerAngLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerAngLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getUpperAngLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getUpperAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUpperAngLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperAngLimit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getUseLinearReferenceFrameA(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getUseLinearReferenceFrameA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setPoweredLinMotor(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPoweredLinMotor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getPoweredLinMotor(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getPoweredLinMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setTargetLinMotorVelocity(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTargetLinMotorVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getTargetLinMotorVelocity(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTargetLinMotorVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setMaxLinMotorForce(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxLinMotorForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getMaxLinMotorForce(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxLinMotorForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setPoweredAngMotor(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPoweredAngMotor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getPoweredAngMotor(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getPoweredAngMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setTargetAngMotorVelocity(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTargetAngMotorVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getTargetAngMotorVelocity(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTargetAngMotorVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setMaxAngMotorForce(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxAngMotorForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getMaxAngMotorForce(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxAngMotorForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLinearPos(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getLinearPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getAngularPos(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getAngularPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getSolveLinLimit(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getSolveLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLinDepth(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLinDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getSolveAngLimit(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getSolveAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getAngDepth(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_calculateTransforms(void * jarg1, void * jarg2, void * jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_testLinLimits(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  (arg1)->testLinLimits();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_testAngLimits(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  (arg1)->testAngLimits();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getAncorInA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (arg1)->getAncorInA();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getAncorInB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (arg1)->getAncorInB();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (int)((btSliderConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSliderConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btSliderConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSliderConstraint(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData arg2 ;
  btTypedConstraintData *argp2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  argp2 = (btTypedConstraintData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTypedConstraintData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_typeConstraintData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result =  ((arg1)->m_typeConstraintData);
  jresult = new btTypedConstraintData((const btTypedConstraintData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbAFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result =  ((arg1)->m_rbAFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rbBFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result =  ((arg1)->m_rbBFrame);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_linearUpperLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_linearUpperLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_linearUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_linearLowerLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_linearLowerLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_linearLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_angularUpperLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_angularUpperLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_angularUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_angularLowerLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_angularLowerLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_angularLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintData_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintData_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraintData() {
  void * jresult ;
  btSliderConstraintData *result = 0 ;
  
  result = (btSliderConstraintData *)new btSliderConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSliderConstraintData(void * jarg1) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_enableSpring(void * jarg1, int jarg2, unsigned int jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->enableSpring(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setStiffness(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setStiffness(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setDamping(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setDamping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0(void * jarg1) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  (arg1)->setEquilibriumPoint();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1(void * jarg1, int jarg2) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEquilibriumPoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setEquilibriumPoint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  result = (int)((btGeneric6DofSpringConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btGeneric6DofSpringConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofSpringConstraint(void * jarg1) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_6dofData_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *arg2 = (btGeneric6DofConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (btGeneric6DofConstraintData *)jarg2; 
  if (arg1) (arg1)->m_6dofData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_6dofData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (btGeneric6DofConstraintData *)& ((arg1)->m_6dofData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springEnabled_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springEnabled_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (int *)(int *) ((arg1)->m_springEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_equilibriumPoint_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_equilibriumPoint_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_equilibriumPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springStiffness_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springStiffness_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_springStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springDamping_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springDamping_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_springDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraintData() {
  void * jresult ;
  btGeneric6DofSpringConstraintData *result = 0 ;
  
  result = (btGeneric6DofSpringConstraintData *)new btGeneric6DofSpringConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofSpringConstraintData(void * jarg1) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btUniversalConstraint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btUniversalConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btUniversalConstraint *)new btUniversalConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAnchor(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAnchor2(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAxis1(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAxis2(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniversalConstraint_getAngle1(void * jarg1) {
  float jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniversalConstraint_getAngle2(void * jarg1) {
  float jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setUpperLimit(void * jarg1, float jarg2, float jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setUpperLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setLowerLimit(void * jarg1, float jarg2, float jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLowerLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btUniversalConstraint(void * jarg1) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHinge2Constraint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btHinge2Constraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = (btHinge2Constraint *)new btHinge2Constraint(*arg1,*arg2,*arg3,*arg4,*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAnchor(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAnchor2(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAxis1(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAxis2(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHinge2Constraint_getAngle1(void * jarg1) {
  float jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHinge2Constraint_getAngle2(void * jarg1) {
  float jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHinge2Constraint_setUpperLimit(void * jarg1, float jarg2) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHinge2Constraint_setLowerLimit(void * jarg1, float jarg2) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHinge2Constraint(void * jarg1) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btGearConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btGearConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGearConstraint(void * jarg1) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_getInfo1(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btConstraintInfo1 *arg2 = (btConstraintInfo1 *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btConstraintInfo2 *arg2 = (btConstraintInfo2 *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSequentialImpulseConstraintSolver() {
  void * jresult ;
  btSequentialImpulseConstraintSolver *result = 0 ;
  
  result = (btSequentialImpulseConstraintSolver *)new btSequentialImpulseConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSequentialImpulseConstraintSolver(void * jarg1) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_solveGroup(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  float jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btStackAlloc *arg10 = (btStackAlloc *) 0 ;
  btDispatcher *arg11 = (btDispatcher *) 0 ;
  btScalar result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (btCollisionObject **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btPersistentManifold **)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btTypedConstraint **)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (btContactSolverInfo *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btContactSolverInfo const & type is null", 0);
    return 0;
  } 
  arg9 = (btIDebugDraw *)jarg9; 
  arg10 = (btStackAlloc *)jarg10; 
  arg11 = (btDispatcher *)jarg11; 
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_reset(void * jarg1) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_btRand2(void * jarg1) {
  unsigned long jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (unsigned long)(arg1)->btRand2();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_btRandInt2(void * jarg1, int jarg2) {
  int jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->btRandInt2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_setRandSeed(void * jarg1, unsigned long jarg2) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setRandSeed(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getRandSeed(void * jarg1) {
  unsigned long jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (unsigned long)((btSequentialImpulseConstraintSolver const *)arg1)->getRandSeed();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRaycastVehicle(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  btVehicleRaycaster *arg3 = (btVehicleRaycaster *) 0 ;
  btRaycastVehicle *result = 0 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRaycastVehicle::btVehicleTuning const & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (btVehicleRaycaster *)jarg3; 
  result = (btRaycastVehicle *)new btRaycastVehicle((btRaycastVehicle::btVehicleTuning const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRaycastVehicle(void * jarg1) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateAction(void * jarg1, void * jarg2, float jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btCollisionWorld *)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->updateAction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_debugDraw(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  (arg1)->debugDraw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getChassisWorldTransform(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getChassisWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_rayCast(void * jarg1, void * jarg2) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->rayCast(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateVehicle(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_resetSuspension(void * jarg1) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  (arg1)->resetSuspension();
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_getSteeringValue(void * jarg1, int jarg2) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btRaycastVehicle const *)arg1)->getSteeringValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setSteeringValue(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSteeringValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_applyEngineForce(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->applyEngineForce(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getWheelTransformWS(void * jarg1, int jarg2) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getWheelTransformWS(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransform__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->updateWheelTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransform__SWIG_1(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->updateWheelTransform(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_addWheel(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, void * jarg7, unsigned int jarg8) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btRaycastVehicle::btVehicleTuning *arg7 = 0 ;
  bool arg8 ;
  btWheelInfo *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btRaycastVehicle::btVehicleTuning *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRaycastVehicle::btVehicleTuning const & type is null", 0);
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  result = (btWheelInfo *) &(arg1)->addWheel((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,(btRaycastVehicle::btVehicleTuning const &)*arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getNumWheels(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getNumWheels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_m_wheelInfo_set(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > arg2 ;
  btAlignedObjectArray< btWheelInfo > *argp2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  argp2 = (btAlignedObjectArray< btWheelInfo > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btAlignedObjectArray< btWheelInfo >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_wheelInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_m_wheelInfo_get(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result =  ((arg1)->m_wheelInfo);
  jresult = new btAlignedObjectArray< btWheelInfo >((const btAlignedObjectArray< btWheelInfo > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getWheelInfo__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btWheelInfo *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btWheelInfo *) &((btRaycastVehicle const *)arg1)->getWheelInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransformsWS__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->updateWheelTransformsWS(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransformsWS__SWIG_1(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return ;
  } 
  (arg1)->updateWheelTransformsWS(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setBrake(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setBrake(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setPitchControl(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setPitchControl(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateSuspension(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateSuspension(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateFriction(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateFriction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getRigidBody__SWIG_0(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btRigidBody *)(arg1)->getRigidBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getRightAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getRightAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUpAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getForwardAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getForwardAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getForwardVector(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = ((btRaycastVehicle const *)arg1)->getForwardVector();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_getCurrentSpeedKmHour(void * jarg1) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btScalar)((btRaycastVehicle const *)arg1)->getCurrentSpeedKmHour();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setCoordinateSystem(void * jarg1, int jarg2, int jarg3, int jarg4) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setCoordinateSystem(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUserConstraintType(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUserConstraintType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setUserConstraintType(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setUserConstraintId(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUserConstraintId(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUserConstraintId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultVehicleRaycaster(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDefaultVehicleRaycaster *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (btDefaultVehicleRaycaster *)new btDefaultVehicleRaycaster(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultVehicleRaycaster_castRay(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVehicleRaycasterResult *arg4 = 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultVehicleRaycaster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVehicleRaycasterResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVehicleRaycasterResult & type is null", 0);
    return 0;
  } 
  result = (void *)(arg1)->castRay((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultVehicleRaycaster(void * jarg1) {
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  
  arg1 = (btDefaultVehicleRaycaster *)jarg1; 
  delete arg1;
}


SWIGEXPORT btGeneric6DofConstraint * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_SWIGUpcast(btGeneric6DofSpringConstraint *jarg1) {
    return (btGeneric6DofConstraint *)jarg1;
}

SWIGEXPORT btGeneric6DofConstraint * SWIGSTDCALL CSharp_btUniversalConstraint_SWIGUpcast(btUniversalConstraint *jarg1) {
    return (btGeneric6DofConstraint *)jarg1;
}

SWIGEXPORT btGeneric6DofSpringConstraint * SWIGSTDCALL CSharp_btHinge2Constraint_SWIGUpcast(btHinge2Constraint *jarg1) {
    return (btGeneric6DofSpringConstraint *)jarg1;
}

#ifdef __cplusplus
}
#endif

