/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_BulletSoftBody(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_BulletSoftBody(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_BulletSoftBody(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


    #include "btSoftBody.h"
	#include "btSoftBodyData.h"
	#include "btSoftBodyConcaveCollisionAlgorithm.h"
	#include "btSoftBodyHelpers.h"
	#include "btSoftBodyRigidBodyCollisionConfiguration.h"
	#include "btSoftRigidCollisionAlgorithm.h"
	#include "btSoftRigidDynamicsWorld.h"
	#include "btSoftSoftCollisionAlgorithm.h"
	#include "btSparseSDF.h"

	#include "btSoftBodySolvers.h"
	#include "btDefaultSoftBodySolver.h"

	#include "btSoftBodySolverVertexBuffer.h"


typedef btSoftBody::eAeroModel eAeroModel;
typedef btSoftBody::eVSolver eVSolver; 
typedef btSoftBody::ePSolver ePSolver; 
typedef btSoftBody::Element Element;
typedef btSoftBody::Material Material;
typedef btSoftBody::Feature Feature;
typedef btSoftBody::Node Node;
typedef btSoftBody::Link Link;
typedef btSoftBody::Face Face;
typedef btSoftBody::Config Config;
typedef btAlignedObjectArray<eVSolver::_>	tVSolverArray;
typedef btAlignedObjectArray<ePSolver::_>	tPSolverArray;
typedef btSoftBody::fCollision fCollision;

typedef btSoftBody::Cluster Cluster;
typedef btSoftBody::Impulse Impulse;
typedef btSoftBody::Body Body;
typedef btSoftBody::SBJoint SBJoint;
typedef btSoftBody::LJoint LJoint;
typedef btSoftBody::AJoint AJoint;
typedef btSoftBody::CJoint CJoint;

 
typedef btCollisionWorld::RayResultCallback RayResultCallback;
typedef btCollisionWorld::LocalRayResult LocalRayResult;
typedef btCollisionWorld::LocalShapeInfo LocalShapeInfo;

typedef btAlignedObjectArray<btScalar>	tScalarArray;
typedef btAlignedObjectArray<btVector3>	tVector3Array;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_eAeroModel() {
  void * jresult ;
  eAeroModel *result = 0 ;
  
  result = (eAeroModel *)new eAeroModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eAeroModel(void * jarg1) {
  eAeroModel *arg1 = (eAeroModel *) 0 ;
  
  arg1 = (eAeroModel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eVSolver() {
  void * jresult ;
  eVSolver *result = 0 ;
  
  result = (eVSolver *)new eVSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eVSolver(void * jarg1) {
  eVSolver *arg1 = (eVSolver *) 0 ;
  
  arg1 = (eVSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ePSolver() {
  void * jresult ;
  ePSolver *result = 0 ;
  
  result = (ePSolver *)new ePSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ePSolver(void * jarg1) {
  ePSolver *arg1 = (ePSolver *) 0 ;
  
  arg1 = (ePSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fCollision() {
  void * jresult ;
  fCollision *result = 0 ;
  
  result = (fCollision *)new fCollision();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fCollision(void * jarg1) {
  fCollision *arg1 = (fCollision *) 0 ;
  
  arg1 = (fCollision *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Element_m_tag_set(void * jarg1, void * jarg2) {
  Element *arg1 = (Element *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Element *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_tag = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Element_m_tag_get(void * jarg1) {
  void * jresult ;
  Element *arg1 = (Element *) 0 ;
  void *result = 0 ;
  
  arg1 = (Element *)jarg1; 
  result = (void *) ((arg1)->m_tag);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Element() {
  void * jresult ;
  Element *result = 0 ;
  
  result = (Element *)new Element();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Element(void * jarg1) {
  Element *arg1 = (Element *) 0 ;
  
  arg1 = (Element *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_m_kLST_set(void * jarg1, float jarg2) {
  Material *arg1 = (Material *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_kLST = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_m_kLST_get(void * jarg1) {
  float jresult ;
  Material *arg1 = (Material *) 0 ;
  btScalar result;
  
  arg1 = (Material *)jarg1; 
  result = (btScalar) ((arg1)->m_kLST);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_m_kAST_set(void * jarg1, float jarg2) {
  Material *arg1 = (Material *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_kAST = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_m_kAST_get(void * jarg1) {
  float jresult ;
  Material *arg1 = (Material *) 0 ;
  btScalar result;
  
  arg1 = (Material *)jarg1; 
  result = (btScalar) ((arg1)->m_kAST);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_m_kVST_set(void * jarg1, float jarg2) {
  Material *arg1 = (Material *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_kVST = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_m_kVST_get(void * jarg1) {
  float jresult ;
  Material *arg1 = (Material *) 0 ;
  btScalar result;
  
  arg1 = (Material *)jarg1; 
  result = (btScalar) ((arg1)->m_kVST);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_m_flags_set(void * jarg1, int jarg2) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_m_flags_get(void * jarg1) {
  int jresult ;
  Material *arg1 = (Material *) 0 ;
  int result;
  
  arg1 = (Material *)jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material() {
  void * jresult ;
  Material *result = 0 ;
  
  result = (Material *)new Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Material(void * jarg1) {
  Material *arg1 = (Material *) 0 ;
  
  arg1 = (Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Feature_m_material_set(void * jarg1, void * jarg2) {
  Feature *arg1 = (Feature *) 0 ;
  Material *arg2 = (Material *) 0 ;
  
  arg1 = (Feature *)jarg1; 
  arg2 = (Material *)jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Feature_m_material_get(void * jarg1) {
  void * jresult ;
  Feature *arg1 = (Feature *) 0 ;
  Material *result = 0 ;
  
  arg1 = (Feature *)jarg1; 
  result = (Material *) ((arg1)->m_material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Feature() {
  void * jresult ;
  Feature *result = 0 ;
  
  result = (Feature *)new Feature();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Feature(void * jarg1) {
  Feature *arg1 = (Feature *) 0 ;
  
  arg1 = (Feature *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_x_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_x_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btVector3 result;
  
  arg1 = (Node *)jarg1; 
  result =  ((arg1)->m_x);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_q_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_q = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_q_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btVector3 result;
  
  arg1 = (Node *)jarg1; 
  result =  ((arg1)->m_q);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_v_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_v = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_v_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btVector3 result;
  
  arg1 = (Node *)jarg1; 
  result =  ((arg1)->m_v);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_f_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_f = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_f_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btVector3 result;
  
  arg1 = (Node *)jarg1; 
  result =  ((arg1)->m_f);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_n_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_n = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_n_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btVector3 result;
  
  arg1 = (Node *)jarg1; 
  result =  ((arg1)->m_n);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_im_set(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_im = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_m_im_get(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  btScalar result;
  
  arg1 = (Node *)jarg1; 
  result = (btScalar) ((arg1)->m_im);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_area_set(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_area = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_m_area_get(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  btScalar result;
  
  arg1 = (Node *)jarg1; 
  result = (btScalar) ((arg1)->m_area);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_leaf_set(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_leaf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_m_leaf_get(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_leaf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_m_battach_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_battach = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_m_battach_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->m_battach);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)new Node();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Node(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_n_set(void * jarg1, void * jarg2) {
  Link *arg1 = (Link *) 0 ;
  Node **arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (Node **)jarg2; 
  {
    size_t ii;
    Node * *b = (Node * *) arg1->m_n;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Node * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Link_m_n_get(void * jarg1) {
  void * jresult ;
  Link *arg1 = (Link *) 0 ;
  Node **result = 0 ;
  
  arg1 = (Link *)jarg1; 
  result = (Node **)(Node **) ((arg1)->m_n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_rl_set(void * jarg1, float jarg2) {
  Link *arg1 = (Link *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rl = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Link_m_rl_get(void * jarg1) {
  float jresult ;
  Link *arg1 = (Link *) 0 ;
  btScalar result;
  
  arg1 = (Link *)jarg1; 
  result = (btScalar) ((arg1)->m_rl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_bbending_set(void * jarg1, int jarg2) {
  Link *arg1 = (Link *) 0 ;
  int arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bbending = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Link_m_bbending_get(void * jarg1) {
  int jresult ;
  Link *arg1 = (Link *) 0 ;
  int result;
  
  arg1 = (Link *)jarg1; 
  result = (int) ((arg1)->m_bbending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_c0_set(void * jarg1, float jarg2) {
  Link *arg1 = (Link *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_c0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Link_m_c0_get(void * jarg1) {
  float jresult ;
  Link *arg1 = (Link *) 0 ;
  btScalar result;
  
  arg1 = (Link *)jarg1; 
  result = (btScalar) ((arg1)->m_c0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_c1_set(void * jarg1, float jarg2) {
  Link *arg1 = (Link *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_c1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Link_m_c1_get(void * jarg1) {
  float jresult ;
  Link *arg1 = (Link *) 0 ;
  btScalar result;
  
  arg1 = (Link *)jarg1; 
  result = (btScalar) ((arg1)->m_c1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_c2_set(void * jarg1, float jarg2) {
  Link *arg1 = (Link *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Link *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_c2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Link_m_c2_get(void * jarg1) {
  float jresult ;
  Link *arg1 = (Link *) 0 ;
  btScalar result;
  
  arg1 = (Link *)jarg1; 
  result = (btScalar) ((arg1)->m_c2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Link_m_c3_set(void * jarg1, void * jarg2) {
  Link *arg1 = (Link *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Link *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_c3 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Link_m_c3_get(void * jarg1) {
  void * jresult ;
  Link *arg1 = (Link *) 0 ;
  btVector3 result;
  
  arg1 = (Link *)jarg1; 
  result =  ((arg1)->m_c3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Link() {
  void * jresult ;
  Link *result = 0 ;
  
  result = (Link *)new Link();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Link(void * jarg1) {
  Link *arg1 = (Link *) 0 ;
  
  arg1 = (Link *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Face_m_n_set(void * jarg1, void * jarg2) {
  Face *arg1 = (Face *) 0 ;
  Node **arg2 ;
  
  arg1 = (Face *)jarg1; 
  arg2 = (Node **)jarg2; 
  {
    size_t ii;
    Node * *b = (Node * *) arg1->m_n;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Node * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Face_m_n_get(void * jarg1) {
  void * jresult ;
  Face *arg1 = (Face *) 0 ;
  Node **result = 0 ;
  
  arg1 = (Face *)jarg1; 
  result = (Node **)(Node **) ((arg1)->m_n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Face_m_normal_set(void * jarg1, void * jarg2) {
  Face *arg1 = (Face *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Face *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Face_m_normal_get(void * jarg1) {
  void * jresult ;
  Face *arg1 = (Face *) 0 ;
  btVector3 result;
  
  arg1 = (Face *)jarg1; 
  result =  ((arg1)->m_normal);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Face_m_ra_set(void * jarg1, float jarg2) {
  Face *arg1 = (Face *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Face *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_ra = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Face_m_ra_get(void * jarg1) {
  float jresult ;
  Face *arg1 = (Face *) 0 ;
  btScalar result;
  
  arg1 = (Face *)jarg1; 
  result = (btScalar) ((arg1)->m_ra);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Face_m_leaf_set(void * jarg1, void * jarg2) {
  Face *arg1 = (Face *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (Face *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_leaf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Face_m_leaf_get(void * jarg1) {
  void * jresult ;
  Face *arg1 = (Face *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (Face *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_leaf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Face() {
  void * jresult ;
  Face *result = 0 ;
  
  result = (Face *)new Face();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Face(void * jarg1) {
  Face *arg1 = (Face *) 0 ;
  
  arg1 = (Face *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_masses_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  tScalarArray arg2 ;
  tScalarArray *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (tScalarArray *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null tScalarArray", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_masses = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_masses_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  tScalarArray result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_masses);
  jresult = new tScalarArray((const tScalarArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_nodes_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btAlignedObjectArray< Node * > *arg2 = (btAlignedObjectArray< Node * > *) 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btAlignedObjectArray< Node * > *)jarg2; 
  if (arg1) (arg1)->m_nodes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_nodes_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btAlignedObjectArray< Node * > *result = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  result = (btAlignedObjectArray< Node * > *)& ((arg1)->m_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_framerefs_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  tVector3Array arg2 ;
  tVector3Array *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (tVector3Array *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null tVector3Array", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_framerefs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_framerefs_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  tVector3Array result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_framerefs);
  jresult = new tVector3Array((const tVector3Array &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_framexform_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btTransform arg2 ;
  btTransform *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_framexform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_framexform_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btTransform result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_framexform);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_idmass_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_idmass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_idmass_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_idmass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_imass_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_imass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_imass_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_imass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_locii_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btMatrix3x3 arg2 ;
  btMatrix3x3 *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btMatrix3x3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_locii = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_locii_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_locii);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_invwi_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btMatrix3x3 arg2 ;
  btMatrix3x3 *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btMatrix3x3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invwi = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_invwi_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_invwi);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_com_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_com = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_com_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_com);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_vimpulses_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_vimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_vimpulses_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_vimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_dimpulses_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_dimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_dimpulses_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_dimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_nvimpulses_set(void * jarg1, int jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  int arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nvimpulses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Cluster_m_nvimpulses_get(void * jarg1) {
  int jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  int result;
  
  arg1 = (Cluster *)jarg1; 
  result = (int) ((arg1)->m_nvimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_ndimpulses_set(void * jarg1, int jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  int arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_ndimpulses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Cluster_m_ndimpulses_get(void * jarg1) {
  int jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  int result;
  
  arg1 = (Cluster *)jarg1; 
  result = (int) ((arg1)->m_ndimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_lv_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_lv = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_lv_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_lv);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_av_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Cluster *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_av = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_av_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 result;
  
  arg1 = (Cluster *)jarg1; 
  result =  ((arg1)->m_av);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_leaf_set(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_leaf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cluster_m_leaf_get(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_leaf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_ndamping_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_ndamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_ndamping_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_ndamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_ldamping_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_ldamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_ldamping_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_ldamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_adamping_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_adamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_adamping_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_adamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_matching_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_matching = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_matching_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_matching);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_maxSelfCollisionImpulse_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSelfCollisionImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_maxSelfCollisionImpulse_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSelfCollisionImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_selfCollisionImpulseFactor_set(void * jarg1, float jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_selfCollisionImpulseFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Cluster_m_selfCollisionImpulseFactor_get(void * jarg1) {
  float jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btScalar result;
  
  arg1 = (Cluster *)jarg1; 
  result = (btScalar) ((arg1)->m_selfCollisionImpulseFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_containsAnchor_set(void * jarg1, unsigned int jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  bool arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_containsAnchor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Cluster_m_containsAnchor_get(void * jarg1) {
  unsigned int jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  bool result;
  
  arg1 = (Cluster *)jarg1; 
  result = (bool) ((arg1)->m_containsAnchor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_collide_set(void * jarg1, unsigned int jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  bool arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_collide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Cluster_m_collide_get(void * jarg1) {
  unsigned int jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  bool result;
  
  arg1 = (Cluster *)jarg1; 
  result = (bool) ((arg1)->m_collide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cluster_m_clusterIndex_set(void * jarg1, int jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  int arg2 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_clusterIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Cluster_m_clusterIndex_get(void * jarg1) {
  int jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  int result;
  
  arg1 = (Cluster *)jarg1; 
  result = (int) ((arg1)->m_clusterIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Cluster() {
  void * jresult ;
  Cluster *result = 0 ;
  
  result = (Cluster *)new Cluster();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Cluster(void * jarg1) {
  Cluster *arg1 = (Cluster *) 0 ;
  
  arg1 = (Cluster *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Impulse_m_velocity_set(void * jarg1, void * jarg2) {
  Impulse *arg1 = (Impulse *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Impulse *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_velocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Impulse_m_velocity_get(void * jarg1) {
  void * jresult ;
  Impulse *arg1 = (Impulse *) 0 ;
  btVector3 result;
  
  arg1 = (Impulse *)jarg1; 
  result =  ((arg1)->m_velocity);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Impulse_m_drift_set(void * jarg1, void * jarg2) {
  Impulse *arg1 = (Impulse *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (Impulse *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_drift = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Impulse_m_drift_get(void * jarg1) {
  void * jresult ;
  Impulse *arg1 = (Impulse *) 0 ;
  btVector3 result;
  
  arg1 = (Impulse *)jarg1; 
  result =  ((arg1)->m_drift);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Impulse_m_asVelocity_set(void * jarg1, int jarg2) {
  Impulse *arg1 = (Impulse *) 0 ;
  int arg2 ;
  
  arg1 = (Impulse *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_asVelocity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Impulse_m_asVelocity_get(void * jarg1) {
  int jresult ;
  Impulse *arg1 = (Impulse *) 0 ;
  int result;
  
  arg1 = (Impulse *)jarg1; 
  result = (int) ((arg1)->m_asVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Impulse_m_asDrift_set(void * jarg1, int jarg2) {
  Impulse *arg1 = (Impulse *) 0 ;
  int arg2 ;
  
  arg1 = (Impulse *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_asDrift = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Impulse_m_asDrift_get(void * jarg1) {
  int jresult ;
  Impulse *arg1 = (Impulse *) 0 ;
  int result;
  
  arg1 = (Impulse *)jarg1; 
  result = (int) ((arg1)->m_asDrift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Impulse() {
  void * jresult ;
  Impulse *result = 0 ;
  
  result = (Impulse *)new Impulse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Impulse(void * jarg1) {
  Impulse *arg1 = (Impulse *) 0 ;
  
  arg1 = (Impulse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_m_soft_set(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  Cluster *arg2 = (Cluster *) 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (Cluster *)jarg2; 
  if (arg1) (arg1)->m_soft = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_m_soft_get(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  Cluster *result = 0 ;
  
  arg1 = (Body *)jarg1; 
  result = (Cluster *) ((arg1)->m_soft);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_m_rigid_set(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  if (arg1) (arg1)->m_rigid = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_m_rigid_get(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (Body *)jarg1; 
  result = (btRigidBody *) ((arg1)->m_rigid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_m_collisionObject_set(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (Body *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Body__SWIG_0() {
  void * jresult ;
  Body *result = 0 ;
  
  result = (Body *)new Body();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Body__SWIG_1(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  Body *result = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  result = (Body *)new Body(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Body__SWIG_2(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  Body *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (Body *)new Body((btCollisionObject const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_activate(void * jarg1) {
  Body *arg1 = (Body *) 0 ;
  
  arg1 = (Body *)jarg1; 
  ((Body const *)arg1)->activate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_invWorldInertia(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (Body *)jarg1; 
  result = (btMatrix3x3 *) &((Body const *)arg1)->invWorldInertia();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Body_invMass(void * jarg1) {
  float jresult ;
  Body *arg1 = (Body *) 0 ;
  btScalar result;
  
  arg1 = (Body *)jarg1; 
  result = (btScalar)((Body const *)arg1)->invMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_xform(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (Body *)jarg1; 
  result = (btTransform *) &((Body const *)arg1)->xform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_linearVelocity(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btVector3 result;
  
  arg1 = (Body *)jarg1; 
  result = ((Body const *)arg1)->linearVelocity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_angularVelocity__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Body const *)arg1)->angularVelocity((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_angularVelocity__SWIG_1(void * jarg1) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btVector3 result;
  
  arg1 = (Body *)jarg1; 
  result = ((Body const *)arg1)->angularVelocity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Body_velocity(void * jarg1, void * jarg2) {
  void * jresult ;
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Body const *)arg1)->velocity((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyVImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyVImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyDImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyDImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Body *arg1 = (Body *) 0 ;
  Impulse *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (Impulse *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Impulse const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyImpulse((Impulse const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyVAImpulse(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyVAImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyDAImpulse(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyDAImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyAImpulse(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  Impulse *arg2 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (Impulse *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Impulse const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyAImpulse((Impulse const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Body_applyDCImpulse(void * jarg1, void * jarg2) {
  Body *arg1 = (Body *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Body *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((Body const *)arg1)->applyDCImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Body(void * jarg1) {
  Body *arg1 = (Body *) 0 ;
  
  arg1 = (Body *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_bodies_set(void * jarg1, void * jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  Body *arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (Body *)jarg2; 
  {
    size_t ii;
    Body *b = (Body *) arg1->m_bodies;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Body *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_m_bodies_get(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  Body *result = 0 ;
  
  arg1 = (SBJoint *)jarg1; 
  result = (Body *)(Body *) ((arg1)->m_bodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_refs_set(void * jarg1, void * jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_refs;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_m_refs_get(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (SBJoint *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_refs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_cfm_set(void * jarg1, float jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_cfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SBJoint_m_cfm_get(void * jarg1) {
  float jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar result;
  
  arg1 = (SBJoint *)jarg1; 
  result = (btScalar) ((arg1)->m_cfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_erp_set(void * jarg1, float jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SBJoint_m_erp_get(void * jarg1) {
  float jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar result;
  
  arg1 = (SBJoint *)jarg1; 
  result = (btScalar) ((arg1)->m_erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_split_set(void * jarg1, float jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_split = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SBJoint_m_split_get(void * jarg1) {
  float jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar result;
  
  arg1 = (SBJoint *)jarg1; 
  result = (btScalar) ((arg1)->m_split);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_drift_set(void * jarg1, void * jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (SBJoint *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_drift = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_m_drift_get(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 result;
  
  arg1 = (SBJoint *)jarg1; 
  result =  ((arg1)->m_drift);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_sdrift_set(void * jarg1, void * jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (SBJoint *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_sdrift = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_m_sdrift_get(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btVector3 result;
  
  arg1 = (SBJoint *)jarg1; 
  result =  ((arg1)->m_sdrift);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_massmatrix_set(void * jarg1, void * jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btMatrix3x3 arg2 ;
  btMatrix3x3 *argp2 ;
  
  arg1 = (SBJoint *)jarg1; 
  argp2 = (btMatrix3x3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_massmatrix = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_m_massmatrix_get(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (SBJoint *)jarg1; 
  result =  ((arg1)->m_massmatrix);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_m_delete_set(void * jarg1, unsigned int jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_delete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBJoint_m_delete_get(void * jarg1) {
  unsigned int jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  bool result;
  
  arg1 = (SBJoint *)jarg1; 
  result = (bool) ((arg1)->m_delete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBJoint(void * jarg1) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  
  arg1 = (SBJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_Prepare(void * jarg1, float jarg2, int jarg3) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Prepare(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_Solve(void * jarg1, float jarg2, float jarg3) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->Solve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBJoint_Terminate(void * jarg1, float jarg2) {
  SBJoint *arg1 = (SBJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (SBJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->Terminate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBJoint_Type(void * jarg1) {
  void * jresult ;
  SBJoint *arg1 = (SBJoint *) 0 ;
  SBJoint::eType::_ result;
  
  arg1 = (SBJoint *)jarg1; 
  result = ((SBJoint const *)arg1)->Type();
  jresult = new SBJoint::eType::_((const SBJoint::eType::_ &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LJoint_m_rpos_set(void * jarg1, void * jarg2) {
  LJoint *arg1 = (LJoint *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (LJoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_rpos;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LJoint_m_rpos_get(void * jarg1) {
  void * jresult ;
  LJoint *arg1 = (LJoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (LJoint *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_rpos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LJoint_Prepare(void * jarg1, float jarg2, int jarg3) {
  LJoint *arg1 = (LJoint *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (LJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Prepare(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LJoint_Solve(void * jarg1, float jarg2, float jarg3) {
  LJoint *arg1 = (LJoint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (LJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->Solve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LJoint_Terminate(void * jarg1, float jarg2) {
  LJoint *arg1 = (LJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (LJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->Terminate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LJoint_Type(void * jarg1) {
  void * jresult ;
  LJoint *arg1 = (LJoint *) 0 ;
  SBJoint::eType::_ result;
  
  arg1 = (LJoint *)jarg1; 
  result = ((LJoint const *)arg1)->Type();
  jresult = new SBJoint::eType::_((const SBJoint::eType::_ &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LJoint() {
  void * jresult ;
  LJoint *result = 0 ;
  
  result = (LJoint *)new LJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LJoint(void * jarg1) {
  LJoint *arg1 = (LJoint *) 0 ;
  
  arg1 = (LJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AJoint_m_axis_set(void * jarg1, void * jarg2) {
  AJoint *arg1 = (AJoint *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (AJoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_axis;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AJoint_m_axis_get(void * jarg1) {
  void * jresult ;
  AJoint *arg1 = (AJoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (AJoint *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_axis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AJoint_m_icontrol_set(void * jarg1, void * jarg2) {
  AJoint *arg1 = (AJoint *) 0 ;
  AJoint::IControl *arg2 = (AJoint::IControl *) 0 ;
  
  arg1 = (AJoint *)jarg1; 
  arg2 = (AJoint::IControl *)jarg2; 
  if (arg1) (arg1)->m_icontrol = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AJoint_m_icontrol_get(void * jarg1) {
  void * jresult ;
  AJoint *arg1 = (AJoint *) 0 ;
  AJoint::IControl *result = 0 ;
  
  arg1 = (AJoint *)jarg1; 
  result = (AJoint::IControl *) ((arg1)->m_icontrol);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AJoint_Prepare(void * jarg1, float jarg2, int jarg3) {
  AJoint *arg1 = (AJoint *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (AJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Prepare(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AJoint_Solve(void * jarg1, float jarg2, float jarg3) {
  AJoint *arg1 = (AJoint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (AJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->Solve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AJoint_Terminate(void * jarg1, float jarg2) {
  AJoint *arg1 = (AJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (AJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->Terminate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AJoint_Type(void * jarg1) {
  void * jresult ;
  AJoint *arg1 = (AJoint *) 0 ;
  SBJoint::eType::_ result;
  
  arg1 = (AJoint *)jarg1; 
  result = ((AJoint const *)arg1)->Type();
  jresult = new SBJoint::eType::_((const SBJoint::eType::_ &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AJoint() {
  void * jresult ;
  AJoint *result = 0 ;
  
  result = (AJoint *)new AJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AJoint(void * jarg1) {
  AJoint *arg1 = (AJoint *) 0 ;
  
  arg1 = (AJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_m_life_set(void * jarg1, int jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  int arg2 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_life = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CJoint_m_life_get(void * jarg1) {
  int jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  int result;
  
  arg1 = (CJoint *)jarg1; 
  result = (int) ((arg1)->m_life);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_m_maxlife_set(void * jarg1, int jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  int arg2 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_maxlife = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CJoint_m_maxlife_get(void * jarg1) {
  int jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  int result;
  
  arg1 = (CJoint *)jarg1; 
  result = (int) ((arg1)->m_maxlife);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_m_rpos_set(void * jarg1, void * jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_rpos;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CJoint_m_rpos_get(void * jarg1) {
  void * jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (CJoint *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_rpos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_m_normal_set(void * jarg1, void * jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (CJoint *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CJoint_m_normal_get(void * jarg1) {
  void * jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  btVector3 result;
  
  arg1 = (CJoint *)jarg1; 
  result =  ((arg1)->m_normal);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_m_friction_set(void * jarg1, float jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CJoint_m_friction_get(void * jarg1) {
  float jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  btScalar result;
  
  arg1 = (CJoint *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_Prepare(void * jarg1, float jarg2, int jarg3) {
  CJoint *arg1 = (CJoint *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Prepare(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_Solve(void * jarg1, float jarg2, float jarg3) {
  CJoint *arg1 = (CJoint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->Solve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CJoint_Terminate(void * jarg1, float jarg2) {
  CJoint *arg1 = (CJoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (CJoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->Terminate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CJoint_Type(void * jarg1) {
  void * jresult ;
  CJoint *arg1 = (CJoint *) 0 ;
  SBJoint::eType::_ result;
  
  arg1 = (CJoint *)jarg1; 
  result = ((CJoint const *)arg1)->Type();
  jresult = new SBJoint::eType::_((const SBJoint::eType::_ &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CJoint() {
  void * jresult ;
  CJoint *result = 0 ;
  
  result = (CJoint *)new CJoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CJoint(void * jarg1) {
  CJoint *arg1 = (CJoint *) 0 ;
  
  arg1 = (CJoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_aeromodel_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  eAeroModel::_ arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (eAeroModel::_)jarg2; 
  if (arg1) (arg1)->aeromodel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_aeromodel_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  eAeroModel::_ result;
  
  arg1 = (Config *)jarg1; 
  result = (eAeroModel::_) ((arg1)->aeromodel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kVCF_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kVCF = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kVCF_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kVCF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kDP_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kDP = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kDP_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kDP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kDG_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kDG = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kDG_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kDG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kLF_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kLF = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kLF_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kLF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kPR_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kPR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kPR_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kPR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kVC_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kVC = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kVC_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kVC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kDF_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kDF = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kDF_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kDF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kMT_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kMT = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kMT_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kMT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kCHR_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kCHR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kCHR_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kCHR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kKHR_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kKHR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kKHR_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kKHR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSHR_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSHR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSHR_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSHR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kAHR_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kAHR = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kAHR_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kAHR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSRHR_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSRHR_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSRHR_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSRHR_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSKHR_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSKHR_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSKHR_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSKHR_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSSHR_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSSHR_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSSHR_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSSHR_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSR_SPLT_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSR_SPLT_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSR_SPLT_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSR_SPLT_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSK_SPLT_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSK_SPLT_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSK_SPLT_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSK_SPLT_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_kSS_SPLT_CL_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->kSS_SPLT_CL = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_kSS_SPLT_CL_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->kSS_SPLT_CL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_maxvolume_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->maxvolume = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_maxvolume_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->maxvolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_timescale_set(void * jarg1, float jarg2) {
  Config *arg1 = (Config *) 0 ;
  btScalar arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->timescale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Config_timescale_get(void * jarg1) {
  float jresult ;
  Config *arg1 = (Config *) 0 ;
  btScalar result;
  
  arg1 = (Config *)jarg1; 
  result = (btScalar) ((arg1)->timescale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_viterations_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  int arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_viterations_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  int result;
  
  arg1 = (Config *)jarg1; 
  result = (int) ((arg1)->viterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_piterations_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  int arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->piterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_piterations_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  int result;
  
  arg1 = (Config *)jarg1; 
  result = (int) ((arg1)->piterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_diterations_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  int arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->diterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_diterations_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  int result;
  
  arg1 = (Config *)jarg1; 
  result = (int) ((arg1)->diterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_citerations_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  int arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->citerations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_citerations_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  int result;
  
  arg1 = (Config *)jarg1; 
  result = (int) ((arg1)->citerations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_collisions_set(void * jarg1, int jarg2) {
  Config *arg1 = (Config *) 0 ;
  int arg2 ;
  
  arg1 = (Config *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->collisions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Config_collisions_get(void * jarg1) {
  int jresult ;
  Config *arg1 = (Config *) 0 ;
  int result;
  
  arg1 = (Config *)jarg1; 
  result = (int) ((arg1)->collisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_m_vsequence_set(void * jarg1, void * jarg2) {
  Config *arg1 = (Config *) 0 ;
  tVSolverArray arg2 ;
  tVSolverArray *argp2 ;
  
  arg1 = (Config *)jarg1; 
  argp2 = (tVSolverArray *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null tVSolverArray", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vsequence = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Config_m_vsequence_get(void * jarg1) {
  void * jresult ;
  Config *arg1 = (Config *) 0 ;
  tVSolverArray result;
  
  arg1 = (Config *)jarg1; 
  result =  ((arg1)->m_vsequence);
  jresult = new tVSolverArray((const tVSolverArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_m_psequence_set(void * jarg1, void * jarg2) {
  Config *arg1 = (Config *) 0 ;
  tPSolverArray arg2 ;
  tPSolverArray *argp2 ;
  
  arg1 = (Config *)jarg1; 
  argp2 = (tPSolverArray *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null tPSolverArray", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_psequence = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Config_m_psequence_get(void * jarg1) {
  void * jresult ;
  Config *arg1 = (Config *) 0 ;
  tPSolverArray result;
  
  arg1 = (Config *)jarg1; 
  result =  ((arg1)->m_psequence);
  jresult = new tPSolverArray((const tPSolverArray &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Config_m_dsequence_set(void * jarg1, void * jarg2) {
  Config *arg1 = (Config *) 0 ;
  tPSolverArray arg2 ;
  tPSolverArray *argp2 ;
  
  arg1 = (Config *)jarg1; 
  argp2 = (tPSolverArray *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null tPSolverArray", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_dsequence = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Config_m_dsequence_get(void * jarg1) {
  void * jresult ;
  Config *arg1 = (Config *) 0 ;
  tPSolverArray result;
  
  arg1 = (Config *)jarg1; 
  result =  ((arg1)->m_dsequence);
  jresult = new tPSolverArray((const tPSolverArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Config() {
  void * jresult ;
  Config *result = 0 ;
  
  result = (Config *)new Config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Config(void * jarg1) {
  Config *arg1 = (Config *) 0 ;
  
  arg1 = (Config *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayResultCallback_m_closestHitFraction_set(void * jarg1, float jarg2) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestHitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayResultCallback_m_closestHitFraction_get(void * jarg1) {
  float jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestHitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayResultCallback_m_collisionObject_set(void * jarg1, void * jarg2) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayResultCallback_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayResultCallback_m_collisionFilterGroup_set(void * jarg1, short jarg2) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_RayResultCallback_m_collisionFilterGroup_get(void * jarg1) {
  short jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  short result;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayResultCallback_m_collisionFilterMask_set(void * jarg1, short jarg2) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_RayResultCallback_m_collisionFilterMask_get(void * jarg1) {
  short jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  short result;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayResultCallback_m_flags_set(void * jarg1, unsigned int jarg2) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayResultCallback_m_flags_get(void * jarg1) {
  unsigned int jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  unsigned int result;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (unsigned int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayResultCallback(void * jarg1) {
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  
  arg1 = (RayResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayResultCallback_hasHit(void * jarg1) {
  unsigned int jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  bool result;
  
  arg1 = (RayResultCallback *)jarg1; 
  result = (bool)((RayResultCallback const *)arg1)->hasHit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayResultCallback_needsCollision(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  result = (bool)((RayResultCallback const *)arg1)->needsCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  RayResultCallback *arg1 = (RayResultCallback *) 0 ;
  LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (RayResultCallback *)jarg1; 
  arg2 = (LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalRayResult(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  LocalShapeInfo *arg2 = (LocalShapeInfo *) 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  LocalRayResult *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (LocalShapeInfo *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  result = (LocalRayResult *)new LocalRayResult((btCollisionObject const *)arg1,arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalRayResult_m_collisionObject_set(void * jarg1, void * jarg2) {
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalRayResult_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalRayResult_m_localShapeInfo_set(void * jarg1, void * jarg2) {
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  LocalShapeInfo *arg2 = (LocalShapeInfo *) 0 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  arg2 = (LocalShapeInfo *)jarg2; 
  if (arg1) (arg1)->m_localShapeInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalRayResult_m_localShapeInfo_get(void * jarg1) {
  void * jresult ;
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  LocalShapeInfo *result = 0 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  result = (LocalShapeInfo *) ((arg1)->m_localShapeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalRayResult_m_hitNormalLocal_set(void * jarg1, void * jarg2) {
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_hitNormalLocal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LocalRayResult_m_hitNormalLocal_get(void * jarg1) {
  void * jresult ;
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btVector3 result;
  
  arg1 = (LocalRayResult *)jarg1; 
  result =  ((arg1)->m_hitNormalLocal);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalRayResult_m_hitFraction_set(void * jarg1, float jarg2) {
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LocalRayResult_m_hitFraction_get(void * jarg1) {
  float jresult ;
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  btScalar result;
  
  arg1 = (LocalRayResult *)jarg1; 
  result = (btScalar) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalRayResult(void * jarg1) {
  LocalRayResult *arg1 = (LocalRayResult *) 0 ;
  
  arg1 = (LocalRayResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalShapeInfo_m_shapePart_set(void * jarg1, int jarg2) {
  LocalShapeInfo *arg1 = (LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapePart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalShapeInfo_m_shapePart_get(void * jarg1) {
  int jresult ;
  LocalShapeInfo *arg1 = (LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_shapePart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LocalShapeInfo_m_triangleIndex_set(void * jarg1, int jarg2) {
  LocalShapeInfo *arg1 = (LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LocalShapeInfo_m_triangleIndex_get(void * jarg1) {
  int jresult ;
  LocalShapeInfo *arg1 = (LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LocalShapeInfo() {
  void * jresult ;
  LocalShapeInfo *result = 0 ;
  
  result = (LocalShapeInfo *)new LocalShapeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LocalShapeInfo(void * jarg1) {
  LocalShapeInfo *arg1 = (LocalShapeInfo *) 0 ;
  
  arg1 = (LocalShapeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSoftBodyDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btSoftBodyFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_air_density_set(void * jarg1, float jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->air_density = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyWorldInfo_air_density_get(void * jarg1) {
  float jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btScalar) ((arg1)->air_density);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_density_set(void * jarg1, float jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->water_density = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_density_get(void * jarg1) {
  float jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btScalar) ((arg1)->water_density);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_offset_set(void * jarg1, float jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->water_offset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_offset_get(void * jarg1) {
  float jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btScalar) ((arg1)->water_offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_normal_set(void * jarg1, void * jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->water_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyWorldInfo_water_normal_get(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 result;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result =  ((arg1)->water_normal);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_broadphase_set(void * jarg1, void * jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  if (arg1) (arg1)->m_broadphase = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_broadphase_get(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btBroadphaseInterface *) ((arg1)->m_broadphase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_dispatcher_set(void * jarg1, void * jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  if (arg1) (arg1)->m_dispatcher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_dispatcher_get(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btDispatcher *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btDispatcher *) ((arg1)->m_dispatcher);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_gravity_set(void * jarg1, void * jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_gravity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_gravity_get(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btVector3 result;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result =  ((arg1)->m_gravity);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_sparsesdf_set(void * jarg1, void * jarg2) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSparseSdf< 3 > *arg2 = (btSparseSdf< 3 > *) 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (btSparseSdf< 3 > *)jarg2; 
  if (arg1) (arg1)->m_sparsesdf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyWorldInfo_m_sparsesdf_get(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSparseSdf< 3 > *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btSparseSdf< 3 > *)& ((arg1)->m_sparsesdf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyWorldInfo() {
  void * jresult ;
  btSoftBodyWorldInfo *result = 0 ;
  
  result = (btSoftBodyWorldInfo *)new btSoftBodyWorldInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyWorldInfo(void * jarg1) {
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_collisionDisabledObjects_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *arg2 = (btAlignedObjectArray< btCollisionObject const * > *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btAlignedObjectArray< btCollisionObject const * > *)jarg2; 
  if (arg1) (arg1)->m_collisionDisabledObjects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_collisionDisabledObjects_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btAlignedObjectArray< btCollisionObject const * > *)& ((arg1)->m_collisionDisabledObjects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_softBodySolver_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *arg2 = (btSoftBodySolver *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBodySolver *)jarg2; 
  if (arg1) (arg1)->m_softBodySolver = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_softBodySolver_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBodySolver *) ((arg1)->m_softBodySolver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_cfg_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Config *arg2 = (Config *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Config *)jarg2; 
  if (arg1) (arg1)->m_cfg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_cfg_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Config *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (Config *)& ((arg1)->m_cfg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_sst_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::SolverState *arg2 = (btSoftBody::SolverState *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::SolverState *)jarg2; 
  if (arg1) (arg1)->m_sst = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_sst_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::SolverState *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::SolverState *)& ((arg1)->m_sst);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_pose_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Pose *arg2 = (btSoftBody::Pose *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::Pose *)jarg2; 
  if (arg1) (arg1)->m_pose = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_pose_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::Pose *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::Pose *)& ((arg1)->m_pose);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_tag_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_tag = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_tag_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (void *) ((arg1)->m_tag);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_worldInfo_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *arg2 = (btSoftBodyWorldInfo *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBodyWorldInfo *)jarg2; 
  if (arg1) (arg1)->m_worldInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_worldInfo_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBodyWorldInfo *) ((arg1)->m_worldInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_notes_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNoteArray *arg2 = (btSoftBody::tNoteArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tNoteArray *)jarg2; 
  if (arg1) (arg1)->m_notes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_notes_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNoteArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tNoteArray *)& ((arg1)->m_notes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_nodes_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeArray *arg2 = (btSoftBody::tNodeArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tNodeArray *)jarg2; 
  if (arg1) (arg1)->m_nodes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_nodes_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tNodeArray *)& ((arg1)->m_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_links_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tLinkArray *arg2 = (btSoftBody::tLinkArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tLinkArray *)jarg2; 
  if (arg1) (arg1)->m_links = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_links_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tLinkArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tLinkArray *)& ((arg1)->m_links);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_faces_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tFaceArray *arg2 = (btSoftBody::tFaceArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tFaceArray *)jarg2; 
  if (arg1) (arg1)->m_faces = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_faces_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tFaceArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tFaceArray *)& ((arg1)->m_faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_tetras_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tTetraArray *arg2 = (btSoftBody::tTetraArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tTetraArray *)jarg2; 
  if (arg1) (arg1)->m_tetras = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_tetras_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tTetraArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tTetraArray *)& ((arg1)->m_tetras);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_anchors_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tAnchorArray *arg2 = (btSoftBody::tAnchorArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tAnchorArray *)jarg2; 
  if (arg1) (arg1)->m_anchors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_anchors_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tAnchorArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tAnchorArray *)& ((arg1)->m_anchors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_rcontacts_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tRContactArray *arg2 = (btSoftBody::tRContactArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tRContactArray *)jarg2; 
  if (arg1) (arg1)->m_rcontacts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_rcontacts_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tRContactArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tRContactArray *)& ((arg1)->m_rcontacts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_scontacts_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tSContactArray *arg2 = (btSoftBody::tSContactArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tSContactArray *)jarg2; 
  if (arg1) (arg1)->m_scontacts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_scontacts_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tSContactArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tSContactArray *)& ((arg1)->m_scontacts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_joints_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tJointArray *arg2 = (btSoftBody::tJointArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tJointArray *)jarg2; 
  if (arg1) (arg1)->m_joints = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_joints_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tJointArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tJointArray *)& ((arg1)->m_joints);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_materials_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tMaterialArray *arg2 = (btSoftBody::tMaterialArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tMaterialArray *)jarg2; 
  if (arg1) (arg1)->m_materials = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_materials_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tMaterialArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tMaterialArray *)& ((arg1)->m_materials);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_timeacc_set(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_timeacc = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_m_timeacc_get(void * jarg1) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btScalar) ((arg1)->m_timeacc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_bounds_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  {
    size_t ii;
    btVector3 *b = (btVector3 *) arg1->m_bounds;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_bounds_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btVector3 *)(btVector3 *) ((arg1)->m_bounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_bUpdateRtCst_set(void * jarg1, unsigned int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bUpdateRtCst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_m_bUpdateRtCst_get(void * jarg1) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (bool) ((arg1)->m_bUpdateRtCst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_ndbvt_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt arg2 ;
  btDbvt *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btDbvt *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btDbvt", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_ndbvt = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_ndbvt_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt result;
  
  arg1 = (btSoftBody *)jarg1; 
  result =  ((arg1)->m_ndbvt);
   btDbvt *temp = new btDbvt();
  result.clone(*temp);
  jresult = temp;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_fdbvt_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt arg2 ;
  btDbvt *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btDbvt *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btDbvt", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_fdbvt = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_fdbvt_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt result;
  
  arg1 = (btSoftBody *)jarg1; 
  result =  ((arg1)->m_fdbvt);
   btDbvt *temp = new btDbvt();
  result.clone(*temp);
  jresult = temp;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_cdbvt_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt arg2 ;
  btDbvt *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btDbvt *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btDbvt", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_cdbvt = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_cdbvt_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btDbvt result;
  
  arg1 = (btSoftBody *)jarg1; 
  result =  ((arg1)->m_cdbvt);
   btDbvt *temp = new btDbvt();
  result.clone(*temp);
  jresult = temp; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_clusters_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tClusterArray *arg2 = (btSoftBody::tClusterArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tClusterArray *)jarg2; 
  if (arg1) (arg1)->m_clusters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_clusters_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tClusterArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tClusterArray *)& ((arg1)->m_clusters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_linkNodeIndex_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeIndexOfFaceArray *arg2 = (btSoftBody::tNodeIndexOfFaceArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tNodeIndexOfFaceArray *)jarg2; 
  if (arg1) (arg1)->m_linkNodeIndex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_linkNodeIndex_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeIndexOfFaceArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tNodeIndexOfFaceArray *)& ((arg1)->m_linkNodeIndex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_faceNodeIndex_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeIndexOfFaceArray *arg2 = (btSoftBody::tNodeIndexOfFaceArray *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::tNodeIndexOfFaceArray *)jarg2; 
  if (arg1) (arg1)->m_faceNodeIndex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_faceNodeIndex_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::tNodeIndexOfFaceArray *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBody::tNodeIndexOfFaceArray *)& ((arg1)->m_faceNodeIndex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_clusterConnectivity_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< bool > *arg2 = (btAlignedObjectArray< bool > *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btAlignedObjectArray< bool > *)jarg2; 
  if (arg1) (arg1)->m_clusterConnectivity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_clusterConnectivity_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< bool > *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btAlignedObjectArray< bool > *)& ((arg1)->m_clusterConnectivity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_initialWorldTransform_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform arg2 ;
  btTransform *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_initialWorldTransform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_initialWorldTransform_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform result;
  
  arg1 = (btSoftBody *)jarg1; 
  result =  ((arg1)->m_initialWorldTransform);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_windVelocity_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 arg2 ;
  btVector3 *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_windVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_windVelocity_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 result;
  
  arg1 = (btSoftBody *)jarg1; 
  result =  ((arg1)->m_windVelocity);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_restLengthScale_set(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restLengthScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_m_restLengthScale_get(void * jarg1) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btScalar) ((arg1)->m_restLengthScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBody__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  int arg2 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btScalar *arg4 = (btScalar *) 0 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (btScalar *)jarg4; 
  result = (btSoftBody *)new btSoftBody(arg1,arg2,(btVector3 const *)arg3,(btScalar const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBody__SWIG_1(void * jarg1) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = (btSoftBodyWorldInfo *) 0 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1; 
  result = (btSoftBody *)new btSoftBody(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_initDefaults(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->initDefaults();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_GetCollisionObject(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btCollisionObject *)(arg1)->GetCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_CollisionShapeSetMargin(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->CollisionShapeSetMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBody(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_m_userIndexMapping_set(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< int > *arg2 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2; 
  if (arg1) (arg1)->m_userIndexMapping = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_m_userIndexMapping_get(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btAlignedObjectArray< int > *)& ((arg1)->m_userIndexMapping);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_getWorldInfo(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBodyWorldInfo *)(arg1)->getWorldInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setCollisionShape(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  (arg1)->setCollisionShape(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_checkLink__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((btSoftBody const *)arg1)->checkLink(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_checkLink__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  result = (bool)((btSoftBody const *)arg1)->checkLink((Node const *)arg2,(Node const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_checkFace(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((btSoftBody const *)arg1)->checkFace(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_appendMaterial(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Material *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (Material *)(arg1)->appendMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  Node *arg5 = (Node *) 0 ;
  Node *arg6 = (Node *) 0 ;
  Node *arg7 = (Node *) 0 ;
  Node *arg8 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  arg5 = (Node *)jarg5; 
  arg6 = (Node *)jarg6; 
  arg7 = (Node *)jarg7; 
  arg8 = (Node *)jarg8; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  Node *arg5 = (Node *) 0 ;
  Node *arg6 = (Node *) 0 ;
  Node *arg7 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  arg5 = (Node *)jarg5; 
  arg6 = (Node *)jarg6; 
  arg7 = (Node *)jarg7; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  Node *arg5 = (Node *) 0 ;
  Node *arg6 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  arg5 = (Node *)jarg5; 
  arg6 = (Node *)jarg6; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  Node *arg5 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  arg5 = (Node *)jarg5; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_4(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector4 *arg4 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,(btVector4 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_6(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  Node *arg4 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Node *)jarg4; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_7(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  Link *arg4 = (Link *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Link *)jarg4; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNote__SWIG_8(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  char *arg2 = (char *) 0 ;
  btVector3 *arg3 = 0 ;
  Face *arg4 = (Face *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Face *)jarg4; 
  (arg1)->appendNote((char const *)arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendNode(void * jarg1, void * jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->appendNode((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  Material *arg3 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Material *)jarg3; 
  (arg1)->appendLink(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_1(void * jarg1, int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->appendLink(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_2(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->appendLink();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  Material *arg4 = (Material *) 0 ;
  bool arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Material *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->appendLink(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_4(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  Material *arg4 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Material *)jarg4; 
  (arg1)->appendLink(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->appendLink(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  Material *arg4 = (Material *) 0 ;
  bool arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (Material *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->appendLink(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  Material *arg4 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (Material *)jarg4; 
  (arg1)->appendLink(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLink__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  (arg1)->appendLink(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendFace__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  Material *arg3 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Material *)jarg3; 
  (arg1)->appendFace(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendFace__SWIG_1(void * jarg1, int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->appendFace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendFace__SWIG_2(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->appendFace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendFace__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Material *arg5 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Material *)jarg5; 
  (arg1)->appendFace(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendFace__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->appendFace(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendTetra__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  Material *arg3 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Material *)jarg3; 
  (arg1)->appendTetra(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendTetra__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Material *arg6 = (Material *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Material *)jarg6; 
  (arg1)->appendTetra(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendTetra__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->appendTetra(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  bool arg4 ;
  btScalar arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (btScalar)jarg5; 
  (arg1)->appendAnchor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_1(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  bool arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->appendAnchor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  (arg1)->appendAnchor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_3(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5, float jarg6) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btScalar arg6 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (btScalar)jarg6; 
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_4(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAnchor__SWIG_5(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btRigidBody *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->appendAnchor(arg2,arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  LJoint::Specs *arg2 = 0 ;
  Cluster *arg3 = (Cluster *) 0 ;
  Body arg4 ;
  Body *argp4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (LJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LJoint::Specs const & type is null", 0);
    return ;
  } 
  arg3 = (Cluster *)jarg3; 
  argp4 = (Body *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Body", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->appendLinearJoint((LJoint::Specs const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  LJoint::Specs *arg2 = 0 ;
  Body arg3 ;
  Body *argp3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (LJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LJoint::Specs const & type is null", 0);
    return ;
  } 
  argp3 = (Body *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Body", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->appendLinearJoint((LJoint::Specs const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_2(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  LJoint::Specs *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (LJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LJoint::Specs const & type is null", 0);
    return ;
  } 
  (arg1)->appendLinearJoint((LJoint::Specs const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  LJoint::Specs *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (LJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LJoint::Specs const & type is null", 0);
    return ;
  } 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->appendLinearJoint((LJoint::Specs const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->appendLinearJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btRigidBody *)jarg3; 
  (arg1)->appendLinearJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendLinearJoint__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  Cluster *arg3 = (Cluster *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Cluster *)jarg3; 
  (arg1)->appendLinearJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  AJoint::Specs *arg2 = 0 ;
  Cluster *arg3 = (Cluster *) 0 ;
  Body arg4 ;
  Body *argp4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (AJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AJoint::Specs const & type is null", 0);
    return ;
  } 
  arg3 = (Cluster *)jarg3; 
  argp4 = (Body *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Body", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->appendAngularJoint((AJoint::Specs const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  AJoint::Specs *arg2 = 0 ;
  Body arg3 ;
  Body *argp3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (AJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AJoint::Specs const & type is null", 0);
    return ;
  } 
  argp3 = (Body *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Body", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->appendAngularJoint((AJoint::Specs const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_2(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  AJoint::Specs *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (AJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AJoint::Specs const & type is null", 0);
    return ;
  } 
  (arg1)->appendAngularJoint((AJoint::Specs const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  AJoint::Specs *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (AJoint::Specs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AJoint::Specs const & type is null", 0);
    return ;
  } 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->appendAngularJoint((AJoint::Specs const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->appendAngularJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btRigidBody *arg3 = (btRigidBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btRigidBody *)jarg3; 
  (arg1)->appendAngularJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_appendAngularJoint__SWIG_6(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  Cluster *arg3 = (Cluster *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Cluster *)jarg3; 
  (arg1)->appendAngularJoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addForce__SWIG_0(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addForce((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addForce__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addForce((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addAeroForceToNode(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addAeroForceToNode((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addAeroForceToFace(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addAeroForceToFace((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addVelocity__SWIG_0(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setVelocity(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_addVelocity__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addVelocity((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setMass(void * jarg1, int jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setMass(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_getMass(void * jarg1, int jarg2) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btSoftBody const *)arg1)->getMass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_getTotalMass(void * jarg1) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btScalar)((btSoftBody const *)arg1)->getTotalMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setTotalMass__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  bool arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTotalMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setTotalMass__SWIG_1(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTotalMass(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setTotalDensity(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTotalDensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setVolumeMass(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setVolumeMass(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setVolumeDensity(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setVolumeDensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_transform(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->transform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_translate(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_rotate(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->rotate((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_scale(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((btVector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_getRestLengthScale(void * jarg1) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btScalar)(arg1)->getRestLengthScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setRestLengthScale(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestLengthScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setPose(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setPose(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_resetLinkRestLengths(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->resetLinkRestLengths();
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBody_getVolume(void * jarg1) {
  float jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btScalar)((btSoftBody const *)arg1)->getVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_clusterCount(void * jarg1) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (int)((btSoftBody const *)arg1)->clusterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_clusterCom__SWIG_0(void * jarg1) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 result;
  
  arg1 = (Cluster *)jarg1; 
  result = btSoftBody::clusterCom((Cluster const *)arg1);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_clusterCom__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btSoftBody const *)arg1)->clusterCom(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_clusterVelocity(void * jarg1, void * jarg2) {
  void * jresult ;
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btSoftBody::clusterVelocity((Cluster const *)arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterVImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterVImpulse(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterDImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterDImpulse(arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterImpulse(void * jarg1, void * jarg2, void * jarg3) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  Impulse *arg3 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Impulse *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Impulse const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterImpulse(arg1,(btVector3 const &)*arg2,(Impulse const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterVAImpulse(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterVAImpulse(arg1,(btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterDAImpulse(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterDAImpulse(arg1,(btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterAImpulse(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  Impulse *arg2 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (Impulse *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Impulse const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterAImpulse(arg1,(Impulse const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_clusterDCImpulse(void * jarg1, void * jarg2) {
  Cluster *arg1 = (Cluster *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (Cluster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  btSoftBody::clusterDCImpulse(arg1,(btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_generateBendingConstraints__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  Material *arg3 = (Material *) 0 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Material *)jarg3; 
  result = (int)(arg1)->generateBendingConstraints(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_generateBendingConstraints__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->generateBendingConstraints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_randomizeConstraints(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->randomizeConstraints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_releaseCluster(void * jarg1, int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->releaseCluster(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_releaseClusters(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->releaseClusters();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_generateClusters__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->generateClusters(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_generateClusters__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->generateClusters(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_refine(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::ImplicitFn *arg2 = (btSoftBody::ImplicitFn *) 0 ;
  btScalar arg3 ;
  bool arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody::ImplicitFn *)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->refine(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_cutLink__SWIG_0(void * jarg1, int jarg2, int jarg3, float jarg4) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar arg4 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (bool)(arg1)->cutLink(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_cutLink__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Node *arg2 = (Node *) 0 ;
  Node *arg3 = (Node *) 0 ;
  btScalar arg4 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (Node *)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (bool)(arg1)->cutLink((Node const *)arg2,(Node const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btSoftBody::sRayCast *arg4 = 0 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btSoftBody::sRayCast *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBody::sRayCast & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setSolver(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody::eSolverPresets::_ arg2 ;
  btSoftBody::eSolverPresets::_ *argp2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  argp2 = (btSoftBody::eSolverPresets::_ *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btSoftBody::eSolverPresets::_", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSolver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_predictMotion(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->predictMotion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_solveConstraints(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->solveConstraints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_staticSolve(void * jarg1, int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->staticSolve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_solveCommonConstraints(void * jarg1, int jarg2, int jarg3) {
  btSoftBody **arg1 = (btSoftBody **) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btSoftBody **)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  btSoftBody::solveCommonConstraints(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_solveClusters__SWIG_0(void * jarg1) {
  btAlignedObjectArray< btSoftBody * > *arg1 = 0 ;
  
  arg1 = (btAlignedObjectArray< btSoftBody * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btSoftBody * > const & type is null", 0);
    return ;
  } 
  btSoftBody::solveClusters((btAlignedObjectArray< btSoftBody * > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_integrateMotion(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->integrateMotion();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_defaultCollisionHandler__SWIG_0(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  (arg1)->defaultCollisionHandler((btCollisionObjectWrapper const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_defaultCollisionHandler__SWIG_1(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  (arg1)->defaultCollisionHandler(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_GetNodeIndexFromFace(void * jarg1, void * jarg2) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  Face *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetNodeIndexFromFace(*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setWindVelocity(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setWindVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_getWindVelocity(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btVector3 *) &(arg1)->getWindVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_setSoftBodySolver(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *arg2 = (btSoftBodySolver *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btSoftBodySolver *)jarg2; 
  (arg1)->setSoftBodySolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_getSoftBodySolver__SWIG_0(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btSoftBodySolver *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (btSoftBodySolver *)(arg1)->getSoftBodySolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_upcast__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btSoftBody *)btSoftBody::upcast((btCollisionObject const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_getAabb(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSoftBody const *)arg1)->getAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_pointersToIndices(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->pointersToIndices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_indicesToPointers__SWIG_0(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->indicesToPointers((int const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_indicesToPointers__SWIG_1(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->indicesToPointers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btSoftBody::eFeature::_ *arg5 = 0 ;
  int *arg6 = 0 ;
  bool arg7 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  arg5 = (btSoftBody::eFeature::_ *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBody::eFeature::_ & type is null", 0);
    return 0;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return 0;
  } 
  arg7 = jarg7 ? true : false; 
  result = (int)((btSoftBody const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_initializeFaceTree(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->initializeFaceTree();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_evaluateCom(void * jarg1) {
  void * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btVector3 result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = ((btSoftBody const *)arg1)->evaluateCom();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBody_checkContact(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btSoftBody::sCti *arg5 = 0 ;
  bool result;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (btSoftBody::sCti *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBody::sCti & type is null", 0);
    return 0;
  } 
  result = (bool)((btSoftBody const *)arg1)->checkContact((btCollisionObjectWrapper const *)arg2,(btVector3 const &)*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateNormals(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateBounds(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateBounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updatePose(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updatePose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateConstants(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateConstants();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateLinkConstants(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateLinkConstants();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateArea__SWIG_0(void * jarg1, unsigned int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->updateArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateArea__SWIG_1(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateArea();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_initializeClusters(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->initializeClusters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_updateClusters(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->updateClusters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_cleanupClusters(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->cleanupClusters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_prepareClusters(void * jarg1, int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->prepareClusters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_solveClusters__SWIG_1(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->solveClusters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_applyClusters(void * jarg1, unsigned int jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  bool arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->applyClusters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_dampClusters(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->dampClusters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_applyForces(void * jarg1) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  (arg1)->applyForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_PSolve_Anchors(void * jarg1, float jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  btSoftBody::PSolve_Anchors(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_PSolve_RContacts(void * jarg1, float jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  btSoftBody::PSolve_RContacts(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_PSolve_SContacts(void * jarg1, float jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  btSoftBody::PSolve_SContacts(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_PSolve_Links(void * jarg1, float jarg2, float jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  btSoftBody::PSolve_Links(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBody_VSolve_Links(void * jarg1, float jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  btSoftBody::VSolve_Links(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_getSolver__SWIG_0(int jarg1) {
  void * jresult ;
  ePSolver::_ arg1 ;
  btSoftBody::psolver_t result;
  
  arg1 = (ePSolver::_)jarg1; 
  result = (btSoftBody::psolver_t)btSoftBody::getSolver(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBody_getSolver__SWIG_1(int jarg1) {
  void * jresult ;
  eVSolver::_ arg1 ;
  btSoftBody::vsolver_t result;
  
  arg1 = (eVSolver::_)jarg1; 
  result = (btSoftBody::vsolver_t)btSoftBody::getSolver(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBody_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  int result;
  
  arg1 = (btSoftBody *)jarg1; 
  result = (int)((btSoftBody const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSoftBody_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btSoftBody const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyMaterialData_m_linearStiffness_set(void * jarg1, float jarg2) {
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyMaterialData_m_linearStiffness_get(void * jarg1) {
  float jresult ;
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float result;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  result = (float) ((arg1)->m_linearStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyMaterialData_m_angularStiffness_set(void * jarg1, float jarg2) {
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyMaterialData_m_angularStiffness_get(void * jarg1) {
  float jresult ;
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float result;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  result = (float) ((arg1)->m_angularStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyMaterialData_m_volumeStiffness_set(void * jarg1, float jarg2) {
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_volumeStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyMaterialData_m_volumeStiffness_get(void * jarg1) {
  float jresult ;
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  float result;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  result = (float) ((arg1)->m_volumeStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyMaterialData_m_flags_set(void * jarg1, int jarg2) {
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyMaterialData_m_flags_get(void * jarg1) {
  int jresult ;
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  int result;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyMaterialData() {
  void * jresult ;
  SoftBodyMaterialData *result = 0 ;
  
  result = (SoftBodyMaterialData *)new SoftBodyMaterialData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyMaterialData(void * jarg1) {
  SoftBodyMaterialData *arg1 = (SoftBodyMaterialData *) 0 ;
  
  arg1 = (SoftBodyMaterialData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_material_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  SoftBodyMaterialData *arg2 = (SoftBodyMaterialData *) 0 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  arg2 = (SoftBodyMaterialData *)jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_material_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  SoftBodyMaterialData *result = 0 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result = (SoftBodyMaterialData *) ((arg1)->m_material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_position_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_position = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_position_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result =  ((arg1)->m_position);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_previousPosition_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_previousPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_previousPosition_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result =  ((arg1)->m_previousPosition);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_velocity_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_velocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_velocity_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result =  ((arg1)->m_velocity);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_accumulatedForce_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_accumulatedForce = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_accumulatedForce_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result =  ((arg1)->m_accumulatedForce);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_normal_set(void * jarg1, void * jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyNodeData_m_normal_get(void * jarg1) {
  void * jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result =  ((arg1)->m_normal);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_inverseMass_set(void * jarg1, float jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyNodeData_m_inverseMass_get(void * jarg1) {
  float jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  float result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_area_set(void * jarg1, float jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_area = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyNodeData_m_area_get(void * jarg1) {
  float jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  float result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result = (float) ((arg1)->m_area);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_attach_set(void * jarg1, int jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_attach = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyNodeData_m_attach_get(void * jarg1) {
  int jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  int result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result = (int) ((arg1)->m_attach);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyNodeData_m_pad_set(void * jarg1, int jarg2) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyNodeData_m_pad_get(void * jarg1) {
  int jresult ;
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  int result;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyNodeData() {
  void * jresult ;
  SoftBodyNodeData *result = 0 ;
  
  result = (SoftBodyNodeData *)new SoftBodyNodeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyNodeData(void * jarg1) {
  SoftBodyNodeData *arg1 = (SoftBodyNodeData *) 0 ;
  
  arg1 = (SoftBodyNodeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyLinkData_m_material_set(void * jarg1, void * jarg2) {
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  SoftBodyMaterialData *arg2 = (SoftBodyMaterialData *) 0 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  arg2 = (SoftBodyMaterialData *)jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyLinkData_m_material_get(void * jarg1) {
  void * jresult ;
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  SoftBodyMaterialData *result = 0 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  result = (SoftBodyMaterialData *) ((arg1)->m_material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyLinkData_m_nodeIndices_set(void * jarg1, void * jarg2) {
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  int *arg2 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyLinkData_m_nodeIndices_get(void * jarg1) {
  void * jresult ;
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  int *result = 0 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyLinkData_m_restLength_set(void * jarg1, float jarg2) {
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyLinkData_m_restLength_get(void * jarg1) {
  float jresult ;
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  float result;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  result = (float) ((arg1)->m_restLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyLinkData_m_bbending_set(void * jarg1, int jarg2) {
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bbending = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyLinkData_m_bbending_get(void * jarg1) {
  int jresult ;
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  int result;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  result = (int) ((arg1)->m_bbending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyLinkData() {
  void * jresult ;
  SoftBodyLinkData *result = 0 ;
  
  result = (SoftBodyLinkData *)new SoftBodyLinkData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyLinkData(void * jarg1) {
  SoftBodyLinkData *arg1 = (SoftBodyLinkData *) 0 ;
  
  arg1 = (SoftBodyLinkData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyFaceData_m_normal_set(void * jarg1, void * jarg2) {
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyFaceData_m_normal_get(void * jarg1) {
  void * jresult ;
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  result =  ((arg1)->m_normal);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyFaceData_m_material_set(void * jarg1, void * jarg2) {
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  SoftBodyMaterialData *arg2 = (SoftBodyMaterialData *) 0 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  arg2 = (SoftBodyMaterialData *)jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyFaceData_m_material_get(void * jarg1) {
  void * jresult ;
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  SoftBodyMaterialData *result = 0 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  result = (SoftBodyMaterialData *) ((arg1)->m_material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyFaceData_m_nodeIndices_set(void * jarg1, void * jarg2) {
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  int *arg2 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyFaceData_m_nodeIndices_get(void * jarg1) {
  void * jresult ;
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  int *result = 0 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyFaceData_m_restArea_set(void * jarg1, float jarg2) {
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restArea = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyFaceData_m_restArea_get(void * jarg1) {
  float jresult ;
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  float result;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  result = (float) ((arg1)->m_restArea);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyFaceData() {
  void * jresult ;
  SoftBodyFaceData *result = 0 ;
  
  result = (SoftBodyFaceData *)new SoftBodyFaceData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyFaceData(void * jarg1) {
  SoftBodyFaceData *arg1 = (SoftBodyFaceData *) 0 ;
  
  arg1 = (SoftBodyFaceData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_c0_set(void * jarg1, void * jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_c0;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyTetraData_m_c0_get(void * jarg1) {
  void * jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_c0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_material_set(void * jarg1, void * jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  SoftBodyMaterialData *arg2 = (SoftBodyMaterialData *) 0 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (SoftBodyMaterialData *)jarg2; 
  if (arg1) (arg1)->m_material = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyTetraData_m_material_get(void * jarg1) {
  void * jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  SoftBodyMaterialData *result = 0 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (SoftBodyMaterialData *) ((arg1)->m_material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_nodeIndices_set(void * jarg1, void * jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  int *arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_nodeIndices;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyTetraData_m_nodeIndices_get(void * jarg1) {
  void * jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  int *result = 0 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (int *)(int *) ((arg1)->m_nodeIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_restVolume_set(void * jarg1, float jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restVolume = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyTetraData_m_restVolume_get(void * jarg1) {
  float jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float result;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (float) ((arg1)->m_restVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_c1_set(void * jarg1, float jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyTetraData_m_c1_get(void * jarg1) {
  float jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float result;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (float) ((arg1)->m_c1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_c2_set(void * jarg1, float jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyTetraData_m_c2_get(void * jarg1) {
  float jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  float result;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (float) ((arg1)->m_c2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyTetraData_m_pad_set(void * jarg1, int jarg2) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyTetraData_m_pad_get(void * jarg1) {
  int jresult ;
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  int result;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyTetraData() {
  void * jresult ;
  SoftBodyTetraData *result = 0 ;
  
  result = (SoftBodyTetraData *)new SoftBodyTetraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyTetraData(void * jarg1) {
  SoftBodyTetraData *arg1 = (SoftBodyTetraData *) 0 ;
  
  arg1 = (SoftBodyTetraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c0_set(void * jarg1, void * jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_c0 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c0_get(void * jarg1) {
  void * jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result =  ((arg1)->m_c0);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c1_set(void * jarg1, void * jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_c1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c1_get(void * jarg1) {
  void * jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result =  ((arg1)->m_c1);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_localFrame_set(void * jarg1, void * jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_localFrame = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftRigidAnchorData_m_localFrame_get(void * jarg1) {
  void * jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result =  ((arg1)->m_localFrame);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_rigidBody_set(void * jarg1, void * jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btRigidBodyData *arg2 = (btRigidBodyData *) 0 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  arg2 = (btRigidBodyData *)jarg2; 
  if (arg1) (arg1)->m_rigidBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftRigidAnchorData_m_rigidBody_get(void * jarg1) {
  void * jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  btRigidBodyData *result = 0 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result = (btRigidBodyData *) ((arg1)->m_rigidBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_nodeIndex_set(void * jarg1, int jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nodeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftRigidAnchorData_m_nodeIndex_get(void * jarg1) {
  int jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  int result;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result = (int) ((arg1)->m_nodeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c2_set(void * jarg1, float jarg2) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_c2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftRigidAnchorData_m_c2_get(void * jarg1) {
  float jresult ;
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  float result;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  result = (float) ((arg1)->m_c2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftRigidAnchorData() {
  void * jresult ;
  SoftRigidAnchorData *result = 0 ;
  
  result = (SoftRigidAnchorData *)new SoftRigidAnchorData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftRigidAnchorData(void * jarg1) {
  SoftRigidAnchorData *arg1 = (SoftRigidAnchorData *) 0 ;
  
  arg1 = (SoftRigidAnchorData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_aeroModel_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_aeroModel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_aeroModel_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_aeroModel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_baumgarte_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_baumgarte = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_baumgarte_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_baumgarte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_damping_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_damping_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_drag_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_drag = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_drag_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_drag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_lift_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lift = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_lift_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_lift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_pressure_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_pressure = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_pressure_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_pressure);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_volume_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_volume = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_volume_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_dynamicFriction_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dynamicFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_dynamicFriction_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_dynamicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_poseMatch_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_poseMatch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_poseMatch_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_poseMatch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_rigidContactHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rigidContactHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_rigidContactHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_rigidContactHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_kineticContactHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_kineticContactHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_kineticContactHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_kineticContactHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softContactHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softContactHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softContactHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softContactHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_anchorHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_anchorHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_anchorHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_anchorHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softRigidClusterHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softRigidClusterHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softRigidClusterHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softRigidClusterHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softKineticClusterHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softKineticClusterHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softKineticClusterHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softKineticClusterHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softSoftClusterHardness_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softSoftClusterHardness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softSoftClusterHardness_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softSoftClusterHardness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softRigidClusterImpulseSplit_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softRigidClusterImpulseSplit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softRigidClusterImpulseSplit_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softRigidClusterImpulseSplit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softKineticClusterImpulseSplit_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softKineticClusterImpulseSplit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softKineticClusterImpulseSplit_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softKineticClusterImpulseSplit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_softSoftClusterImpulseSplit_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_softSoftClusterImpulseSplit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_softSoftClusterImpulseSplit_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_softSoftClusterImpulseSplit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_maxVolume_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxVolume = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_maxVolume_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_maxVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_timeScale_set(void * jarg1, float jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timeScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyConfigData_m_timeScale_get(void * jarg1) {
  float jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  float result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (float) ((arg1)->m_timeScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_velocityIterations_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_velocityIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_velocityIterations_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_velocityIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_positionIterations_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_positionIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_positionIterations_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_positionIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_driftIterations_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_driftIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_driftIterations_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_driftIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_clusterIterations_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_clusterIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_clusterIterations_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_clusterIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyConfigData_m_collisionFlags_set(void * jarg1, int jarg2) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyConfigData_m_collisionFlags_get(void * jarg1) {
  int jresult ;
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  int result;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyConfigData() {
  void * jresult ;
  SoftBodyConfigData *result = 0 ;
  
  result = (SoftBodyConfigData *)new SoftBodyConfigData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyConfigData(void * jarg1) {
  SoftBodyConfigData *arg1 = (SoftBodyConfigData *) 0 ;
  
  arg1 = (SoftBodyConfigData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_rot_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_rot = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_rot_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result =  ((arg1)->m_rot);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_scale_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_scale_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result =  ((arg1)->m_scale);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_aqq_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_aqq = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_aqq_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result =  ((arg1)->m_aqq);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_com_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_com = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_com_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result =  ((arg1)->m_com);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_positions_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_positions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_positions_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (btVector3FloatData *) ((arg1)->m_positions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_weights_set(void * jarg1, void * jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_weights = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyPoseData_m_weights_get(void * jarg1) {
  void * jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  float *result = 0 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (float *) ((arg1)->m_weights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_numPositions_set(void * jarg1, int jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numPositions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyPoseData_m_numPositions_get(void * jarg1) {
  int jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (int) ((arg1)->m_numPositions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_numWeigts_set(void * jarg1, int jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numWeigts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyPoseData_m_numWeigts_get(void * jarg1) {
  int jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (int) ((arg1)->m_numWeigts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_bvolume_set(void * jarg1, int jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bvolume = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyPoseData_m_bvolume_get(void * jarg1) {
  int jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (int) ((arg1)->m_bvolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_bframe_set(void * jarg1, int jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bframe = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyPoseData_m_bframe_get(void * jarg1) {
  int jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (int) ((arg1)->m_bframe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_restVolume_set(void * jarg1, float jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restVolume = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyPoseData_m_restVolume_get(void * jarg1) {
  float jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  float result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (float) ((arg1)->m_restVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyPoseData_m_pad_set(void * jarg1, int jarg2) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyPoseData_m_pad_get(void * jarg1) {
  int jresult ;
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  int result;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyPoseData() {
  void * jresult ;
  SoftBodyPoseData *result = 0 ;
  
  result = (SoftBodyPoseData *)new SoftBodyPoseData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyPoseData(void * jarg1) {
  SoftBodyPoseData *arg1 = (SoftBodyPoseData *) 0 ;
  
  arg1 = (SoftBodyPoseData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_framexform_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btTransformFloatData arg2 ;
  btTransformFloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btTransformFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btTransformFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_framexform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_framexform_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btTransformFloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_framexform);
  jresult = new btTransformFloatData((const btTransformFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_locii_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_locii = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_locii_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_locii);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_invwi_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btMatrix3x3FloatData arg2 ;
  btMatrix3x3FloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btMatrix3x3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btMatrix3x3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_invwi = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_invwi_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btMatrix3x3FloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_invwi);
  jresult = new btMatrix3x3FloatData((const btMatrix3x3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_com_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_com = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_com_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_com);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_vimpulses_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_vimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_vimpulses_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_vimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_dimpulses_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_dimpulses;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_dimpulses_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_dimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_lv_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_lv = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_lv_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_lv);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_av_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData arg2 ;
  btVector3FloatData *argp2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  argp2 = (btVector3FloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btVector3FloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_av = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_av_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result =  ((arg1)->m_av);
  jresult = new btVector3FloatData((const btVector3FloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_framerefs_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_framerefs = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_framerefs_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (btVector3FloatData *) ((arg1)->m_framerefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_nodeIndices_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_nodeIndices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_nodeIndices_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int *result = 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int *) ((arg1)->m_nodeIndices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_masses_set(void * jarg1, void * jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->m_masses = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoftBodyClusterData_m_masses_get(void * jarg1) {
  void * jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float *result = 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float *) ((arg1)->m_masses);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_numFrameRefs_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numFrameRefs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_numFrameRefs_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_numFrameRefs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_numNodes_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_numNodes_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_numNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_numMasses_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMasses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_numMasses_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_numMasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_idmass_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_idmass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_idmass_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_idmass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_imass_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_imass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_imass_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_imass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_nvimpulses_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nvimpulses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_nvimpulses_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_nvimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_ndimpulses_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_ndimpulses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_ndimpulses_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_ndimpulses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_ndamping_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ndamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_ndamping_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_ndamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_ldamping_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ldamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_ldamping_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_ldamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_adamping_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_adamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_adamping_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_adamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_matching_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_matching = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_matching_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_matching);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_maxSelfCollisionImpulse_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxSelfCollisionImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_maxSelfCollisionImpulse_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_maxSelfCollisionImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_selfCollisionImpulseFactor_set(void * jarg1, float jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_selfCollisionImpulseFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoftBodyClusterData_m_selfCollisionImpulseFactor_get(void * jarg1) {
  float jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  float result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (float) ((arg1)->m_selfCollisionImpulseFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_containsAnchor_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_containsAnchor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_containsAnchor_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_containsAnchor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_collide_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collide = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_collide_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_collide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoftBodyClusterData_m_clusterIndex_set(void * jarg1, int jarg2) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int arg2 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_clusterIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoftBodyClusterData_m_clusterIndex_get(void * jarg1) {
  int jresult ;
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  int result;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  result = (int) ((arg1)->m_clusterIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoftBodyClusterData() {
  void * jresult ;
  SoftBodyClusterData *result = 0 ;
  
  result = (SoftBodyClusterData *)new SoftBodyClusterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoftBodyClusterData(void * jarg1) {
  SoftBodyClusterData *arg1 = (SoftBodyClusterData *) 0 ;
  
  arg1 = (SoftBodyClusterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyA_set(void * jarg1, void * jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_bodyA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyA_get(void * jarg1) {
  void * jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (void *) ((arg1)->m_bodyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyB_set(void * jarg1, void * jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_bodyB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyB_get(void * jarg1) {
  void * jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (void *) ((arg1)->m_bodyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_refs_set(void * jarg1, void * jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_refs;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyJointData_m_refs_get(void * jarg1) {
  void * jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_refs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_cfm_set(void * jarg1, float jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_cfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyJointData_m_cfm_get(void * jarg1) {
  float jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (float) ((arg1)->m_cfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_erp_set(void * jarg1, float jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyJointData_m_erp_get(void * jarg1) {
  float jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (float) ((arg1)->m_erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_split_set(void * jarg1, float jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_split = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyJointData_m_split_get(void * jarg1) {
  float jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  float result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (float) ((arg1)->m_split);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_delete_set(void * jarg1, int jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_delete = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyJointData_m_delete_get(void * jarg1) {
  int jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (int) ((arg1)->m_delete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_relPosition_set(void * jarg1, void * jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_relPosition;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyJointData_m_relPosition_get(void * jarg1) {
  void * jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_relPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyAtype_set(void * jarg1, int jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bodyAtype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyAtype_get(void * jarg1) {
  int jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (int) ((arg1)->m_bodyAtype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyBtype_set(void * jarg1, int jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_bodyBtype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyJointData_m_bodyBtype_get(void * jarg1) {
  int jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (int) ((arg1)->m_bodyBtype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_jointType_set(void * jarg1, int jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_jointType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyJointData_m_jointType_get(void * jarg1) {
  int jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (int) ((arg1)->m_jointType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyJointData_m_pad_set(void * jarg1, int jarg2) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyJointData_m_pad_get(void * jarg1) {
  int jresult ;
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  result = (int) ((arg1)->m_pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyJointData() {
  void * jresult ;
  btSoftBodyJointData *result = 0 ;
  
  result = (btSoftBodyJointData *)new btSoftBodyJointData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyJointData(void * jarg1) {
  btSoftBodyJointData *arg1 = (btSoftBodyJointData *) 0 ;
  
  arg1 = (btSoftBodyJointData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_collisionObjectData_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  btCollisionObjectFloatData arg2 ;
  btCollisionObjectFloatData *argp2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  argp2 = (btCollisionObjectFloatData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null btCollisionObjectFloatData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_collisionObjectData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_collisionObjectData_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  btCollisionObjectFloatData result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result =  ((arg1)->m_collisionObjectData);
  jresult = new btCollisionObjectFloatData((const btCollisionObjectFloatData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_pose_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyPoseData *arg2 = (SoftBodyPoseData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyPoseData *)jarg2; 
  if (arg1) (arg1)->m_pose = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_pose_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyPoseData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyPoseData *) ((arg1)->m_pose);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_materials_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyMaterialData **arg2 = (SoftBodyMaterialData **) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyMaterialData **)jarg2; 
  if (arg1) (arg1)->m_materials = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_materials_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyMaterialData **result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyMaterialData **) ((arg1)->m_materials);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_nodes_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyNodeData *arg2 = (SoftBodyNodeData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyNodeData *)jarg2; 
  if (arg1) (arg1)->m_nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_nodes_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyNodeData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyNodeData *) ((arg1)->m_nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_links_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyLinkData *arg2 = (SoftBodyLinkData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyLinkData *)jarg2; 
  if (arg1) (arg1)->m_links = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_links_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyLinkData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyLinkData *) ((arg1)->m_links);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_faces_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyFaceData *arg2 = (SoftBodyFaceData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyFaceData *)jarg2; 
  if (arg1) (arg1)->m_faces = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_faces_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyFaceData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyFaceData *) ((arg1)->m_faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_tetrahedra_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyTetraData *arg2 = (SoftBodyTetraData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyTetraData *)jarg2; 
  if (arg1) (arg1)->m_tetrahedra = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_tetrahedra_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyTetraData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyTetraData *) ((arg1)->m_tetrahedra);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_anchors_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftRigidAnchorData *arg2 = (SoftRigidAnchorData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftRigidAnchorData *)jarg2; 
  if (arg1) (arg1)->m_anchors = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_anchors_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftRigidAnchorData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftRigidAnchorData *) ((arg1)->m_anchors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_clusters_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyClusterData *arg2 = (SoftBodyClusterData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyClusterData *)jarg2; 
  if (arg1) (arg1)->m_clusters = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_clusters_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyClusterData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyClusterData *) ((arg1)->m_clusters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_joints_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  btSoftBodyJointData *arg2 = (btSoftBodyJointData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (btSoftBodyJointData *)jarg2; 
  if (arg1) (arg1)->m_joints = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_joints_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  btSoftBodyJointData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (btSoftBodyJointData *) ((arg1)->m_joints);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numMaterials_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMaterials = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numMaterials_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numMaterials);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numNodes_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numNodes_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numLinks_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numLinks = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numLinks_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numLinks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numFaces_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numFaces = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numFaces_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numTetrahedra_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTetrahedra = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numTetrahedra_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numTetrahedra);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numAnchors_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numAnchors = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numAnchors_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numAnchors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numClusters_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numClusters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numClusters_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numClusters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numJoints_set(void * jarg1, int jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numJoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyFloatData_m_numJoints_get(void * jarg1) {
  int jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_numJoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyFloatData_m_config_set(void * jarg1, void * jarg2) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyConfigData *arg2 = (SoftBodyConfigData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  arg2 = (SoftBodyConfigData *)jarg2; 
  if (arg1) (arg1)->m_config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyFloatData_m_config_get(void * jarg1) {
  void * jresult ;
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  SoftBodyConfigData *result = 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  result = (SoftBodyConfigData *)& ((arg1)->m_config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyFloatData() {
  void * jresult ;
  btSoftBodyFloatData *result = 0 ;
  
  result = (btSoftBodyFloatData *)new btSoftBodyFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyFloatData(void * jarg1) {
  btSoftBodyFloatData *arg1 = (btSoftBodyFloatData *) 0 ;
  
  arg1 = (btSoftBodyFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriIndex_m_PartIdTriangleIndex_set(void * jarg1, int jarg2) {
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  int arg2 ;
  
  arg1 = (btTriIndex *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_PartIdTriangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriIndex_m_PartIdTriangleIndex_get(void * jarg1) {
  int jresult ;
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  int result;
  
  arg1 = (btTriIndex *)jarg1; 
  result = (int) ((arg1)->m_PartIdTriangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriIndex_m_childShape_set(void * jarg1, void * jarg2) {
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btTriIndex *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriIndex_m_childShape_get(void * jarg1) {
  void * jresult ;
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btTriIndex *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_childShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriIndex(int jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btTriIndex *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  result = (btTriIndex *)new btTriIndex(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriIndex_getTriangleIndex(void * jarg1) {
  int jresult ;
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  int result;
  
  arg1 = (btTriIndex *)jarg1; 
  result = (int)((btTriIndex const *)arg1)->getTriangleIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriIndex_getPartId(void * jarg1) {
  int jresult ;
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  int result;
  
  arg1 = (btTriIndex *)jarg1; 
  result = (int)((btTriIndex const *)arg1)->getPartId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriIndex_getUid(void * jarg1) {
  int jresult ;
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  int result;
  
  arg1 = (btTriIndex *)jarg1; 
  result = (int)((btTriIndex const *)arg1)->getUid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriIndex(void * jarg1) {
  btTriIndex *arg1 = (btTriIndex *) 0 ;
  
  arg1 = (btTriIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_m_triangleCount_set(void * jarg1, int jarg2) {
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_m_triangleCount_get(void * jarg1) {
  int jresult ;
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  int result;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  result = (int) ((arg1)->m_triangleCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyTriangleCallback(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  bool arg4 ;
  btSoftBodyTriangleCallback *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (btSoftBodyTriangleCallback *)new btSoftBodyTriangleCallback(arg1,(btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_setTimeStepAndCounters(void * jarg1, float jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  btScalar arg2 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->setTimeStepAndCounters(arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyTriangleCallback(void * jarg1) {
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_processTriangle(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->processTriangle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_clearCache(void * jarg1) {
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  (arg1)->clearCache();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_getAabbMin(void * jarg1) {
  void * jresult ;
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  result = (btVector3 *) &((btSoftBodyTriangleCallback const *)arg1)->getAabbMin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyTriangleCallback_getAabbMax(void * jarg1) {
  void * jresult ;
  btSoftBodyTriangleCallback *arg1 = (btSoftBodyTriangleCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSoftBodyTriangleCallback *)jarg1; 
  result = (btVector3 *) &((btSoftBodyTriangleCallback const *)arg1)->getAabbMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyConcaveCollisionAlgorithm(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  bool arg4 ;
  btSoftBodyConcaveCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (btSoftBodyConcaveCollisionAlgorithm *)new btSoftBodyConcaveCollisionAlgorithm((btCollisionAlgorithmConstructionInfo const &)*arg1,(btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyConcaveCollisionAlgorithm(void * jarg1) {
  btSoftBodyConcaveCollisionAlgorithm *arg1 = (btSoftBodyConcaveCollisionAlgorithm *) 0 ;
  
  arg1 = (btSoftBodyConcaveCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyConcaveCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSoftBodyConcaveCollisionAlgorithm *arg1 = (btSoftBodyConcaveCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSoftBodyConcaveCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyConcaveCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btSoftBodyConcaveCollisionAlgorithm *arg1 = (btSoftBodyConcaveCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btSoftBodyConcaveCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyConcaveCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btSoftBodyConcaveCollisionAlgorithm *arg1 = (btSoftBodyConcaveCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btSoftBodyConcaveCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyConcaveCollisionAlgorithm_clearCache(void * jarg1) {
  btSoftBodyConcaveCollisionAlgorithm *arg1 = (btSoftBodyConcaveCollisionAlgorithm *) 0 ;
  
  arg1 = (btSoftBodyConcaveCollisionAlgorithm *)jarg1; 
  (arg1)->clearCache();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_fDrawFlags() {
  void * jresult ;
  fDrawFlags *result = 0 ;
  
  result = (fDrawFlags *)new fDrawFlags();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_fDrawFlags(void * jarg1) {
  fDrawFlags *arg1 = (fDrawFlags *) 0 ;
  
  arg1 = (fDrawFlags *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_Draw__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  btSoftBodyHelpers::Draw(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_Draw__SWIG_1(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  btSoftBodyHelpers::Draw(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawInfos(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  btSoftBodyHelpers::DrawInfos(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawNodeTree__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  btSoftBodyHelpers::DrawNodeTree(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawNodeTree__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  btSoftBodyHelpers::DrawNodeTree(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawNodeTree__SWIG_2(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  btSoftBodyHelpers::DrawNodeTree(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawFaceTree__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  btSoftBodyHelpers::DrawFaceTree(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawFaceTree__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  btSoftBodyHelpers::DrawFaceTree(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawFaceTree__SWIG_2(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  btSoftBodyHelpers::DrawFaceTree(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawClusterTree__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  btSoftBodyHelpers::DrawClusterTree(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawClusterTree__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  int arg3 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  arg3 = (int)jarg3; 
  btSoftBodyHelpers::DrawClusterTree(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawClusterTree__SWIG_2(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  btSoftBodyHelpers::DrawClusterTree(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodyHelpers_DrawFrame(void * jarg1, void * jarg2) {
  btSoftBody *arg1 = (btSoftBody *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btSoftBody *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  btSoftBodyHelpers::DrawFrame(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateRope(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateRope(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreatePatch(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, int jarg8, unsigned int jarg9) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreatePatch(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreatePatchUV__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, int jarg8, unsigned int jarg9, void * jarg10) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  float *arg10 = (float *) 0 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (float *)jarg10; 
  result = (btSoftBody *)btSoftBodyHelpers::CreatePatchUV(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreatePatchUV__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6, int jarg7, int jarg8, unsigned int jarg9) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool arg9 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreatePatchUV(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodyHelpers_CalculateUV(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  float jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (float)btSoftBodyHelpers::CalculateUV(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateEllipsoid(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateEllipsoid(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromTriMesh__SWIG_0(void * jarg1, float* jarg2, int* jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  bool arg5 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromTriMesh(*arg1,(float const *)arg2,(int const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromTriMesh__SWIG_1(void * jarg1, float* jarg2, int* jarg3, int jarg4) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = jarg2;
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromTriMesh(*arg1,(float const *)arg2,(int const *)arg3,arg4);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromConvexHull__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  bool arg4 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromConvexHull(*arg1,(btVector3 const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromConvexHull__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromConvexHull(*arg1,(btVector3 const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromConvexHull__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btSoftBodyHelpers::tVector3Array *arg2 = 0 ;
  bool arg3 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btSoftBodyHelpers::tVector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyHelpers::tVector3Array & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromConvexHull(*arg1,*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromConvexHull__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  btSoftBodyHelpers::tVector3Array *arg2 = 0 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (btSoftBodyHelpers::tVector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyHelpers::tVector3Array & type is null", 0);
    return 0;
  } 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromConvexHull(*arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyHelpers_CreateFromTetGenData(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  btSoftBodyWorldInfo *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  btSoftBody *result = 0 ;
  
  arg1 = (btSoftBodyWorldInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSoftBodyWorldInfo & type is null", 0);
    return 0;
  } 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (btSoftBody *)btSoftBodyHelpers::CreateFromTetGenData(*arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyHelpers() {
  void * jresult ;
  btSoftBodyHelpers *result = 0 ;
  
  result = (btSoftBodyHelpers *)new btSoftBodyHelpers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyHelpers(void * jarg1) {
  btSoftBodyHelpers *arg1 = (btSoftBodyHelpers *) 0 ;
  
  arg1 = (btSoftBodyHelpers *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_0(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = 0 ;
  btSoftBodyRigidBodyCollisionConfiguration *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDefaultCollisionConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btSoftBodyRigidBodyCollisionConfiguration *)new btSoftBodyRigidBodyCollisionConfiguration((btDefaultCollisionConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftBodyRigidBodyCollisionConfiguration__SWIG_1() {
  void * jresult ;
  btSoftBodyRigidBodyCollisionConfiguration *result = 0 ;
  
  result = (btSoftBodyRigidBodyCollisionConfiguration *)new btSoftBodyRigidBodyCollisionConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodyRigidBodyCollisionConfiguration(void * jarg1) {
  btSoftBodyRigidBodyCollisionConfiguration *arg1 = (btSoftBodyRigidBodyCollisionConfiguration *) 0 ;
  
  arg1 = (btSoftBodyRigidBodyCollisionConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftBodyRigidBodyCollisionConfiguration_getCollisionAlgorithmCreateFunc(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btSoftBodyRigidBodyCollisionConfiguration *arg1 = (btSoftBodyRigidBodyCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  arg1 = (btSoftBodyRigidBodyCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftRigidCollisionAlgorithm(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  bool arg5 ;
  btSoftRigidCollisionAlgorithm *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (btSoftRigidCollisionAlgorithm *)new btSoftRigidCollisionAlgorithm(arg1,(btCollisionAlgorithmConstructionInfo const &)*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftRigidCollisionAlgorithm(void * jarg1) {
  btSoftRigidCollisionAlgorithm *arg1 = (btSoftRigidCollisionAlgorithm *) 0 ;
  
  arg1 = (btSoftRigidCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSoftRigidCollisionAlgorithm *arg1 = (btSoftRigidCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSoftRigidCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftRigidCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btSoftRigidCollisionAlgorithm *arg1 = (btSoftRigidCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btSoftRigidCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btSoftRigidCollisionAlgorithm *arg1 = (btSoftRigidCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btSoftRigidCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftRigidDynamicsWorld__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSoftBodySolver *arg5 = (btSoftBodySolver *) 0 ;
  btSoftRigidDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  arg5 = (btSoftBodySolver *)jarg5; 
  result = (btSoftRigidDynamicsWorld *)new btSoftRigidDynamicsWorld(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftRigidDynamicsWorld__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSoftRigidDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  result = (btSoftRigidDynamicsWorld *)new btSoftRigidDynamicsWorld(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftRigidDynamicsWorld(void * jarg1) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_debugDrawWorld(void * jarg1) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getCollisionWorld(void * jarg1) {
  void * jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = (btCollisionWorld *)(arg1)->getCollisionWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getDiscreteDynamicsWorld(void * jarg1) {
  void * jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btDiscreteDynamicsWorld *result = 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = (btDiscreteDynamicsWorld *)(arg1)->getDiscreteDynamicsWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_addSoftBody__SWIG_0(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addSoftBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_addSoftBody__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  short arg3 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->addSoftBody(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_addSoftBody__SWIG_2(void * jarg1, void * jarg2) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  (arg1)->addSoftBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_removeSoftBody(void * jarg1, void * jarg2) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  (arg1)->removeSoftBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getDrawFlags(void * jarg1) {
  int jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  int result;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = (int)((btSoftRigidDynamicsWorld const *)arg1)->getDrawFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_setDrawFlags(void * jarg1, int jarg2) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDrawFlags(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getWorldInfo__SWIG_0(void * jarg1) {
  void * jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyWorldInfo *result = 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = (btSoftBodyWorldInfo *) &(arg1)->getWorldInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getWorldType(void * jarg1) {
  void * jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = ((btSoftRigidDynamicsWorld const *)arg1)->getWorldType();
  jresult = new btDynamicsWorldType((const btDynamicsWorldType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_getSoftBodyArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSoftBodyArray *result = 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  result = (btSoftBodyArray *) &(arg1)->getSoftBodyArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_rayTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  RayResultCallback *arg4 = 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RayResultCallback & type is null", 0);
    return ;
  } 
  ((btSoftRigidDynamicsWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_rayTestSingle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  RayResultCallback *arg6 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionShape *)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (RayResultCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RayResultCallback & type is null", 0);
    return ;
  } 
  btSoftRigidDynamicsWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftRigidDynamicsWorld_serialize(void * jarg1, void * jarg2) {
  btSoftRigidDynamicsWorld *arg1 = (btSoftRigidDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btSoftRigidDynamicsWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  (arg1)->serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftSoftCollisionAlgorithm__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = 0 ;
  btSoftSoftCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btSoftSoftCollisionAlgorithm *)new btSoftSoftCollisionAlgorithm((btCollisionAlgorithmConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftSoftCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSoftSoftCollisionAlgorithm *arg1 = (btSoftSoftCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSoftSoftCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftSoftCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btSoftSoftCollisionAlgorithm *arg1 = (btSoftSoftCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btSoftSoftCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftSoftCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btSoftSoftCollisionAlgorithm *arg1 = (btSoftSoftCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btSoftSoftCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSoftSoftCollisionAlgorithm__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btSoftSoftCollisionAlgorithm *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  result = (btSoftSoftCollisionAlgorithm *)new btSoftSoftCollisionAlgorithm(arg1,(btCollisionAlgorithmConstructionInfo const &)*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftSoftCollisionAlgorithm(void * jarg1) {
  btSoftSoftCollisionAlgorithm *arg1 = (btSoftSoftCollisionAlgorithm *) 0 ;
  
  arg1 = (btSoftSoftCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodySolver(void * jarg1) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodySolver_getSolverType(void * jarg1) {
  int jresult ;
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  btSoftBodySolver::SolverTypes result;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  result = (btSoftBodySolver::SolverTypes)((btSoftBodySolver const *)arg1)->getSolverType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSoftBodySolver_checkInitialized(void * jarg1) {
  unsigned int jresult ;
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  bool result;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  result = (bool)(arg1)->checkInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_optimize__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  btAlignedObjectArray< btSoftBody * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (btAlignedObjectArray< btSoftBody * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btSoftBody * > & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->optimize(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_optimize__SWIG_1(void * jarg1, void * jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  btAlignedObjectArray< btSoftBody * > *arg2 = 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (btAlignedObjectArray< btSoftBody * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btSoftBody * > & type is null", 0);
    return ;
  } 
  (arg1)->optimize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_copyBackToSoftBodies__SWIG_0(void * jarg1, unsigned int jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  bool arg2 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->copyBackToSoftBodies(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_copyBackToSoftBodies__SWIG_1(void * jarg1) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  (arg1)->copyBackToSoftBodies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_predictMotion(void * jarg1, float jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->predictMotion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_solveConstraints(void * jarg1, float jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  float arg2 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->solveConstraints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_updateSoftBodies(void * jarg1) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  (arg1)->updateSoftBodies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_processCollision__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  (arg1)->processCollision(arg2,(btCollisionObjectWrapper const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_processCollision__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->processCollision(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_setNumberOfPositionIterations(void * jarg1, int jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumberOfPositionIterations(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodySolver_getNumberOfPositionIterations(void * jarg1) {
  int jresult ;
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  int result;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  result = (int)(arg1)->getNumberOfPositionIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolver_setNumberOfVelocityIterations(void * jarg1, int jarg2) {
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  int arg2 ;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumberOfVelocityIterations(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSoftBodySolver_getNumberOfVelocityIterations(void * jarg1) {
  int jresult ;
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  int result;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  result = (int)(arg1)->getNumberOfVelocityIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSoftBodySolver_getTimeScale(void * jarg1) {
  float jresult ;
  btSoftBodySolver *arg1 = (btSoftBodySolver *) 0 ;
  float result;
  
  arg1 = (btSoftBodySolver *)jarg1; 
  result = (float)(arg1)->getTimeScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSoftBodySolverOutput(void * jarg1) {
  btSoftBodySolverOutput *arg1 = (btSoftBodySolverOutput *) 0 ;
  
  arg1 = (btSoftBodySolverOutput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSoftBodySolverOutput_copySoftBodyToVertexBuffer(void * jarg1, void * jarg2, void * jarg3) {
  btSoftBodySolverOutput *arg1 = (btSoftBodySolverOutput *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) (btSoftBody *)0 ;
  btVertexBufferDescriptor *arg3 = (btVertexBufferDescriptor *) 0 ;
  
  arg1 = (btSoftBodySolverOutput *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btVertexBufferDescriptor *)jarg3; 
  (arg1)->copySoftBodyToVertexBuffer((btSoftBody const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultSoftBodySolver() {
  void * jresult ;
  btDefaultSoftBodySolver *result = 0 ;
  
  result = (btDefaultSoftBodySolver *)new btDefaultSoftBodySolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultSoftBodySolver(void * jarg1) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultSoftBodySolver_getSolverType(void * jarg1) {
  int jresult ;
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btSoftBodySolver::SolverTypes result;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  result = (btSoftBodySolver::SolverTypes)((btDefaultSoftBodySolver const *)arg1)->getSolverType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDefaultSoftBodySolver_checkInitialized(void * jarg1) {
  unsigned int jresult ;
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  bool result;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  result = (bool)(arg1)->checkInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_updateSoftBodies(void * jarg1) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  (arg1)->updateSoftBodies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_optimize__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btAlignedObjectArray< btSoftBody * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (btAlignedObjectArray< btSoftBody * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btSoftBody * > & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->optimize(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_optimize__SWIG_1(void * jarg1, void * jarg2) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btAlignedObjectArray< btSoftBody * > *arg2 = 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (btAlignedObjectArray< btSoftBody * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btSoftBody * > & type is null", 0);
    return ;
  } 
  (arg1)->optimize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_0(void * jarg1, unsigned int jarg2) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  bool arg2 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->copyBackToSoftBodies(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_copyBackToSoftBodies__SWIG_1(void * jarg1) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  (arg1)->copyBackToSoftBodies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_solveConstraints(void * jarg1, float jarg2) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  float arg2 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->solveConstraints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_predictMotion(void * jarg1, float jarg2) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  float arg2 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->predictMotion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_copySoftBodyToVertexBuffer(void * jarg1, void * jarg2, void * jarg3) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) (btSoftBody *)0 ;
  btVertexBufferDescriptor *arg3 = (btVertexBufferDescriptor *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btVertexBufferDescriptor *)jarg3; 
  (arg1)->copySoftBodyToVertexBuffer((btSoftBody const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_processCollision__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  (arg1)->processCollision(arg2,(btCollisionObjectWrapper const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSoftBodySolver_processCollision__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btDefaultSoftBodySolver *arg1 = (btDefaultSoftBodySolver *) 0 ;
  btSoftBody *arg2 = (btSoftBody *) 0 ;
  btSoftBody *arg3 = (btSoftBody *) 0 ;
  
  arg1 = (btDefaultSoftBodySolver *)jarg1; 
  arg2 = (btSoftBody *)jarg2; 
  arg3 = (btSoftBody *)jarg3; 
  (arg1)->processCollision(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVertexBufferDescriptor(void * jarg1) {
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVertexBufferDescriptor_hasVertexPositions(void * jarg1) {
  unsigned int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  bool result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (bool)((btVertexBufferDescriptor const *)arg1)->hasVertexPositions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVertexBufferDescriptor_hasNormals(void * jarg1) {
  unsigned int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  bool result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (bool)((btVertexBufferDescriptor const *)arg1)->hasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVertexBufferDescriptor_getBufferType(void * jarg1) {
  int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  btVertexBufferDescriptor::BufferTypes result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (btVertexBufferDescriptor::BufferTypes)((btVertexBufferDescriptor const *)arg1)->getBufferType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVertexBufferDescriptor_getVertexOffset(void * jarg1) {
  int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  int result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (int)((btVertexBufferDescriptor const *)arg1)->getVertexOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVertexBufferDescriptor_getVertexStride(void * jarg1) {
  int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  int result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (int)((btVertexBufferDescriptor const *)arg1)->getVertexStride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVertexBufferDescriptor_getNormalOffset(void * jarg1) {
  int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  int result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (int)((btVertexBufferDescriptor const *)arg1)->getNormalOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVertexBufferDescriptor_getNormalStride(void * jarg1) {
  int jresult ;
  btVertexBufferDescriptor *arg1 = (btVertexBufferDescriptor *) 0 ;
  int result;
  
  arg1 = (btVertexBufferDescriptor *)jarg1; 
  result = (int)((btVertexBufferDescriptor const *)arg1)->getNormalStride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCPUVertexBufferDescriptor__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  btCPUVertexBufferDescriptor *result = 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btCPUVertexBufferDescriptor *)new btCPUVertexBufferDescriptor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCPUVertexBufferDescriptor__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btCPUVertexBufferDescriptor *result = 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (btCPUVertexBufferDescriptor *)new btCPUVertexBufferDescriptor(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCPUVertexBufferDescriptor(void * jarg1) {
  btCPUVertexBufferDescriptor *arg1 = (btCPUVertexBufferDescriptor *) 0 ;
  
  arg1 = (btCPUVertexBufferDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCPUVertexBufferDescriptor_getBufferType(void * jarg1) {
  int jresult ;
  btCPUVertexBufferDescriptor *arg1 = (btCPUVertexBufferDescriptor *) 0 ;
  btVertexBufferDescriptor::BufferTypes result;
  
  arg1 = (btCPUVertexBufferDescriptor *)jarg1; 
  result = (btVertexBufferDescriptor::BufferTypes)((btCPUVertexBufferDescriptor const *)arg1)->getBufferType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCPUVertexBufferDescriptor_getBasePointer(void * jarg1) {
  void * jresult ;
  btCPUVertexBufferDescriptor *arg1 = (btCPUVertexBufferDescriptor *) 0 ;
  float *result = 0 ;
  
  arg1 = (btCPUVertexBufferDescriptor *)jarg1; 
  result = (float *)((btCPUVertexBufferDescriptor const *)arg1)->getBasePointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_cells_set(void * jarg1, void * jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btAlignedObjectArray< btSparseSdf< 3 >::Cell * > *arg2 = (btAlignedObjectArray< btSparseSdf< 3 >::Cell * > *) 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (btAlignedObjectArray< btSparseSdf< 3 >::Cell * > *)jarg2; 
  if (arg1) (arg1)->cells = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSparseSdf3_cells_get(void * jarg1) {
  void * jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btAlignedObjectArray< btSparseSdf< 3 >::Cell * > *result = 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (btAlignedObjectArray< btSparseSdf< 3 >::Cell * > *)& ((arg1)->cells);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_voxelsz_set(void * jarg1, float jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->voxelsz = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSparseSdf3_voxelsz_get(void * jarg1) {
  float jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btScalar result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (btScalar) ((arg1)->voxelsz);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_puid_set(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->puid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSparseSdf3_puid_get(void * jarg1) {
  int jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (int) ((arg1)->puid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_ncells_set(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ncells = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSparseSdf3_ncells_get(void * jarg1) {
  int jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (int) ((arg1)->ncells);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_nprobes_set(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nprobes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSparseSdf3_nprobes_get(void * jarg1) {
  int jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (int) ((arg1)->nprobes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_nqueries_set(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nqueries = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSparseSdf3_nqueries_get(void * jarg1) {
  int jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  result = (int) ((arg1)->nqueries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_Initialize__SWIG_0(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Initialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_Initialize__SWIG_1(void * jarg1) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  (arg1)->Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_Reset(void * jarg1) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_GarbageCollect__SWIG_0(void * jarg1, int jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GarbageCollect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_GarbageCollect__SWIG_1(void * jarg1) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  (arg1)->GarbageCollect();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSparseSdf3_RemoveReferences(void * jarg1, void * jarg2) {
  int jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  int result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  result = (int)(arg1)->RemoveReferences(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSparseSdf3_Evaluate(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  float jresult ;
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar result;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  result = (btScalar)(arg1)->Evaluate((btVector3 const &)*arg2,(btCollisionShape const *)arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSparseSdf3_BuildCell(void * jarg1, void * jarg2) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  btSparseSdf< 3 >::Cell *arg2 = 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  arg2 = (btSparseSdf< 3 >::Cell *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSparseSdf< 3 >::Cell & type is null", 0);
    return ;
  } 
  (arg1)->BuildCell(*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSparseSdf3_DistanceToShape(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btCollisionShape *)jarg2; 
  result = (btScalar)btSparseSdf< 3 >::SWIGTEMPLATEDISAMBIGUATOR DistanceToShape((btVector3 const &)*arg1,(btCollisionShape const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSparseSdf3_Decompose(float jarg1) {
  void * jresult ;
  btScalar arg1 ;
  btSparseSdf< 3 >::IntFrac result;
  
  arg1 = (btScalar)jarg1; 
  result = btSparseSdf< 3 >::SWIGTEMPLATEDISAMBIGUATOR Decompose(arg1);
  jresult = new btSparseSdf< 3 >::IntFrac((const btSparseSdf< 3 >::IntFrac &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSparseSdf3_Lerp(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btScalar)btSparseSdf< 3 >::SWIGTEMPLATEDISAMBIGUATOR Lerp(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSparseSdf3_Hash(int jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  unsigned int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btCollisionShape *)jarg4; 
  result = (unsigned int)btSparseSdf< 3 >::SWIGTEMPLATEDISAMBIGUATOR Hash(arg1,arg2,arg3,(btCollisionShape const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSparseSdf3() {
  void * jresult ;
  btSparseSdf< 3 > *result = 0 ;
  
  result = (btSparseSdf< 3 > *)new btSparseSdf< 3 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSparseSdf3(void * jarg1) {
  btSparseSdf< 3 > *arg1 = (btSparseSdf< 3 > *) 0 ;
  
  arg1 = (btSparseSdf< 3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayInt__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< int > *result = 0 ;
  
  result = (btAlignedObjectArray< int > *)new btAlignedObjectArray< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayInt(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayInt__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< int > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< int > *)new btAlignedObjectArray< int >((btAlignedObjectArray< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_at__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int *) &((btAlignedObjectArray< int > const *)arg1)->at(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_clear(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_pop_back(void * jarg1) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(int const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expand__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int *) &(arg1)->expand((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayInt_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_push_back(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_findBinarySearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->findBinarySearch((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayInt_findLinearSearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< int > const *)arg1)->findLinearSearch((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_remove(void * jarg1, int jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((int const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayInt_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< int > *arg1 = (btAlignedObjectArray< int > *) 0 ;
  btAlignedObjectArray< int > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< int > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayeVSolver__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< eVSolver::_ > *result = 0 ;
  
  result = (btAlignedObjectArray< eVSolver::_ > *)new btAlignedObjectArray< eVSolver::_ >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayeVSolver(void * jarg1) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayeVSolver__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = 0 ;
  btAlignedObjectArray< eVSolver::_ > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< eVSolver::_ > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< eVSolver::_ > *)new btAlignedObjectArray< eVSolver::_ >((btAlignedObjectArray< eVSolver::_ > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  result = (int)((btAlignedObjectArray< eVSolver::_ > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_at__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  eVSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eVSolver::_ *) &((btAlignedObjectArray< eVSolver::_ > const *)arg1)->at(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_clear(void * jarg1) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_pop_back(void * jarg1) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  eVSolver::_ *arg3 = 0 ;
  eVSolver::_ temp3 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (eVSolver::_)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(eVSolver::_ const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  result = (eVSolver::_ *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_expand__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *arg2 = 0 ;
  eVSolver::_ temp2 ;
  eVSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  temp2 = (eVSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (eVSolver::_ *) &(arg1)->expand((eVSolver::_ const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  result = (eVSolver::_ *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_push_back(void * jarg1, int jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *arg2 = 0 ;
  eVSolver::_ temp2 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  temp2 = (eVSolver::_)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((eVSolver::_ const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  result = (int)((btAlignedObjectArray< eVSolver::_ > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_findBinarySearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *arg2 = 0 ;
  eVSolver::_ temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  temp2 = (eVSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< eVSolver::_ > const *)arg1)->findBinarySearch((eVSolver::_ const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_findLinearSearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *arg2 = 0 ;
  eVSolver::_ temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  temp2 = (eVSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< eVSolver::_ > const *)arg1)->findLinearSearch((eVSolver::_ const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_remove(void * jarg1, int jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  eVSolver::_ *arg2 = 0 ;
  eVSolver::_ temp2 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  temp2 = (eVSolver::_)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((eVSolver::_ const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayeVSolver_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< eVSolver::_ > *arg1 = (btAlignedObjectArray< eVSolver::_ > *) 0 ;
  btAlignedObjectArray< eVSolver::_ > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< eVSolver::_ > *)jarg1; 
  arg2 = (btAlignedObjectArray< eVSolver::_ > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< eVSolver::_ > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< eVSolver::_ > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayePSolver__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< ePSolver::_ > *result = 0 ;
  
  result = (btAlignedObjectArray< ePSolver::_ > *)new btAlignedObjectArray< ePSolver::_ >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayePSolver(void * jarg1) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayePSolver__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = 0 ;
  btAlignedObjectArray< ePSolver::_ > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< ePSolver::_ > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< ePSolver::_ > *)new btAlignedObjectArray< ePSolver::_ >((btAlignedObjectArray< ePSolver::_ > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  result = (int)((btAlignedObjectArray< ePSolver::_ > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_at__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  ePSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ePSolver::_ *) &((btAlignedObjectArray< ePSolver::_ > const *)arg1)->at(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_clear(void * jarg1) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_pop_back(void * jarg1) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_resize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  ePSolver::_ *arg3 = 0 ;
  ePSolver::_ temp3 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (ePSolver::_)jarg3; 
  arg3 = &temp3; 
  (arg1)->resize(arg2,(ePSolver::_ const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  result = (ePSolver::_ *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_expand__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *arg2 = 0 ;
  ePSolver::_ temp2 ;
  ePSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  temp2 = (ePSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (ePSolver::_ *) &(arg1)->expand((ePSolver::_ const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *result = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  result = (ePSolver::_ *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_push_back(void * jarg1, int jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *arg2 = 0 ;
  ePSolver::_ temp2 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  temp2 = (ePSolver::_)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((ePSolver::_ const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  result = (int)((btAlignedObjectArray< ePSolver::_ > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_findBinarySearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *arg2 = 0 ;
  ePSolver::_ temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  temp2 = (ePSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< ePSolver::_ > const *)arg1)->findBinarySearch((ePSolver::_ const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_findLinearSearch(void * jarg1, int jarg2) {
  int jresult ;
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *arg2 = 0 ;
  ePSolver::_ temp2 ;
  int result;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  temp2 = (ePSolver::_)jarg2; 
  arg2 = &temp2; 
  result = (int)((btAlignedObjectArray< ePSolver::_ > const *)arg1)->findLinearSearch((ePSolver::_ const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_remove(void * jarg1, int jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  ePSolver::_ *arg2 = 0 ;
  ePSolver::_ temp2 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  temp2 = (ePSolver::_)jarg2; 
  arg2 = &temp2; 
  (arg1)->remove((ePSolver::_ const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayePSolver_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< ePSolver::_ > *arg1 = (btAlignedObjectArray< ePSolver::_ > *) 0 ;
  btAlignedObjectArray< ePSolver::_ > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< ePSolver::_ > *)jarg1; 
  arg2 = (btAlignedObjectArray< ePSolver::_ > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< ePSolver::_ > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< ePSolver::_ > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayNode__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< Node > *result = 0 ;
  
  result = (btAlignedObjectArray< Node > *)new btAlignedObjectArray< Node >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayNode(void * jarg1) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayNode__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Node > *arg1 = 0 ;
  btAlignedObjectArray< Node > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Node > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< Node > *)new btAlignedObjectArray< Node >((btAlignedObjectArray< Node > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayNode_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  result = (int)((btAlignedObjectArray< Node > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayNode_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  Node *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Node *) &((btAlignedObjectArray< Node > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_clear(void * jarg1) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_pop_back(void * jarg1) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(Node const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayNode_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  result = (Node *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayNode_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *arg2 = 0 ;
  Node *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return 0;
  } 
  result = (Node *) &(arg1)->expand((Node const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayNode_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  result = (Node *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Node const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayNode_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  result = (int)((btAlignedObjectArray< Node > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayNode_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Node > const *)arg1)->findBinarySearch((Node const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayNode_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Node > const *)arg1)->findLinearSearch((Node const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  Node *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  (arg1)->remove((Node const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayNode_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Node > *arg1 = (btAlignedObjectArray< Node > *) 0 ;
  btAlignedObjectArray< Node > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Node > *)jarg1; 
  arg2 = (btAlignedObjectArray< Node > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Node > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< Node > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayLink__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< Link > *result = 0 ;
  
  result = (btAlignedObjectArray< Link > *)new btAlignedObjectArray< Link >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayLink(void * jarg1) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayLink__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Link > *arg1 = 0 ;
  btAlignedObjectArray< Link > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Link > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< Link > *)new btAlignedObjectArray< Link >((btAlignedObjectArray< Link > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayLink_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  result = (int)((btAlignedObjectArray< Link > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayLink_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  Link *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Link *) &((btAlignedObjectArray< Link > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_clear(void * jarg1) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_pop_back(void * jarg1) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  Link *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Link *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(Link const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayLink_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  result = (Link *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayLink_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *arg2 = 0 ;
  Link *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (Link *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return 0;
  } 
  result = (Link *) &(arg1)->expand((Link const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayLink_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  result = (Link *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (Link *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Link const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayLink_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  result = (int)((btAlignedObjectArray< Link > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayLink_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (Link *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Link > const *)arg1)->findBinarySearch((Link const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayLink_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (Link *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Link > const *)arg1)->findLinearSearch((Link const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  Link *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (Link *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Link const & type is null", 0);
    return ;
  } 
  (arg1)->remove((Link const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayLink_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Link > *arg1 = (btAlignedObjectArray< Link > *) 0 ;
  btAlignedObjectArray< Link > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Link > *)jarg1; 
  arg2 = (btAlignedObjectArray< Link > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Link > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< Link > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayFace__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< Face > *result = 0 ;
  
  result = (btAlignedObjectArray< Face > *)new btAlignedObjectArray< Face >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayFace(void * jarg1) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayFace__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Face > *arg1 = 0 ;
  btAlignedObjectArray< Face > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Face > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< Face > *)new btAlignedObjectArray< Face >((btAlignedObjectArray< Face > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayFace_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  result = (int)((btAlignedObjectArray< Face > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayFace_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  Face *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Face *) &((btAlignedObjectArray< Face > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_clear(void * jarg1) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_pop_back(void * jarg1) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  Face *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Face *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(Face const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayFace_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  result = (Face *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayFace_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *arg2 = 0 ;
  Face *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return 0;
  } 
  result = (Face *) &(arg1)->expand((Face const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayFace_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  result = (Face *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Face const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayFace_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  result = (int)((btAlignedObjectArray< Face > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayFace_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Face > const *)arg1)->findBinarySearch((Face const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayFace_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< Face > const *)arg1)->findLinearSearch((Face const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  Face *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (Face *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Face const & type is null", 0);
    return ;
  } 
  (arg1)->remove((Face const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayFace_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Face > *arg1 = (btAlignedObjectArray< Face > *) 0 ;
  btAlignedObjectArray< Face > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Face > *)jarg1; 
  arg2 = (btAlignedObjectArray< Face > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Face > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< Face > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayMaterialPtr__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< Material * > *result = 0 ;
  
  result = (btAlignedObjectArray< Material * > *)new btAlignedObjectArray< Material * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayMaterialPtr(void * jarg1) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayMaterialPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Material * > *arg1 = 0 ;
  btAlignedObjectArray< Material * > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Material * > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< Material * > *)new btAlignedObjectArray< Material * >((btAlignedObjectArray< Material * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  result = (int)((btAlignedObjectArray< Material * > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  Material **result = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Material **) &((btAlignedObjectArray< Material * > const *)arg1)->at(arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_clear(void * jarg1) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_pop_back(void * jarg1) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  Material **arg3 = 0 ;
  Material *temp3 = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Material *)jarg3;
  arg3 = (Material **)&temp3; 
  (arg1)->resize(arg2,(Material *const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **result = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  result = (Material **) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **arg2 = 0 ;
  Material *temp2 = 0 ;
  Material **result = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  temp2 = (Material *)jarg2;
  arg2 = (Material **)&temp2; 
  result = (Material **) &(arg1)->expand((Material *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **result = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  result = (Material **) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **arg2 = 0 ;
  Material *temp2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  temp2 = (Material *)jarg2;
  arg2 = (Material **)&temp2; 
  (arg1)->push_back((Material *const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  result = (int)((btAlignedObjectArray< Material * > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **arg2 = 0 ;
  Material *temp2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  temp2 = (Material *)jarg2;
  arg2 = (Material **)&temp2; 
  result = (int)((btAlignedObjectArray< Material * > const *)arg1)->findBinarySearch((Material *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **arg2 = 0 ;
  Material *temp2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  temp2 = (Material *)jarg2;
  arg2 = (Material **)&temp2; 
  result = (int)((btAlignedObjectArray< Material * > const *)arg1)->findLinearSearch((Material *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  Material **arg2 = 0 ;
  Material *temp2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  temp2 = (Material *)jarg2;
  arg2 = (Material **)&temp2; 
  (arg1)->remove((Material *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayMaterialPtr_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< Material * > *arg1 = (btAlignedObjectArray< Material * > *) 0 ;
  btAlignedObjectArray< Material * > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< Material * > *)jarg1; 
  arg2 = (btAlignedObjectArray< Material * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< Material * > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< Material * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayVector3__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  result = (btAlignedObjectArray< btVector3 > *)new btAlignedObjectArray< btVector3 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArrayVector3(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArrayVector3__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< btVector3 > *)new btAlignedObjectArray< btVector3 >((btAlignedObjectArray< btVector3 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btAlignedObjectArray< btVector3 > const *)arg1)->at(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_clear(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_pop_back(void * jarg1) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->resize(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (btVector3 *) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btVector3 *) &(arg1)->expand((btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (btVector3 *) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->findBinarySearch((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)((btAlignedObjectArray< btVector3 > const *)arg1)->findLinearSearch((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->remove((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArrayVector3_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = (btAlignedObjectArray< btVector3 > *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< btVector3 > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArraySBJointPtr__SWIG_0() {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *result = 0 ;
  
  result = (btAlignedObjectArray< SBJoint * > *)new btAlignedObjectArray< SBJoint * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAlignedObjectArraySBJointPtr(void * jarg1) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAlignedObjectArraySBJointPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = 0 ;
  btAlignedObjectArray< SBJoint * > *result = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< SBJoint * > const & type is null", 0);
    return 0;
  } 
  result = (btAlignedObjectArray< SBJoint * > *)new btAlignedObjectArray< SBJoint * >((btAlignedObjectArray< SBJoint * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_size(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  result = (int)((btAlignedObjectArray< SBJoint * > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_at__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  SBJoint **result = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (SBJoint **) &((btAlignedObjectArray< SBJoint * > const *)arg1)->at(arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_clear(void * jarg1) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_pop_back(void * jarg1) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_resizeNoInitialize(void * jarg1, int jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resizeNoInitialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_resize__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  SBJoint **arg3 = 0 ;
  SBJoint *temp3 = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (SBJoint *)jarg3;
  arg3 = (SBJoint **)&temp3; 
  (arg1)->resize(arg2,(SBJoint *const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_resize__SWIG_1(void * jarg1, int jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_expandNonInitializing(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **result = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  result = (SBJoint **) &(arg1)->expandNonInitializing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_expand__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **arg2 = 0 ;
  SBJoint *temp2 = 0 ;
  SBJoint **result = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  temp2 = (SBJoint *)jarg2;
  arg2 = (SBJoint **)&temp2; 
  result = (SBJoint **) &(arg1)->expand((SBJoint *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_expand__SWIG_1(void * jarg1) {
  void * jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **result = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  result = (SBJoint **) &(arg1)->expand();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_push_back(void * jarg1, void * jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **arg2 = 0 ;
  SBJoint *temp2 = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  temp2 = (SBJoint *)jarg2;
  arg2 = (SBJoint **)&temp2; 
  (arg1)->push_back((SBJoint *const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_capacity(void * jarg1) {
  int jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  result = (int)((btAlignedObjectArray< SBJoint * > const *)arg1)->capacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_reserve(void * jarg1, int jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_swap(void * jarg1, int jarg2, int jarg3) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_findBinarySearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **arg2 = 0 ;
  SBJoint *temp2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  temp2 = (SBJoint *)jarg2;
  arg2 = (SBJoint **)&temp2; 
  result = (int)((btAlignedObjectArray< SBJoint * > const *)arg1)->findBinarySearch((SBJoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_findLinearSearch(void * jarg1, void * jarg2) {
  int jresult ;
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **arg2 = 0 ;
  SBJoint *temp2 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  temp2 = (SBJoint *)jarg2;
  arg2 = (SBJoint **)&temp2; 
  result = (int)((btAlignedObjectArray< SBJoint * > const *)arg1)->findLinearSearch((SBJoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_remove(void * jarg1, void * jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  SBJoint **arg2 = 0 ;
  SBJoint *temp2 = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  temp2 = (SBJoint *)jarg2;
  arg2 = (SBJoint **)&temp2; 
  (arg1)->remove((SBJoint *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_initializeFromBuffer(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initializeFromBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedObjectArraySBJointPtr_copyFromArray(void * jarg1, void * jarg2) {
  btAlignedObjectArray< SBJoint * > *arg1 = (btAlignedObjectArray< SBJoint * > *) 0 ;
  btAlignedObjectArray< SBJoint * > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< SBJoint * > *)jarg1; 
  arg2 = (btAlignedObjectArray< SBJoint * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< SBJoint * > const & type is null", 0);
    return ;
  } 
  (arg1)->copyFromArray((btAlignedObjectArray< SBJoint * > const &)*arg2);
}


SWIGEXPORT Element * SWIGSTDCALL CSharp_Material_SWIGUpcast(Material *jarg1) {
    return (Element *)jarg1;
}

SWIGEXPORT Element * SWIGSTDCALL CSharp_Feature_SWIGUpcast(Feature *jarg1) {
    return (Element *)jarg1;
}

SWIGEXPORT Feature * SWIGSTDCALL CSharp_Node_SWIGUpcast(Node *jarg1) {
    return (Feature *)jarg1;
}

SWIGEXPORT Feature * SWIGSTDCALL CSharp_Link_SWIGUpcast(Link *jarg1) {
    return (Feature *)jarg1;
}

SWIGEXPORT Feature * SWIGSTDCALL CSharp_Face_SWIGUpcast(Face *jarg1) {
    return (Feature *)jarg1;
}

SWIGEXPORT SBJoint * SWIGSTDCALL CSharp_LJoint_SWIGUpcast(LJoint *jarg1) {
    return (SBJoint *)jarg1;
}

SWIGEXPORT SBJoint * SWIGSTDCALL CSharp_AJoint_SWIGUpcast(AJoint *jarg1) {
    return (SBJoint *)jarg1;
}

SWIGEXPORT SBJoint * SWIGSTDCALL CSharp_CJoint_SWIGUpcast(CJoint *jarg1) {
    return (SBJoint *)jarg1;
}

SWIGEXPORT btSoftBodySolver * SWIGSTDCALL CSharp_btDefaultSoftBodySolver_SWIGUpcast(btDefaultSoftBodySolver *jarg1) {
    return (btSoftBodySolver *)jarg1;
}

SWIGEXPORT btVertexBufferDescriptor * SWIGSTDCALL CSharp_btCPUVertexBufferDescriptor_SWIGUpcast(btCPUVertexBufferDescriptor *jarg1) {
    return (btVertexBufferDescriptor *)jarg1;
}

#ifdef __cplusplus
}
#endif

