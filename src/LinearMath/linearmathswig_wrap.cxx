/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_LinearMath(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_LinearMath(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_LinearMath(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



   #include	"btScalar.h"
   #include "btAabbUtil2.h"
   #include	"btAlignedAllocator.h"
   #include	"btAlignedObjectArray.h"
   #include "btConvexHull.h"
   #include	"btConvexHullComputer.h"
   #include	"btDefaultMotionState.h"
   #include	"btGeometryUtil.h"
   #include	"btGrahamScan2dConvexHull.h"
   #include	"btHashMap.h"
   #include	"btIDebugDraw.h"
   #include	"btList.h"
   #include	"btMatrix3x3.h"
   #include	"btMinMax.h"
   #include	"btMotionState.h"
   #include	"btPolarDecomposition.h"
   #include	"btPoolAllocator.h"
   #include	"btQuadWord.h"
   #include	"btQuaternion.h"
   #include	"btQuickprof.h"
   #include	"btRandom.h"

   #include	"btSerializer.h"
   #include	"btStackAlloc.h"
   #include	"btTransform.h"
   #include	"btTransformUtil.h"
   #include	"btVector3.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "LinearMathSwig_wrap.h"

SwigDirector_btIDebugDraw::SwigDirector_btIDebugDraw() : btIDebugDraw(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_btIDebugDraw::~SwigDirector_btIDebugDraw() {
  
}


void SwigDirector_btIDebugDraw::drawLine(btVector3 const &from, btVector3 const &to, btVector3 const &color) {
  void * jfrom = 0 ;
  void * jto = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawLine__SWIG_0) {
    btIDebugDraw::drawLine(from,to,color);
    return;
  } else {
    jfrom = (btVector3 *) &from; 
    jto = (btVector3 *) &to; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawLine__SWIG_0(jfrom, jto, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawLine(btVector3 const &from, btVector3 const &to, btVector3 const &fromColor, btVector3 const &toColor) {
  void * jfrom = 0 ;
  void * jto = 0 ;
  void * jfromColor = 0 ;
  void * jtoColor = 0 ;
  
  if (!swig_callbackdrawLine__SWIG_1) {
    btIDebugDraw::drawLine(from,to,fromColor,toColor);
    return;
  } else {
    jfrom = (btVector3 *) &from; 
    jto = (btVector3 *) &to; 
    jfromColor = (btVector3 *) &fromColor; 
    jtoColor = (btVector3 *) &toColor; 
    swig_callbackdrawLine__SWIG_1(jfrom, jto, jfromColor, jtoColor);
  }
}

void SwigDirector_btIDebugDraw::drawSphere(btScalar radius, btTransform const &transform, btVector3 const &color) {
  float jradius  ;
  void * jtransform = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawSphere__SWIG_0) {
    btIDebugDraw::drawSphere(radius,transform,color);
    return;
  } else {
    jradius = radius;
    jtransform = (btTransform *) &transform; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawSphere__SWIG_0(jradius, jtransform, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawSphere(btVector3 const &p, btScalar radius, btVector3 const &color) {
  void * jp = 0 ;
  float jradius  ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawSphere__SWIG_1) {
    btIDebugDraw::drawSphere(p,radius,color);
    return;
  } else {
    jp = (btVector3 *) &p; 
    jradius = radius;
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawSphere__SWIG_1(jp, jradius, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawTriangle(btVector3 const &v0, btVector3 const &v1, btVector3 const &v2, btVector3 const &arg3, btVector3 const &arg4, btVector3 const &arg5, btVector3 const &color, btScalar alpha) {
  void * jv0 = 0 ;
  void * jv1 = 0 ;
  void * jv2 = 0 ;
  void * jarg3 = 0 ;
  void * jarg4 = 0 ;
  void * jarg5 = 0 ;
  void * jcolor = 0 ;
  float jalpha  ;
  
  if (!swig_callbackdrawTriangle__SWIG_0) {
    btIDebugDraw::drawTriangle(v0,v1,v2,arg3,arg4,arg5,color,alpha);
    return;
  } else {
    jv0 = (btVector3 *) &v0; 
    jv1 = (btVector3 *) &v1; 
    jv2 = (btVector3 *) &v2; 
    jarg3 = (btVector3 *) &arg3; 
    jarg4 = (btVector3 *) &arg4; 
    jarg5 = (btVector3 *) &arg5; 
    jcolor = (btVector3 *) &color; 
    jalpha = alpha;
    swig_callbackdrawTriangle__SWIG_0(jv0, jv1, jv2, jarg3, jarg4, jarg5, jcolor, jalpha);
  }
}

void SwigDirector_btIDebugDraw::drawTriangle(btVector3 const &v0, btVector3 const &v1, btVector3 const &v2, btVector3 const &color, btScalar arg4) {
  void * jv0 = 0 ;
  void * jv1 = 0 ;
  void * jv2 = 0 ;
  void * jcolor = 0 ;
  float jarg4  ;
  
  if (!swig_callbackdrawTriangle__SWIG_1) {
    btIDebugDraw::drawTriangle(v0,v1,v2,color,arg4);
    return;
  } else {
    jv0 = (btVector3 *) &v0; 
    jv1 = (btVector3 *) &v1; 
    jv2 = (btVector3 *) &v2; 
    jcolor = (btVector3 *) &color; 
    jarg4 = arg4;
    swig_callbackdrawTriangle__SWIG_1(jv0, jv1, jv2, jcolor, jarg4);
  }
}

void SwigDirector_btIDebugDraw::drawContactPoint(btVector3 const &PointOnB, btVector3 const &normalOnB, btScalar distance, int lifeTime, btVector3 const &color) {
  void * jPointOnB = 0 ;
  void * jnormalOnB = 0 ;
  float jdistance  ;
  int jlifeTime  ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawContactPoint) {
    btIDebugDraw::drawContactPoint(PointOnB,normalOnB,distance,lifeTime,color);
    return;
  } else {
    jPointOnB = (btVector3 *) &PointOnB; 
    jnormalOnB = (btVector3 *) &normalOnB; 
    jdistance = distance;
    jlifeTime = lifeTime;
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawContactPoint(jPointOnB, jnormalOnB, jdistance, jlifeTime, jcolor);
  }
}

void SwigDirector_btIDebugDraw::reportErrorWarning(char const *warningString) {
  char * jwarningString = 0 ;
  
  if (!swig_callbackreportErrorWarning) {
    btIDebugDraw::reportErrorWarning(warningString);
    return;
  } else {
    jwarningString = SWIG_csharp_string_callback((const char *)warningString); 
    swig_callbackreportErrorWarning(jwarningString);
  }
}

void SwigDirector_btIDebugDraw::draw3dText(btVector3 const &location, char const *textString) {
  void * jlocation = 0 ;
  char * jtextString = 0 ;
  
  if (!swig_callbackdraw3dText) {
    btIDebugDraw::draw3dText(location,textString);
    return;
  } else {
    jlocation = (btVector3 *) &location; 
    jtextString = SWIG_csharp_string_callback((const char *)textString); 
    swig_callbackdraw3dText(jlocation, jtextString);
  }
}

void SwigDirector_btIDebugDraw::setDebugMode(int debugMode) {
  int jdebugMode  ;
  
  if (!swig_callbacksetDebugMode) {
    btIDebugDraw::setDebugMode(debugMode);
    return;
  } else {
    jdebugMode = debugMode;
    swig_callbacksetDebugMode(jdebugMode);
  }
}

int SwigDirector_btIDebugDraw::getDebugMode() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetDebugMode) {
    return btIDebugDraw::getDebugMode();
  } else {
    jresult = (int) swig_callbackgetDebugMode();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_btIDebugDraw::drawAabb(btVector3 const &from, btVector3 const &to, btVector3 const &color) {
  void * jfrom = 0 ;
  void * jto = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawAabb) {
    btIDebugDraw::drawAabb(from,to,color);
    return;
  } else {
    jfrom = (btVector3 *) &from; 
    jto = (btVector3 *) &to; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawAabb(jfrom, jto, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawTransform(btTransform const &transform, btScalar orthoLen) {
  void * jtransform = 0 ;
  float jorthoLen  ;
  
  if (!swig_callbackdrawTransform) {
    btIDebugDraw::drawTransform(transform,orthoLen);
    return;
  } else {
    jtransform = (btTransform *) &transform; 
    jorthoLen = orthoLen;
    swig_callbackdrawTransform(jtransform, jorthoLen);
  }
}

void SwigDirector_btIDebugDraw::drawArc(btVector3 const &center, btVector3 const &normal, btVector3 const &axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, btVector3 const &color, bool drawSect, btScalar stepDegrees) {
  void * jcenter = 0 ;
  void * jnormal = 0 ;
  void * jaxis = 0 ;
  float jradiusA  ;
  float jradiusB  ;
  float jminAngle  ;
  float jmaxAngle  ;
  void * jcolor = 0 ;
  unsigned int jdrawSect  ;
  float jstepDegrees  ;
  
  if (!swig_callbackdrawArc__SWIG_0) {
    btIDebugDraw::drawArc(center,normal,axis,radiusA,radiusB,minAngle,maxAngle,color,drawSect,stepDegrees);
    return;
  } else {
    jcenter = (btVector3 *) &center; 
    jnormal = (btVector3 *) &normal; 
    jaxis = (btVector3 *) &axis; 
    jradiusA = radiusA;
    jradiusB = radiusB;
    jminAngle = minAngle;
    jmaxAngle = maxAngle;
    jcolor = (btVector3 *) &color; 
    jdrawSect = drawSect;
    jstepDegrees = stepDegrees;
    swig_callbackdrawArc__SWIG_0(jcenter, jnormal, jaxis, jradiusA, jradiusB, jminAngle, jmaxAngle, jcolor, jdrawSect, jstepDegrees);
  }
}

void SwigDirector_btIDebugDraw::drawSpherePatch(btVector3 const &center, btVector3 const &up, btVector3 const &axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, btVector3 const &color, btScalar stepDegrees) {
  void * jcenter = 0 ;
  void * jup = 0 ;
  void * jaxis = 0 ;
  float jradius  ;
  float jminTh  ;
  float jmaxTh  ;
  float jminPs  ;
  float jmaxPs  ;
  void * jcolor = 0 ;
  float jstepDegrees  ;
  
  if (!swig_callbackdrawSpherePatch__SWIG_0) {
    btIDebugDraw::drawSpherePatch(center,up,axis,radius,minTh,maxTh,minPs,maxPs,color,stepDegrees);
    return;
  } else {
    jcenter = (btVector3 *) &center; 
    jup = (btVector3 *) &up; 
    jaxis = (btVector3 *) &axis; 
    jradius = radius;
    jminTh = minTh;
    jmaxTh = maxTh;
    jminPs = minPs;
    jmaxPs = maxPs;
    jcolor = (btVector3 *) &color; 
    jstepDegrees = stepDegrees;
    swig_callbackdrawSpherePatch__SWIG_0(jcenter, jup, jaxis, jradius, jminTh, jmaxTh, jminPs, jmaxPs, jcolor, jstepDegrees);
  }
}

void SwigDirector_btIDebugDraw::drawBox(btVector3 const &bbMin, btVector3 const &bbMax, btVector3 const &color) {
  void * jbbMin = 0 ;
  void * jbbMax = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawBox__SWIG_0) {
    btIDebugDraw::drawBox(bbMin,bbMax,color);
    return;
  } else {
    jbbMin = (btVector3 *) &bbMin; 
    jbbMax = (btVector3 *) &bbMax; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawBox__SWIG_0(jbbMin, jbbMax, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawBox(btVector3 const &bbMin, btVector3 const &bbMax, btTransform const &trans, btVector3 const &color) {
  void * jbbMin = 0 ;
  void * jbbMax = 0 ;
  void * jtrans = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawBox__SWIG_1) {
    btIDebugDraw::drawBox(bbMin,bbMax,trans,color);
    return;
  } else {
    jbbMin = (btVector3 *) &bbMin; 
    jbbMax = (btVector3 *) &bbMax; 
    jtrans = (btTransform *) &trans; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawBox__SWIG_1(jbbMin, jbbMax, jtrans, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawCapsule(btScalar radius, btScalar halfHeight, int upAxis, btTransform const &transform, btVector3 const &color) {
  float jradius  ;
  float jhalfHeight  ;
  int jupAxis  ;
  void * jtransform = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawCapsule) {
    btIDebugDraw::drawCapsule(radius,halfHeight,upAxis,transform,color);
    return;
  } else {
    jradius = radius;
    jhalfHeight = halfHeight;
    jupAxis = upAxis;
    jtransform = (btTransform *) &transform; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawCapsule(jradius, jhalfHeight, jupAxis, jtransform, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawCylinder(btScalar radius, btScalar halfHeight, int upAxis, btTransform const &transform, btVector3 const &color) {
  float jradius  ;
  float jhalfHeight  ;
  int jupAxis  ;
  void * jtransform = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawCylinder) {
    btIDebugDraw::drawCylinder(radius,halfHeight,upAxis,transform,color);
    return;
  } else {
    jradius = radius;
    jhalfHeight = halfHeight;
    jupAxis = upAxis;
    jtransform = (btTransform *) &transform; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawCylinder(jradius, jhalfHeight, jupAxis, jtransform, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawCone(btScalar radius, btScalar height, int upAxis, btTransform const &transform, btVector3 const &color) {
  float jradius  ;
  float jheight  ;
  int jupAxis  ;
  void * jtransform = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawCone) {
    btIDebugDraw::drawCone(radius,height,upAxis,transform,color);
    return;
  } else {
    jradius = radius;
    jheight = height;
    jupAxis = upAxis;
    jtransform = (btTransform *) &transform; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawCone(jradius, jheight, jupAxis, jtransform, jcolor);
  }
}

void SwigDirector_btIDebugDraw::drawPlane(btVector3 const &planeNormal, btScalar planeConst, btTransform const &transform, btVector3 const &color) {
  void * jplaneNormal = 0 ;
  float jplaneConst  ;
  void * jtransform = 0 ;
  void * jcolor = 0 ;
  
  if (!swig_callbackdrawPlane) {
    btIDebugDraw::drawPlane(planeNormal,planeConst,transform,color);
    return;
  } else {
    jplaneNormal = (btVector3 *) &planeNormal; 
    jplaneConst = planeConst;
    jtransform = (btTransform *) &transform; 
    jcolor = (btVector3 *) &color; 
    swig_callbackdrawPlane(jplaneNormal, jplaneConst, jtransform, jcolor);
  }
}

void SwigDirector_btIDebugDraw::swig_connect_director(SWIG_Callback0_t callbackdrawLine__SWIG_0, SWIG_Callback1_t callbackdrawLine__SWIG_1, SWIG_Callback2_t callbackdrawSphere__SWIG_0, SWIG_Callback3_t callbackdrawSphere__SWIG_1, SWIG_Callback4_t callbackdrawTriangle__SWIG_0, SWIG_Callback5_t callbackdrawTriangle__SWIG_1, SWIG_Callback6_t callbackdrawContactPoint, SWIG_Callback7_t callbackreportErrorWarning, SWIG_Callback8_t callbackdraw3dText, SWIG_Callback9_t callbacksetDebugMode, SWIG_Callback10_t callbackgetDebugMode, SWIG_Callback11_t callbackdrawAabb, SWIG_Callback12_t callbackdrawTransform, SWIG_Callback13_t callbackdrawArc__SWIG_0, SWIG_Callback14_t callbackdrawArc__SWIG_1, SWIG_Callback15_t callbackdrawSpherePatch__SWIG_0, SWIG_Callback16_t callbackdrawSpherePatch__SWIG_1, SWIG_Callback17_t callbackdrawBox__SWIG_0, SWIG_Callback18_t callbackdrawBox__SWIG_1, SWIG_Callback19_t callbackdrawCapsule, SWIG_Callback20_t callbackdrawCylinder, SWIG_Callback21_t callbackdrawCone, SWIG_Callback22_t callbackdrawPlane) {
  swig_callbackdrawLine__SWIG_0 = callbackdrawLine__SWIG_0;
  swig_callbackdrawLine__SWIG_1 = callbackdrawLine__SWIG_1;
  swig_callbackdrawSphere__SWIG_0 = callbackdrawSphere__SWIG_0;
  swig_callbackdrawSphere__SWIG_1 = callbackdrawSphere__SWIG_1;
  swig_callbackdrawTriangle__SWIG_0 = callbackdrawTriangle__SWIG_0;
  swig_callbackdrawTriangle__SWIG_1 = callbackdrawTriangle__SWIG_1;
  swig_callbackdrawContactPoint = callbackdrawContactPoint;
  swig_callbackreportErrorWarning = callbackreportErrorWarning;
  swig_callbackdraw3dText = callbackdraw3dText;
  swig_callbacksetDebugMode = callbacksetDebugMode;
  swig_callbackgetDebugMode = callbackgetDebugMode;
  swig_callbackdrawAabb = callbackdrawAabb;
  swig_callbackdrawTransform = callbackdrawTransform;
  swig_callbackdrawArc__SWIG_0 = callbackdrawArc__SWIG_0;
  swig_callbackdrawArc__SWIG_1 = callbackdrawArc__SWIG_1;
  swig_callbackdrawSpherePatch__SWIG_0 = callbackdrawSpherePatch__SWIG_0;
  swig_callbackdrawSpherePatch__SWIG_1 = callbackdrawSpherePatch__SWIG_1;
  swig_callbackdrawBox__SWIG_0 = callbackdrawBox__SWIG_0;
  swig_callbackdrawBox__SWIG_1 = callbackdrawBox__SWIG_1;
  swig_callbackdrawCapsule = callbackdrawCapsule;
  swig_callbackdrawCylinder = callbackdrawCylinder;
  swig_callbackdrawCone = callbackdrawCone;
  swig_callbackdrawPlane = callbackdrawPlane;
}

void SwigDirector_btIDebugDraw::swig_init_callbacks() {
  swig_callbackdrawLine__SWIG_0 = 0;
  swig_callbackdrawLine__SWIG_1 = 0;
  swig_callbackdrawSphere__SWIG_0 = 0;
  swig_callbackdrawSphere__SWIG_1 = 0;
  swig_callbackdrawTriangle__SWIG_0 = 0;
  swig_callbackdrawTriangle__SWIG_1 = 0;
  swig_callbackdrawContactPoint = 0;
  swig_callbackreportErrorWarning = 0;
  swig_callbackdraw3dText = 0;
  swig_callbacksetDebugMode = 0;
  swig_callbackgetDebugMode = 0;
  swig_callbackdrawAabb = 0;
  swig_callbackdrawTransform = 0;
  swig_callbackdrawArc__SWIG_0 = 0;
  swig_callbackdrawArc__SWIG_1 = 0;
  swig_callbackdrawSpherePatch__SWIG_0 = 0;
  swig_callbackdrawSpherePatch__SWIG_1 = 0;
  swig_callbackdrawBox__SWIG_0 = 0;
  swig_callbackdrawBox__SWIG_1 = 0;
  swig_callbackdrawCapsule = 0;
  swig_callbackdrawCylinder = 0;
  swig_callbackdrawCone = 0;
  swig_callbackdrawPlane = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_BT_BULLET_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(281);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGetVersion() {
  int jresult ;
  int result;
  
  result = (int)btGetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BT_LARGE_FLOAT_get() {
  double jresult ;
  double result;
  
  result = (double)(1e18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSqrt(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFabs(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btFabs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCos(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btCos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSin(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btSin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTan(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btTan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAcos(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAcos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAsin(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAsin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAtan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan2(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btAtan2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btExp(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btExp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btLog(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btLog(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPow(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btPow(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFmod(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btFmod(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan2Fast(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btAtan2Fast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btFuzzyZero(float jarg1) {
  unsigned int jresult ;
  btScalar arg1 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  result = (bool)btFuzzyZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btEqual(float jarg1, float jarg2) {
  unsigned int jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (bool)btEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGreaterEqual(float jarg1, float jarg2) {
  unsigned int jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (bool)btGreaterEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIsNegative(float jarg1) {
  int jresult ;
  btScalar arg1 ;
  int result;
  
  arg1 = (btScalar)jarg1; 
  result = (int)btIsNegative(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRadians(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btRadians(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDegrees(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btDegrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFsel(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btScalar)btFsel(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btMachineIsLittleEndian() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)btMachineIsLittleEndian();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSelect__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSelect__SWIG_1(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  unsigned int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSelect__SWIG_2(unsigned int jarg1, float jarg2, float jarg3) {
  float jresult ;
  unsigned int arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndian__SWIG_0(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btSwapEndian__SWIG_1(unsigned short jarg1) {
  unsigned short jresult ;
  unsigned short arg1 ;
  unsigned short result;
  
  arg1 = (unsigned short)jarg1; 
  result = (unsigned short)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndian__SWIG_2(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int result;
  
  arg1 = (int)jarg1; 
  result = (unsigned int)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btSwapEndian__SWIG_3(short jarg1) {
  unsigned short jresult ;
  short arg1 ;
  unsigned short result;
  
  arg1 = (short)jarg1; 
  result = (unsigned short)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndianFloat(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  unsigned int result;
  
  arg1 = (float)jarg1; 
  result = (unsigned int)btSwapEndianFloat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUnswapEndianFloat(unsigned int jarg1) {
  float jresult ;
  unsigned int arg1 ;
  float result;
  
  arg1 = (unsigned int)jarg1; 
  result = (float)btUnswapEndianFloat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapEndianDouble(double jarg1, void * jarg2) {
  double arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  btSwapEndianDouble(arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_btUnswapEndianDouble(void * jarg1) {
  double jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  double result;
  
  arg1 = (unsigned char *)jarg1; 
  result = (double)btUnswapEndianDouble((unsigned char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btNormalizeAngle(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btNormalizeAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedObject(int jarg1) {
  void * jresult ;
  int arg1 ;
  btTypedObject *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btTypedObject *)new btTypedObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedObject_m_objectType_set(void * jarg1, int jarg2) {
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedObject *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedObject_m_objectType_get(void * jarg1) {
  int jresult ;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  arg1 = (btTypedObject *)jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedObject_getObjectType(void * jarg1) {
  int jresult ;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  arg1 = (btTypedObject *)jarg1; 
  result = (int)((btTypedObject const *)arg1)->getObjectType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedObject(void * jarg1) {
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  
  arg1 = (btTypedObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AabbExpand(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  AabbExpand(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestPointAgainstAabb2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestPointAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestAabbAgainstAabb2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestAabbAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestTriangleAgainstAabb2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestTriangleAgainstAabb2((btVector3 const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOutcode(void * jarg1, void * jarg2) {
  int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)btOutcode((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRayAabb2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int *arg3 ;
  btVector3 *arg4 ;
  btScalar *arg5 = 0 ;
  btScalar arg6 ;
  btScalar arg7 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  result = (bool)btRayAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(unsigned int const (*))arg3,(btVector3 const (*))arg4,*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRayAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = (bool)btRayAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformAabb__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformAabb((btVector3 const &)*arg1,arg2,(btTransform const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformAabb__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,*arg5,*arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_BANCHLESS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_testQuantizedAabbAgainstQuantizedAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  unsigned int result;
  
  arg1 = (unsigned short *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  arg4 = (unsigned short *)jarg4; 
  result = (unsigned int)testQuantizedAabbAgainstQuantizedAabb((unsigned short const *)arg1,(unsigned short const *)arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedAllocInternal(unsigned long jarg1, int jarg2) {
  void * jresult ;
  size_t arg1 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)btAlignedAllocInternal(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedFreeInternal(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  btAlignedFreeInternal(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedAllocSetCustom(void * jarg1, void * jarg2) {
  btAllocFunc *arg1 = (btAllocFunc *) 0 ;
  btFreeFunc *arg2 = (btFreeFunc *) 0 ;
  
  arg1 = (btAllocFunc *)jarg1; 
  arg2 = (btFreeFunc *)jarg2; 
  btAlignedAllocSetCustom(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedAllocSetCustomAligned(void * jarg1, void * jarg2) {
  btAlignedAllocFunc *arg1 = (btAlignedAllocFunc *) 0 ;
  btAlignedFreeFunc *arg2 = (btAlignedFreeFunc *) 0 ;
  
  arg1 = (btAlignedAllocFunc *)jarg1; 
  arg2 = (btAlignedFreeFunc *)jarg2; 
  btAlignedAllocSetCustomAligned(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_USE_PLACEMENT_NEW_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HullResult() {
  void * jresult ;
  HullResult *result = 0 ;
  
  result = (HullResult *)new HullResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_mPolygons_set(void * jarg1, unsigned int jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  bool arg2 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mPolygons = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullResult_mPolygons_get(void * jarg1) {
  unsigned int jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  bool result;
  
  arg1 = (HullResult *)jarg1; 
  result = (bool) ((arg1)->mPolygons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_mNumOutputVertices_set(void * jarg1, unsigned int jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mNumOutputVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullResult_mNumOutputVertices_get(void * jarg1) {
  unsigned int jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int result;
  
  arg1 = (HullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mNumOutputVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_m_OutputVertices_set(void * jarg1, void * jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_OutputVertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HullResult_m_OutputVertices_get(void * jarg1) {
  void * jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (HullResult *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_OutputVertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_mNumFaces_set(void * jarg1, unsigned int jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mNumFaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullResult_mNumFaces_get(void * jarg1) {
  unsigned int jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int result;
  
  arg1 = (HullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mNumFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_mNumIndices_set(void * jarg1, unsigned int jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mNumIndices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullResult_mNumIndices_get(void * jarg1) {
  unsigned int jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  unsigned int result;
  
  arg1 = (HullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mNumIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullResult_m_Indices_set(void * jarg1, void * jarg2) {
  HullResult *arg1 = (HullResult *) 0 ;
  btAlignedObjectArray< unsigned int > *arg2 = (btAlignedObjectArray< unsigned int > *) 0 ;
  
  arg1 = (HullResult *)jarg1; 
  arg2 = (btAlignedObjectArray< unsigned int > *)jarg2; 
  if (arg1) (arg1)->m_Indices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HullResult_m_Indices_get(void * jarg1) {
  void * jresult ;
  HullResult *arg1 = (HullResult *) 0 ;
  btAlignedObjectArray< unsigned int > *result = 0 ;
  
  arg1 = (HullResult *)jarg1; 
  result = (btAlignedObjectArray< unsigned int > *)& ((arg1)->m_Indices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HullResult(void * jarg1) {
  HullResult *arg1 = (HullResult *) 0 ;
  
  arg1 = (HullResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HullDesc__SWIG_0() {
  void * jresult ;
  HullDesc *result = 0 ;
  
  result = (HullDesc *)new HullDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HullDesc__SWIG_1(int jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  HullFlag arg1 ;
  unsigned int arg2 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  unsigned int arg4 ;
  HullDesc *result = 0 ;
  
  arg1 = (HullFlag)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (HullDesc *)new HullDesc(arg1,arg2,(btVector3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HullDesc__SWIG_2(int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  HullFlag arg1 ;
  unsigned int arg2 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  HullDesc *result = 0 ;
  
  arg1 = (HullFlag)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  result = (HullDesc *)new HullDesc(arg1,arg2,(btVector3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_HasHullFlag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  HullFlag arg2 ;
  bool result;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (HullFlag)jarg2; 
  result = (bool)((HullDesc const *)arg1)->HasHullFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_SetHullFlag(void * jarg1, int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  HullFlag arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (HullFlag)jarg2; 
  (arg1)->SetHullFlag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_ClearHullFlag(void * jarg1, int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  HullFlag arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (HullFlag)jarg2; 
  (arg1)->ClearHullFlag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mFlags_set(void * jarg1, unsigned int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_mFlags_get(void * jarg1) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (unsigned int) ((arg1)->mFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mVcount_set(void * jarg1, unsigned int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mVcount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_mVcount_get(void * jarg1) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (unsigned int) ((arg1)->mVcount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mVertices_set(void * jarg1, void * jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->mVertices = (btVector3 const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HullDesc_mVertices_get(void * jarg1) {
  void * jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (HullDesc *)jarg1; 
  result = (btVector3 *) ((arg1)->mVertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mVertexStride_set(void * jarg1, unsigned int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mVertexStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_mVertexStride_get(void * jarg1) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (unsigned int) ((arg1)->mVertexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mNormalEpsilon_set(void * jarg1, float jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  btScalar arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->mNormalEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HullDesc_mNormalEpsilon_get(void * jarg1) {
  float jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  btScalar result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (btScalar) ((arg1)->mNormalEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mMaxVertices_set(void * jarg1, unsigned int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mMaxVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_mMaxVertices_get(void * jarg1) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (unsigned int) ((arg1)->mMaxVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullDesc_mMaxFaces_set(void * jarg1, unsigned int jarg2) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (HullDesc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mMaxFaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HullDesc_mMaxFaces_get(void * jarg1) {
  unsigned int jresult ;
  HullDesc *arg1 = (HullDesc *) 0 ;
  unsigned int result;
  
  arg1 = (HullDesc *)jarg1; 
  result = (unsigned int) ((arg1)->mMaxFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HullDesc(void * jarg1) {
  HullDesc *arg1 = (HullDesc *) 0 ;
  
  arg1 = (HullDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPlane_normal_set(void * jarg1, void * jarg2) {
  btPlane *arg1 = (btPlane *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btPlane *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPlane_normal_get(void * jarg1) {
  void * jresult ;
  btPlane *arg1 = (btPlane *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btPlane *)jarg1; 
  result = (btVector3 *)& ((arg1)->normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPlane_dist_set(void * jarg1, float jarg2) {
  btPlane *arg1 = (btPlane *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btPlane *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->dist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPlane_dist_get(void * jarg1) {
  float jresult ;
  btPlane *arg1 = (btPlane *) 0 ;
  btScalar result;
  
  arg1 = (btPlane *)jarg1; 
  result = (btScalar) ((arg1)->dist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPlane__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btPlane *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btScalar)jarg2; 
  result = (btPlane *)new btPlane((btVector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPlane__SWIG_1() {
  void * jresult ;
  btPlane *result = 0 ;
  
  result = (btPlane *)new btPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPlane(void * jarg1) {
  btPlane *arg1 = (btPlane *) 0 ;
  
  arg1 = (btPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexH__SWIG_0() {
  void * jresult ;
  ConvexH *result = 0 ;
  
  result = (ConvexH *)new ConvexH();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConvexH(void * jarg1) {
  ConvexH *arg1 = (ConvexH *) 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexH_vertices_set(void * jarg1, void * jarg2) {
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->vertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexH_vertices_get(void * jarg1) {
  void * jresult ;
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexH_edges_set(void * jarg1, void * jarg2) {
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< ConvexH::HalfEdge > *arg2 = (btAlignedObjectArray< ConvexH::HalfEdge > *) 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  arg2 = (btAlignedObjectArray< ConvexH::HalfEdge > *)jarg2; 
  if (arg1) (arg1)->edges = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexH_edges_get(void * jarg1) {
  void * jresult ;
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< ConvexH::HalfEdge > *result = 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  result = (btAlignedObjectArray< ConvexH::HalfEdge > *)& ((arg1)->edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexH_facets_set(void * jarg1, void * jarg2) {
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< btPlane > *arg2 = (btAlignedObjectArray< btPlane > *) 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  arg2 = (btAlignedObjectArray< btPlane > *)jarg2; 
  if (arg1) (arg1)->facets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexH_facets_get(void * jarg1) {
  void * jresult ;
  ConvexH *arg1 = (ConvexH *) 0 ;
  btAlignedObjectArray< btPlane > *result = 0 ;
  
  arg1 = (ConvexH *)jarg1; 
  result = (btAlignedObjectArray< btPlane > *)& ((arg1)->facets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexH__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  ConvexH *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ConvexH *)new ConvexH(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int4_x_set(void * jarg1, int jarg2) {
  int4 *arg1 = (int4 *) 0 ;
  int arg2 ;
  
  arg1 = (int4 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int4_x_get(void * jarg1) {
  int jresult ;
  int4 *arg1 = (int4 *) 0 ;
  int result;
  
  arg1 = (int4 *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int4_y_set(void * jarg1, int jarg2) {
  int4 *arg1 = (int4 *) 0 ;
  int arg2 ;
  
  arg1 = (int4 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int4_y_get(void * jarg1) {
  int jresult ;
  int4 *arg1 = (int4 *) 0 ;
  int result;
  
  arg1 = (int4 *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int4_z_set(void * jarg1, int jarg2) {
  int4 *arg1 = (int4 *) 0 ;
  int arg2 ;
  
  arg1 = (int4 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int4_z_get(void * jarg1) {
  int jresult ;
  int4 *arg1 = (int4 *) 0 ;
  int result;
  
  arg1 = (int4 *)jarg1; 
  result = (int) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int4_w_set(void * jarg1, int jarg2) {
  int4 *arg1 = (int4 *) 0 ;
  int arg2 ;
  
  arg1 = (int4 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int4_w_get(void * jarg1) {
  int jresult ;
  int4 *arg1 = (int4 *) 0 ;
  int result;
  
  arg1 = (int4 *)jarg1; 
  result = (int) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_int4__SWIG_0() {
  void * jresult ;
  int4 *result = 0 ;
  
  result = (int4 *)new int4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_int4__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int4 *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int4 *)new int4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_int4(void * jarg1) {
  int4 *arg1 = (int4 *) 0 ;
  
  arg1 = (int4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PHullResult() {
  void * jresult ;
  PHullResult *result = 0 ;
  
  result = (PHullResult *)new PHullResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHullResult_mVcount_set(void * jarg1, unsigned int jarg2) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (PHullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mVcount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PHullResult_mVcount_get(void * jarg1) {
  unsigned int jresult ;
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int result;
  
  arg1 = (PHullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mVcount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHullResult_mIndexCount_set(void * jarg1, unsigned int jarg2) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (PHullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mIndexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PHullResult_mIndexCount_get(void * jarg1) {
  unsigned int jresult ;
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int result;
  
  arg1 = (PHullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mIndexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHullResult_mFaceCount_set(void * jarg1, unsigned int jarg2) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (PHullResult *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mFaceCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PHullResult_mFaceCount_get(void * jarg1) {
  unsigned int jresult ;
  PHullResult *arg1 = (PHullResult *) 0 ;
  unsigned int result;
  
  arg1 = (PHullResult *)jarg1; 
  result = (unsigned int) ((arg1)->mFaceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHullResult_mVertices_set(void * jarg1, void * jarg2) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (PHullResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->mVertices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHullResult_mVertices_get(void * jarg1) {
  void * jresult ;
  PHullResult *arg1 = (PHullResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (PHullResult *)jarg1; 
  result = (btVector3 *) ((arg1)->mVertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHullResult_m_Indices_set(void * jarg1, void * jarg2) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  TUIntArray *arg2 = (TUIntArray *) 0 ;
  
  arg1 = (PHullResult *)jarg1; 
  arg2 = (TUIntArray *)jarg2; 
  if (arg1) (arg1)->m_Indices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PHullResult_m_Indices_get(void * jarg1) {
  void * jresult ;
  PHullResult *arg1 = (PHullResult *) 0 ;
  TUIntArray *result = 0 ;
  
  arg1 = (PHullResult *)jarg1; 
  result = (TUIntArray *)& ((arg1)->m_Indices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PHullResult(void * jarg1) {
  PHullResult *arg1 = (PHullResult *) 0 ;
  
  arg1 = (PHullResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HullLibrary_m_vertexIndexMapping_set(void * jarg1, void * jarg2) {
  HullLibrary *arg1 = (HullLibrary *) 0 ;
  btAlignedObjectArray< int > *arg2 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (HullLibrary *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2; 
  if (arg1) (arg1)->m_vertexIndexMapping = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HullLibrary_m_vertexIndexMapping_get(void * jarg1) {
  void * jresult ;
  HullLibrary *arg1 = (HullLibrary *) 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (HullLibrary *)jarg1; 
  result = (btAlignedObjectArray< int > *)& ((arg1)->m_vertexIndexMapping);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HullLibrary_CreateConvexHull(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HullLibrary *arg1 = (HullLibrary *) 0 ;
  HullDesc *arg2 = 0 ;
  HullResult *arg3 = 0 ;
  HullError result;
  
  arg1 = (HullLibrary *)jarg1; 
  arg2 = (HullDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HullDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (HullResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HullResult & type is null", 0);
    return 0;
  } 
  result = (HullError)(arg1)->CreateConvexHull((HullDesc const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HullLibrary_ReleaseResult(void * jarg1, void * jarg2) {
  int jresult ;
  HullLibrary *arg1 = (HullLibrary *) 0 ;
  HullResult *arg2 = 0 ;
  HullError result;
  
  arg1 = (HullLibrary *)jarg1; 
  arg2 = (HullResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HullResult & type is null", 0);
    return 0;
  } 
  result = (HullError)(arg1)->ReleaseResult(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HullLibrary() {
  void * jresult ;
  HullLibrary *result = 0 ;
  
  result = (HullLibrary *)new HullLibrary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HullLibrary(void * jarg1) {
  HullLibrary *arg1 = (HullLibrary *) 0 ;
  
  arg1 = (HullLibrary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullComputer_vertices_set(void * jarg1, void * jarg2) {
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->vertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullComputer_vertices_get(void * jarg1) {
  void * jresult ;
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullComputer_edges_set(void * jarg1, void * jarg2) {
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< btConvexHullComputer::Edge > *arg2 = (btAlignedObjectArray< btConvexHullComputer::Edge > *) 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  arg2 = (btAlignedObjectArray< btConvexHullComputer::Edge > *)jarg2; 
  if (arg1) (arg1)->edges = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullComputer_edges_get(void * jarg1) {
  void * jresult ;
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< btConvexHullComputer::Edge > *result = 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  result = (btAlignedObjectArray< btConvexHullComputer::Edge > *)& ((arg1)->edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullComputer_faces_set(void * jarg1, void * jarg2) {
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< int > *arg2 = (btAlignedObjectArray< int > *) 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  arg2 = (btAlignedObjectArray< int > *)jarg2; 
  if (arg1) (arg1)->faces = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullComputer_faces_get(void * jarg1) {
  void * jresult ;
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  btAlignedObjectArray< int > *result = 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  result = (btAlignedObjectArray< int > *)& ((arg1)->faces);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexHullComputer_compute__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  float jresult ;
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar result;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  result = (btScalar)(arg1)->compute((float const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexHullComputer_compute__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, float jarg6) {
  float jresult ;
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar result;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  result = (btScalar)(arg1)->compute((double const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullComputer() {
  void * jresult ;
  btConvexHullComputer *result = 0 ;
  
  result = (btConvexHullComputer *)new btConvexHullComputer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexHullComputer(void * jarg1) {
  btConvexHullComputer *arg1 = (btConvexHullComputer *) 0 ;
  
  arg1 = (btConvexHullComputer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_graphicsWorldTrans_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_graphicsWorldTrans = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_graphicsWorldTrans_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_graphicsWorldTrans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_centerOfMassOffset_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_centerOfMassOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_centerOfMassOffset_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_centerOfMassOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_startWorldTrans_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_startWorldTrans = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_startWorldTrans_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_startWorldTrans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_userPointer_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_userPointer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_userPointer_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (void *) ((arg1)->m_userPointer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_1(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_2() {
  void * jresult ;
  btDefaultMotionState *result = 0 ;
  
  result = (btDefaultMotionState *)new btDefaultMotionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_getWorldTransform(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  ((btDefaultMotionState const *)arg1)->getWorldTransform(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_setWorldTransform(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultMotionState(void * jarg1) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeometryUtil_getPlaneEquationsFromVertices(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > & type is null", 0);
    return ;
  } 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > & type is null", 0);
    return ;
  } 
  btGeometryUtil::getPlaneEquationsFromVertices(*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeometryUtil_getVerticesFromPlaneEquations(void * jarg1, void * jarg2) {
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return ;
  } 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > & type is null", 0);
    return ;
  } 
  btGeometryUtil::getVerticesFromPlaneEquations((btAlignedObjectArray< btVector3 > const &)*arg1,*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeometryUtil_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)btGeometryUtil::isInside((btAlignedObjectArray< btVector3 > const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeometryUtil_isPointInsidePlanes(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btAlignedObjectArray< btVector3 > *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btAlignedObjectArray< btVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)btGeometryUtil::isPointInsidePlanes((btAlignedObjectArray< btVector3 > const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeometryUtil_areVerticesBehindPlane(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btVector3 > const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)btGeometryUtil::areVerticesBehindPlane((btVector3 const &)*arg1,(btAlignedObjectArray< btVector3 > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeometryUtil() {
  void * jresult ;
  btGeometryUtil *result = 0 ;
  
  result = (btGeometryUtil *)new btGeometryUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeometryUtil(void * jarg1) {
  btGeometryUtil *arg1 = (btGeometryUtil *) 0 ;
  
  arg1 = (btGeometryUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GrahamVector3(void * jarg1, int jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  int arg2 ;
  GrahamVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (GrahamVector3 *)new GrahamVector3((btVector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrahamVector3_m_angle_set(void * jarg1, float jarg2) {
  GrahamVector3 *arg1 = (GrahamVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (GrahamVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GrahamVector3_m_angle_get(void * jarg1) {
  float jresult ;
  GrahamVector3 *arg1 = (GrahamVector3 *) 0 ;
  btScalar result;
  
  arg1 = (GrahamVector3 *)jarg1; 
  result = (btScalar) ((arg1)->m_angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrahamVector3_m_orgIndex_set(void * jarg1, int jarg2) {
  GrahamVector3 *arg1 = (GrahamVector3 *) 0 ;
  int arg2 ;
  
  arg1 = (GrahamVector3 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_orgIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GrahamVector3_m_orgIndex_get(void * jarg1) {
  int jresult ;
  GrahamVector3 *arg1 = (GrahamVector3 *) 0 ;
  int result;
  
  arg1 = (GrahamVector3 *)jarg1; 
  result = (int) ((arg1)->m_orgIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GrahamVector3(void * jarg1) {
  GrahamVector3 *arg1 = (GrahamVector3 *) 0 ;
  
  arg1 = (GrahamVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngleCompareFunc_m_anchor_set(void * jarg1, void * jarg2) {
  btAngleCompareFunc *arg1 = (btAngleCompareFunc *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btAngleCompareFunc *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_anchor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAngleCompareFunc_m_anchor_get(void * jarg1) {
  void * jresult ;
  btAngleCompareFunc *arg1 = (btAngleCompareFunc *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btAngleCompareFunc *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_anchor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAngleCompareFunc(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btAngleCompareFunc *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btAngleCompareFunc *)new btAngleCompareFunc((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAngleCompareFunc(void * jarg1) {
  btAngleCompareFunc *arg1 = (btAngleCompareFunc *) 0 ;
  
  arg1 = (btAngleCompareFunc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrahamScanConvexHull2D(void * jarg1, void * jarg2, void * jarg3) {
  btAlignedObjectArray< GrahamVector3 > *arg1 = 0 ;
  btAlignedObjectArray< GrahamVector3 > *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btAlignedObjectArray< GrahamVector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< GrahamVector3 > & type is null", 0);
    return ;
  } 
  arg2 = (btAlignedObjectArray< GrahamVector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< GrahamVector3 > & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  GrahamScanConvexHull2D(*arg1,*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashString_m_string_set(void * jarg1, char * jarg2) {
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_string = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_string, (const char *)arg2);
    } else {
      arg1->m_string = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHashString_m_string_get(void * jarg1) {
  char * jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  char *result = 0 ;
  
  arg1 = (btHashString *)jarg1; 
  result = (char *) ((arg1)->m_string);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashString_m_hash_set(void * jarg1, unsigned int jarg2) {
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_hash = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_m_hash_get(void * jarg1) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  arg1 = (btHashString *)jarg1; 
  result = (unsigned int) ((arg1)->m_hash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  arg1 = (btHashString *)jarg1; 
  result = (unsigned int)((btHashString const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashString(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  btHashString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (btHashString *)new btHashString((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashString_portableStringCompare(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)((btHashString const *)arg1)->portableStringCompare((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  btHashString *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (btHashString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashString const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashString const *)arg1)->equals((btHashString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashString(void * jarg1) {
  btHashString *arg1 = (btHashString *) 0 ;
  
  arg1 = (btHashString *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_HASH_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BT_HASH_NULL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashInt(int jarg1) {
  void * jresult ;
  int arg1 ;
  btHashInt *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btHashInt *)new btHashInt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashInt_getUid1(void * jarg1) {
  int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  int result;
  
  arg1 = (btHashInt *)jarg1; 
  result = (int)((btHashInt const *)arg1)->getUid1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashInt_setUid1(void * jarg1, int jarg2) {
  btHashInt *arg1 = (btHashInt *) 0 ;
  int arg2 ;
  
  arg1 = (btHashInt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUid1(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashInt_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  btHashInt *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashInt *)jarg1; 
  arg2 = (btHashInt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashInt const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashInt const *)arg1)->equals((btHashInt const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashInt_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  unsigned int result;
  
  arg1 = (btHashInt *)jarg1; 
  result = (unsigned int)((btHashInt const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashInt(void * jarg1) {
  btHashInt *arg1 = (btHashInt *) 0 ;
  
  arg1 = (btHashInt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashPtr(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  btHashPtr *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (btHashPtr *)new btHashPtr((void const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashPtr_getPointer(void * jarg1) {
  void * jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  void *result = 0 ;
  
  arg1 = (btHashPtr *)jarg1; 
  result = (void *)((btHashPtr const *)arg1)->getPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashPtr_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  btHashPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashPtr *)jarg1; 
  arg2 = (btHashPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashPtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashPtr const *)arg1)->equals((btHashPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashPtr_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  unsigned int result;
  
  arg1 = (btHashPtr *)jarg1; 
  result = (unsigned int)((btHashPtr const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashPtr(void * jarg1) {
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  
  arg1 = (btHashPtr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btIDebugDraw(void * jarg1) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLineSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphere__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSphere(arg2,(btTransform const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawSphere(arg2,(btTransform const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphere__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphereSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, float jarg9) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg9 = (btScalar)jarg9; 
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, float jarg9) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg9 = (btScalar)jarg9; 
  (arg1)->btIDebugDraw::drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangleSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  (arg1)->btIDebugDraw::drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawContactPointSwigExplicitbtIDebugDraw(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_reportErrorWarning(void * jarg1, char * jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->reportErrorWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_reportErrorWarningSwigExplicitbtIDebugDraw(void * jarg1, char * jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->btIDebugDraw::reportErrorWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_draw3dText(void * jarg1, void * jarg2, char * jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_draw3dTextSwigExplicitbtIDebugDraw(void * jarg1, void * jarg2, char * jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->btIDebugDraw::draw3dText((btVector3 const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_setDebugMode(void * jarg1, int jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int arg2 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDebugMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_setDebugModeSwigExplicitbtIDebugDraw(void * jarg1, int jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int arg2 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->btIDebugDraw::setDebugMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIDebugDraw_getDebugMode(void * jarg1) {
  int jresult ;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int result;
  
  arg1 = (btIDebugDraw *)jarg1; 
  result = (int)((btIDebugDraw const *)arg1)->getDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIDebugDraw_getDebugModeSwigExplicitbtIDebugDraw(void * jarg1) {
  int jresult ;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int result;
  
  arg1 = (btIDebugDraw *)jarg1; 
  result = (int)((btIDebugDraw const *)arg1)->btIDebugDraw::getDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawAabbSwigExplicitbtIDebugDraw(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTransform(void * jarg1, void * jarg2, float jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->drawTransform((btTransform const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTransformSwigExplicitbtIDebugDraw(void * jarg1, void * jarg2, float jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->btIDebugDraw::drawTransform((btTransform const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArc__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  arg11 = (btScalar)jarg11; 
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  arg11 = (btScalar)jarg11; 
  (arg1)->btIDebugDraw::drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArc__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArcSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  (arg1)->btIDebugDraw::drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatch__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg11 = (btScalar)jarg11; 
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg11 = (btScalar)jarg11; 
  (arg1)->btIDebugDraw::drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatch__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatchSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBox__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBox__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBoxSwigExplicitbtIDebugDraw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCapsule(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCapsule(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCapsuleSwigExplicitbtIDebugDraw(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawCapsule(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCylinder(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCylinder(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCylinderSwigExplicitbtIDebugDraw(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawCylinder(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCone(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCone(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawConeSwigExplicitbtIDebugDraw(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawCone(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawPlane(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawPlane((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawPlaneSwigExplicitbtIDebugDraw(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->btIDebugDraw::drawPlane((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btIDebugDraw() {
  void * jresult ;
  btIDebugDraw *result = 0 ;
  
  result = (btIDebugDraw *)new SwigDirector_btIDebugDraw();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_director_connect(void *objarg, SwigDirector_btIDebugDraw::SWIG_Callback0_t callback0, SwigDirector_btIDebugDraw::SWIG_Callback1_t callback1, SwigDirector_btIDebugDraw::SWIG_Callback2_t callback2, SwigDirector_btIDebugDraw::SWIG_Callback3_t callback3, SwigDirector_btIDebugDraw::SWIG_Callback4_t callback4, SwigDirector_btIDebugDraw::SWIG_Callback5_t callback5, SwigDirector_btIDebugDraw::SWIG_Callback6_t callback6, SwigDirector_btIDebugDraw::SWIG_Callback7_t callback7, SwigDirector_btIDebugDraw::SWIG_Callback8_t callback8, SwigDirector_btIDebugDraw::SWIG_Callback9_t callback9, SwigDirector_btIDebugDraw::SWIG_Callback10_t callback10, SwigDirector_btIDebugDraw::SWIG_Callback11_t callback11, SwigDirector_btIDebugDraw::SWIG_Callback12_t callback12, SwigDirector_btIDebugDraw::SWIG_Callback13_t callback13, SwigDirector_btIDebugDraw::SWIG_Callback14_t callback14, SwigDirector_btIDebugDraw::SWIG_Callback15_t callback15, SwigDirector_btIDebugDraw::SWIG_Callback16_t callback16, SwigDirector_btIDebugDraw::SWIG_Callback17_t callback17, SwigDirector_btIDebugDraw::SWIG_Callback18_t callback18, SwigDirector_btIDebugDraw::SWIG_Callback19_t callback19, SwigDirector_btIDebugDraw::SWIG_Callback20_t callback20, SwigDirector_btIDebugDraw::SWIG_Callback21_t callback21, SwigDirector_btIDebugDraw::SWIG_Callback22_t callback22) {
  btIDebugDraw *obj = (btIDebugDraw *)objarg;
  SwigDirector_btIDebugDraw *director = dynamic_cast<SwigDirector_btIDebugDraw *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGEN_Link__SWIG_0() {
  void * jresult ;
  btGEN_Link *result = 0 ;
  
  result = (btGEN_Link *)new btGEN_Link();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGEN_Link__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  arg2 = (btGEN_Link *)jarg2; 
  result = (btGEN_Link *)new btGEN_Link(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGEN_Link_getNext(void * jarg1) {
  void * jresult ;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  result = (btGEN_Link *)((btGEN_Link const *)arg1)->getNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGEN_Link_getPrev(void * jarg1) {
  void * jresult ;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *result = 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  result = (btGEN_Link *)((btGEN_Link const *)arg1)->getPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGEN_Link_isHead(void * jarg1) {
  unsigned int jresult ;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  bool result;
  
  arg1 = (btGEN_Link *)jarg1; 
  result = (bool)((btGEN_Link const *)arg1)->isHead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGEN_Link_isTail(void * jarg1) {
  unsigned int jresult ;
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  bool result;
  
  arg1 = (btGEN_Link *)jarg1; 
  result = (bool)((btGEN_Link const *)arg1)->isTail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGEN_Link_insertBefore(void * jarg1, void * jarg2) {
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  arg2 = (btGEN_Link *)jarg2; 
  (arg1)->insertBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGEN_Link_insertAfter(void * jarg1, void * jarg2) {
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  arg2 = (btGEN_Link *)jarg2; 
  (arg1)->insertAfter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGEN_Link_remove(void * jarg1) {
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  (arg1)->remove();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGEN_Link(void * jarg1) {
  btGEN_Link *arg1 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_Link *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGEN_List() {
  void * jresult ;
  btGEN_List *result = 0 ;
  
  result = (btGEN_List *)new btGEN_List();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGEN_List_getHead(void * jarg1) {
  void * jresult ;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *result = 0 ;
  
  arg1 = (btGEN_List *)jarg1; 
  result = (btGEN_Link *)((btGEN_List const *)arg1)->getHead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGEN_List_getTail(void * jarg1) {
  void * jresult ;
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *result = 0 ;
  
  arg1 = (btGEN_List *)jarg1; 
  result = (btGEN_Link *)((btGEN_List const *)arg1)->getTail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGEN_List_addHead(void * jarg1, void * jarg2) {
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_List *)jarg1; 
  arg2 = (btGEN_Link *)jarg2; 
  (arg1)->addHead(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGEN_List_addTail(void * jarg1, void * jarg2) {
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  btGEN_Link *arg2 = (btGEN_Link *) 0 ;
  
  arg1 = (btGEN_List *)jarg1; 
  arg2 = (btGEN_Link *)jarg2; 
  (arg1)->addTail(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGEN_List(void * jarg1) {
  btGEN_List *arg1 = (btGEN_List *) 0 ;
  
  arg1 = (btGEN_List *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_0() {
  void * jresult ;
  btMatrix3x3 *result = 0 ;
  
  result = (btMatrix3x3 *)new btMatrix3x3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_1(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btMatrix3x3 *)new btMatrix3x3((btQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btMatrix3x3 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  temp6 = (btScalar)jarg6; 
  arg6 = &temp6; 
  temp7 = (btScalar)jarg7; 
  arg7 = &temp7; 
  temp8 = (btScalar)jarg8; 
  arg8 = &temp8; 
  temp9 = (btScalar)jarg9; 
  arg9 = &temp9; 
  result = (btMatrix3x3 *)new btMatrix3x3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_3(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = (btMatrix3x3 *)new btMatrix3x3((btMatrix3x3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getColumn(void * jarg1, int jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btMatrix3x3 const *)arg1)->getColumn(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getRow(void * jarg1, int jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btMatrix3x3 const *)arg1)->getRow(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setFromOpenGLSubMatrix(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  (arg1)->setFromOpenGLSubMatrix((btScalar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setValue(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar *arg10 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btScalar temp10 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  temp6 = (btScalar)jarg6; 
  arg6 = &temp6; 
  temp7 = (btScalar)jarg7; 
  arg7 = &temp7; 
  temp8 = (btScalar)jarg8; 
  arg8 = &temp8; 
  temp9 = (btScalar)jarg9; 
  arg9 = &temp9; 
  temp10 = (btScalar)jarg10; 
  arg10 = &temp10; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9,(btScalar const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setRotation(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setEulerYPR(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEulerYPR((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setEulerZYX(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setEulerZYX(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setIdentity(void * jarg1) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  (arg1)->setIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getIdentity() {
  void * jresult ;
  btMatrix3x3 *result = 0 ;
  
  result = (btMatrix3x3 *) &btMatrix3x3::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getOpenGLSubMatrix(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  ((btMatrix3x3 const *)arg1)->getOpenGLSubMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getRotation(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getRotation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerYPR(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getEulerYPR(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerZYX__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  unsigned int arg5 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (unsigned int)jarg5; 
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerZYX__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_scaled(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->scaled((btVector3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_determinant(void * jarg1) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = (btScalar)((btMatrix3x3 const *)arg1)->determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_adjoint(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->adjoint();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_absolute(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->absolute();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_transpose(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->transpose();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_inverse(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->inverse();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_transposeTimes(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->transposeTimes((btMatrix3x3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_timesTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->timesTranspose((btMatrix3x3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdotx(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotx((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdoty(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdoty((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdotz(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotz((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_diagonalize(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->diagonalize(*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_cofac(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (btScalar)((btMatrix3x3 const *)arg1)->cofac(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_serialize(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_serializeFloat(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerialize(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btMatrix3x3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerializeFloat(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btMatrix3x3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerializeDouble(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3DoubleData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3DoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btMatrix3x3DoubleData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3(void * jarg1) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3FloatData_m_el_set(void * jarg1, void * jarg2) {
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3FloatData_m_el_get(void * jarg1) {
  void * jresult ;
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_el);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3FloatData() {
  void * jresult ;
  btMatrix3x3FloatData *result = 0 ;
  
  result = (btMatrix3x3FloatData *)new btMatrix3x3FloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3FloatData(void * jarg1) {
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3DoubleData_m_el_set(void * jarg1, void * jarg2) {
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *arg2 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  {
    size_t ii;
    btVector3DoubleData *b = (btVector3DoubleData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3DoubleData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3DoubleData_m_el_get(void * jarg1) {
  void * jresult ;
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  result = (btVector3DoubleData *)(btVector3DoubleData *) ((arg1)->m_el);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3DoubleData() {
  void * jresult ;
  btMatrix3x3DoubleData *result = 0 ;
  
  result = (btMatrix3x3DoubleData *)new btMatrix3x3DoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3DoubleData(void * jarg1) {
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMotionState(void * jarg1) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMotionState_getWorldTransform(void * jarg1, void * jarg2) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  ((btMotionState const *)arg1)->getWorldTransform(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMotionState_setWorldTransform(void * jarg1, void * jarg2) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPolarDecomposition_DEFAULT_TOLERANCE_get() {
  float jresult ;
  btScalar result;
  
  result = (btScalar)(btScalar)btPolarDecomposition::DEFAULT_TOLERANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolarDecomposition_DEFAULT_MAX_ITERATIONS_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)btPolarDecomposition::DEFAULT_MAX_ITERATIONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPolarDecomposition__SWIG_0(float jarg1, unsigned int jarg2) {
  void * jresult ;
  btScalar arg1 ;
  unsigned int arg2 ;
  btPolarDecomposition *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (btPolarDecomposition *)new btPolarDecomposition(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPolarDecomposition__SWIG_1(float jarg1) {
  void * jresult ;
  btScalar arg1 ;
  btPolarDecomposition *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  result = (btPolarDecomposition *)new btPolarDecomposition(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPolarDecomposition__SWIG_2() {
  void * jresult ;
  btPolarDecomposition *result = 0 ;
  
  result = (btPolarDecomposition *)new btPolarDecomposition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolarDecomposition_decompose(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  btPolarDecomposition *arg1 = (btPolarDecomposition *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 *arg3 = 0 ;
  btMatrix3x3 *arg4 = 0 ;
  unsigned int result;
  
  arg1 = (btPolarDecomposition *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btMatrix3x3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return 0;
  } 
  arg4 = (btMatrix3x3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return 0;
  } 
  result = (unsigned int)((btPolarDecomposition const *)arg1)->decompose((btMatrix3x3 const &)*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolarDecomposition_maxIterations(void * jarg1) {
  unsigned int jresult ;
  btPolarDecomposition *arg1 = (btPolarDecomposition *) 0 ;
  unsigned int result;
  
  arg1 = (btPolarDecomposition *)jarg1; 
  result = (unsigned int)((btPolarDecomposition const *)arg1)->maxIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPolarDecomposition(void * jarg1) {
  btPolarDecomposition *arg1 = (btPolarDecomposition *) 0 ;
  
  arg1 = (btPolarDecomposition *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_polarDecompose(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 *arg3 = 0 ;
  unsigned int result;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return 0;
  } 
  arg3 = (btMatrix3x3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return 0;
  } 
  result = (unsigned int)polarDecompose((btMatrix3x3 const &)*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoolAllocator(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (btPoolAllocator *)new btPoolAllocator(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoolAllocator(void * jarg1) {
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  
  arg1 = (btPoolAllocator *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoolAllocator_getFreeCount(void * jarg1) {
  int jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  int result;
  
  arg1 = (btPoolAllocator *)jarg1; 
  result = (int)((btPoolAllocator const *)arg1)->getFreeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoolAllocator_getUsedCount(void * jarg1) {
  int jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  int result;
  
  arg1 = (btPoolAllocator *)jarg1; 
  result = (int)((btPoolAllocator const *)arg1)->getUsedCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoolAllocator_getMaxCount(void * jarg1) {
  int jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  int result;
  
  arg1 = (btPoolAllocator *)jarg1; 
  result = (int)((btPoolAllocator const *)arg1)->getMaxCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoolAllocator_allocate(void * jarg1, int jarg2) {
  void * jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (btPoolAllocator *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)(arg1)->allocate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPoolAllocator_validPtr(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  
  arg1 = (btPoolAllocator *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (bool)(arg1)->validPtr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoolAllocator_freeMemory(void * jarg1, void * jarg2) {
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btPoolAllocator *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->freeMemory(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoolAllocator_getElementSize(void * jarg1) {
  int jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  int result;
  
  arg1 = (btPoolAllocator *)jarg1; 
  result = (int)((btPoolAllocator const *)arg1)->getElementSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoolAllocator_getPoolAddress__SWIG_0(void * jarg1) {
  void * jresult ;
  btPoolAllocator *arg1 = (btPoolAllocator *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btPoolAllocator *)jarg1; 
  result = (unsigned char *)(arg1)->getPoolAddress();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getX(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getX();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getY(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getY();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getZ(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getZ();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setX(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setY(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setZ(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setW(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setW(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_x(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->x();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_y(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->y();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_z(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->z();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_w(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->w();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setValue__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuadWord *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setValue__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  arg1 = (btQuadWord *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_0() {
  void * jresult ;
  btQuadWord *result = 0 ;
  
  result = (btQuadWord *)new btQuadWord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuadWord *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuadWord *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setMax(void * jarg1, void * jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btQuadWord *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuadWord const & type is null", 0);
    return ;
  } 
  (arg1)->setMax((btQuadWord const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setMin(void * jarg1, void * jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btQuadWord *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuadWord const & type is null", 0);
    return ;
  } 
  (arg1)->setMin((btQuadWord const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuadWord(void * jarg1) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_0() {
  void * jresult ;
  btQuaternion *result = 0 ;
  
  result = (btQuaternion *)new btQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_1(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btQuaternion *)new btQuaternion((btQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuaternion *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp2 ;
  btQuaternion *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  result = (btQuaternion *)new btQuaternion((btVector3 const &)*arg1,(btScalar const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_4(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuaternion *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setRotation(void * jarg1, void * jarg2, float jarg3) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  (arg1)->setRotation((btVector3 const &)*arg2,(btScalar const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setEuler(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuaternion *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEuler((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setEulerZYX(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuaternion *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEulerZYX((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btQuaternion const *)arg1)->dot((btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_length2(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->length2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_length(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_normalize(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btQuaternion *) &(arg1)->normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_normalized(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->normalized();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_angle(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btQuaternion const *)arg1)->angle((btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_getAngle(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_getAxis(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->getAxis();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_inverse(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->inverse();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_farthest(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((btQuaternion const *)arg1)->farthest((btQuaternion const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_nearest(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((btQuaternion const *)arg1)->nearest((btQuaternion const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = ((btQuaternion const *)arg1)->slerp((btQuaternion const &)*arg2,(btScalar const &)*arg3);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_getIdentity() {
  void * jresult ;
  btQuaternion *result = 0 ;
  
  result = (btQuaternion *) &btQuaternion::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_getW(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar *) &((btQuaternion const *)arg1)->getW();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuaternion(void * jarg1) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)dot((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_length(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)length((btQuaternion const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngle__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btAngle((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_inverse(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = inverse((btQuaternion const &)*arg1);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = slerp((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,(float const &)*arg3);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_quatRotate(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = quatRotate((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_shortestArcQuat(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = shortestArcQuat((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_shortestArcQuatNormalize2(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = shortestArcQuatNormalize2(*arg1,*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_BT_CLOCK_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btClock__SWIG_0() {
  void * jresult ;
  btClock *result = 0 ;
  
  result = (btClock *)new btClock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btClock__SWIG_1(void * jarg1) {
  void * jresult ;
  btClock *arg1 = 0 ;
  btClock *result = 0 ;
  
  arg1 = (btClock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btClock const & type is null", 0);
    return 0;
  } 
  result = (btClock *)new btClock((btClock const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btClock(void * jarg1) {
  btClock *arg1 = (btClock *) 0 ;
  
  arg1 = (btClock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btClock_reset(void * jarg1) {
  btClock *arg1 = (btClock *) 0 ;
  
  arg1 = (btClock *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btClock_getTimeMilliseconds(void * jarg1) {
  unsigned long jresult ;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  arg1 = (btClock *)jarg1; 
  result = (unsigned long)(arg1)->getTimeMilliseconds();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btClock_getTimeMicroseconds(void * jarg1) {
  unsigned long jresult ;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  arg1 = (btClock *)jarg1; 
  result = (unsigned long)(arg1)->getTimeMicroseconds();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileNode(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CProfileNode *arg2 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (CProfileNode *)jarg2; 
  result = (CProfileNode *)new CProfileNode((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileNode(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Sub_Node(void * jarg1, char * jarg2) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *arg2 = (char *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CProfileNode *)(arg1)->Get_Sub_Node((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Parent(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Sibling(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Sibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Child(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Child();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_CleanupMemory(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->CleanupMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_Reset(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_Call(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->Call();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProfileNode_Return(void * jarg1) {
  unsigned int jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  bool result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (bool)(arg1)->Return();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CProfileNode_Get_Name(void * jarg1) {
  char * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (char *)(arg1)->Get_Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileNode_Get_Total_Calls(void * jarg1) {
  int jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  int result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (int)(arg1)->Get_Total_Calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileNode_Get_Total_Time(void * jarg1) {
  float jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  float result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (float)(arg1)->Get_Total_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_GetUserPointer(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (void *)((CProfileNode const *)arg1)->GetUserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_SetUserPointer(void * jarg1, void * jarg2) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserPointer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_First(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  (arg1)->First();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_Next(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  (arg1)->Next();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProfileIterator_Is_Done(void * jarg1) {
  unsigned int jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  bool result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (bool)(arg1)->Is_Done();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProfileIterator_Is_Root(void * jarg1) {
  unsigned int jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  bool result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (bool)(arg1)->Is_Root();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_Enter_Child(void * jarg1, int jarg2) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int arg2 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Enter_Child(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_Enter_Largest_Child(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  (arg1)->Enter_Largest_Child();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_Enter_Parent(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  (arg1)->Enter_Parent();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Name(void * jarg1) {
  char * jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  char *result = 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (char *)(arg1)->Get_Current_Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Total_Calls(void * jarg1) {
  int jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (int)(arg1)->Get_Current_Total_Calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Total_Time(void * jarg1) {
  float jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  float result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (float)(arg1)->Get_Current_Total_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileIterator_Get_Current_UserPointer(void * jarg1) {
  void * jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  void *result = 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (void *)(arg1)->Get_Current_UserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileIterator_Set_Current_UserPointer(void * jarg1, void * jarg2) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->Set_Current_UserPointer(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Parent_Name(void * jarg1) {
  char * jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  char *result = 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (char *)(arg1)->Get_Current_Parent_Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Parent_Total_Calls(void * jarg1) {
  int jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (int)(arg1)->Get_Current_Parent_Total_Calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileIterator_Get_Current_Parent_Total_Time(void * jarg1) {
  float jresult ;
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  float result;
  
  arg1 = (CProfileIterator *)jarg1; 
  result = (float)(arg1)->Get_Current_Parent_Total_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileIterator(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Start_Profile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  CProfileManager::Start_Profile((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Stop_Profile() {
  CProfileManager::Stop_Profile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_CleanupMemory() {
  CProfileManager::CleanupMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Reset() {
  CProfileManager::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Increment_Frame_Counter() {
  CProfileManager::Increment_Frame_Counter();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileManager_Get_Frame_Count_Since_Reset() {
  int jresult ;
  int result;
  
  result = (int)CProfileManager::Get_Frame_Count_Since_Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileManager_Get_Time_Since_Reset() {
  float jresult ;
  float result;
  
  result = (float)CProfileManager::Get_Time_Since_Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileManager_Get_Iterator() {
  void * jresult ;
  CProfileIterator *result = 0 ;
  
  result = (CProfileIterator *)CProfileManager::Get_Iterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Release_Iterator(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  CProfileManager::Release_Iterator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_dumpRecursive(void * jarg1, int jarg2) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int arg2 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  arg2 = (int)jarg2; 
  CProfileManager::dumpRecursive(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_dumpAll() {
  CProfileManager::dumpAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileManager() {
  void * jresult ;
  CProfileManager *result = 0 ;
  
  result = (CProfileManager *)new CProfileManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileManager(void * jarg1) {
  CProfileManager *arg1 = (CProfileManager *) 0 ;
  
  arg1 = (CProfileManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileSample(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CProfileSample *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CProfileSample *)new CProfileSample((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileSample(void * jarg1) {
  CProfileSample *arg1 = (CProfileSample *) 0 ;
  
  arg1 = (CProfileSample *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GEN_srand(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  GEN_srand(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GEN_rand() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)GEN_rand();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAstr_set(char * jarg1) {
  char *arg1 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) strcpy((char *)sBulletDNAstr, (const char *)arg1);
    else sBulletDNAstr[0] = 0;
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sBulletDNAstr_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)sBulletDNAstr;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAlen_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  sBulletDNAlen = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sBulletDNAlen_get() {
  int jresult ;
  int result;
  
  result = (int)sBulletDNAlen;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAstr64_set(char * jarg1) {
  char *arg1 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) strcpy((char *)sBulletDNAstr64, (const char *)arg1);
    else sBulletDNAstr64[0] = 0;
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sBulletDNAstr64_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)sBulletDNAstr64;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAlen64_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  sBulletDNAlen64 = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sBulletDNAlen64_get() {
  int jresult ;
  int result;
  
  result = (int)sBulletDNAlen64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStrLen(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)btStrLen((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_chunkCode_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_chunkCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_chunkCode_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_chunkCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_length_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_length_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_oldPtr_set(void * jarg1, void * jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_oldPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btChunk_m_oldPtr_get(void * jarg1) {
  void * jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  void *result = 0 ;
  
  arg1 = (btChunk *)jarg1; 
  result = (void *) ((arg1)->m_oldPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_dna_nr_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dna_nr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_dna_nr_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_dna_nr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_number_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_number = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_number_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btChunk() {
  void * jresult ;
  btChunk *result = 0 ;
  
  result = (btChunk *)new btChunk();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btChunk(void * jarg1) {
  btChunk *arg1 = (btChunk *) 0 ;
  
  arg1 = (btChunk *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSerializer(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_getBufferPointer(void * jarg1) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  result = (unsigned char *)((btSerializer const *)arg1)->getBufferPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSerializer_getCurrentBufferSize(void * jarg1) {
  int jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  arg1 = (btSerializer *)jarg1; 
  result = (int)((btSerializer const *)arg1)->getCurrentBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_allocate(void * jarg1, unsigned long jarg2, int jarg3) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_finalizeChunk(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (btChunk *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_findPointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->findPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_getUniquePointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->getUniquePointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_startSerialization(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  (arg1)->startSerialization();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_finishSerialization(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  (arg1)->finishSerialization();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSerializer_findNameForPointer(void * jarg1, void * jarg2) {
  char * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (char *)((btSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_registerNameForPointer(void * jarg1, void * jarg2, char * jarg3) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_serializeName(void * jarg1, char * jarg2) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->serializeName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSerializer_getSerializationFlags(void * jarg1) {
  int jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  arg1 = (btSerializer *)jarg1; 
  result = (int)((btSerializer const *)arg1)->getSerializationFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_setSerializationFlags(void * jarg1, int jarg2) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  int arg2 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSerializationFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_HEADER_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPointerUid() {
  void * jresult ;
  btPointerUid *result = 0 ;
  
  result = (btPointerUid *)new btPointerUid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPointerUid(void * jarg1) {
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  
  arg1 = (btPointerUid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultSerializer__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  btDefaultSerializer *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btDefaultSerializer *)new btDefaultSerializer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultSerializer__SWIG_1() {
  void * jresult ;
  btDefaultSerializer *result = 0 ;
  
  result = (btDefaultSerializer *)new btDefaultSerializer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultSerializer(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_writeHeader(void * jarg1, void * jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  ((btDefaultSerializer const *)arg1)->writeHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_startSerialization(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  (arg1)->startSerialization();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_finishSerialization(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  (arg1)->finishSerialization();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_getUniquePointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->getUniquePointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_getBufferPointer(void * jarg1) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (unsigned char *)((btDefaultSerializer const *)arg1)->getBufferPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultSerializer_getCurrentBufferSize(void * jarg1) {
  int jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (int)((btDefaultSerializer const *)arg1)->getCurrentBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_finalizeChunk(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (btChunk *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_internalAlloc(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (unsigned char *)(arg1)->internalAlloc(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_allocate(void * jarg1, unsigned long jarg2, int jarg3) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btDefaultSerializer_findNameForPointer(void * jarg1, void * jarg2) {
  char * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (char *)((btDefaultSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_registerNameForPointer(void * jarg1, void * jarg2, char * jarg3) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_serializeName(void * jarg1, char * jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->serializeName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultSerializer_getSerializationFlags(void * jarg1) {
  int jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (int)((btDefaultSerializer const *)arg1)->getSerializationFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_setSerializationFlags(void * jarg1, int jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSerializationFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBlock_previous_set(void * jarg1, void * jarg2) {
  btBlock *arg1 = (btBlock *) 0 ;
  btBlock *arg2 = (btBlock *) 0 ;
  
  arg1 = (btBlock *)jarg1; 
  arg2 = (btBlock *)jarg2; 
  if (arg1) (arg1)->previous = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBlock_previous_get(void * jarg1) {
  void * jresult ;
  btBlock *arg1 = (btBlock *) 0 ;
  btBlock *result = 0 ;
  
  arg1 = (btBlock *)jarg1; 
  result = (btBlock *) ((arg1)->previous);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBlock_address_set(void * jarg1, void * jarg2) {
  btBlock *arg1 = (btBlock *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btBlock *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->address = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBlock_address_get(void * jarg1) {
  void * jresult ;
  btBlock *arg1 = (btBlock *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btBlock *)jarg1; 
  result = (unsigned char *) ((arg1)->address);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBlock() {
  void * jresult ;
  btBlock *result = 0 ;
  
  result = (btBlock *)new btBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBlock(void * jarg1) {
  btBlock *arg1 = (btBlock *) 0 ;
  
  arg1 = (btBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStackAlloc(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  btStackAlloc *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (btStackAlloc *)new btStackAlloc(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStackAlloc(void * jarg1) {
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStackAlloc_create(void * jarg1, unsigned int jarg2) {
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->create(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStackAlloc_destroy(void * jarg1) {
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStackAlloc_getAvailableMemory(void * jarg1) {
  int jresult ;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  int result;
  
  arg1 = (btStackAlloc *)jarg1; 
  result = (int)((btStackAlloc const *)arg1)->getAvailableMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStackAlloc_allocate(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  unsigned int arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned char *)(arg1)->allocate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStackAlloc_beginBlock(void * jarg1) {
  void * jresult ;
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  btBlock *result = 0 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  result = (btBlock *)(arg1)->beginBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStackAlloc_endBlock(void * jarg1, void * jarg2) {
  btStackAlloc *arg1 = (btStackAlloc *) 0 ;
  btBlock *arg2 = (btBlock *) 0 ;
  
  arg1 = (btStackAlloc *)jarg1; 
  arg2 = (btBlock *)jarg2; 
  (arg1)->endBlock(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_0() {
  void * jresult ;
  btTransform *result = 0 ;
  
  result = (btTransform *)new btTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_2(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_4(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_5(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btTransform const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_mult(void * jarg1, void * jarg2, void * jarg3) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->mult((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getBasis__SWIG_0(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  result = (btMatrix3x3 *) &(arg1)->getBasis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getOrigin__SWIG_0(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  result = (btVector3 *) &(arg1)->getOrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getRotation(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion result;
  
  arg1 = (btTransform *)jarg1; 
  result = ((btTransform const *)arg1)->getRotation();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setFromOpenGLMatrix(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  (arg1)->setFromOpenGLMatrix((btScalar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_getOpenGLMatrix(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  ((btTransform const *)arg1)->getOpenGLMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setOrigin(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setOrigin((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_invXform(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTransform const *)arg1)->invXform((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setBasis(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->setBasis((btMatrix3x3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setRotation(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setIdentity(void * jarg1) {
  btTransform *arg1 = (btTransform *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  (arg1)->setIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_inverse(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform result;
  
  arg1 = (btTransform *)jarg1; 
  result = ((btTransform const *)arg1)->inverse();
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_inverseTimes(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform result;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = ((btTransform const *)arg1)->inverseTimes((btTransform const &)*arg2);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getIdentity() {
  void * jresult ;
  btTransform *result = 0 ;
  
  result = (btTransform *) &btTransform::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_serialize(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData & type is null", 0);
    return ;
  } 
  ((btTransform const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_serializeFloat(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData & type is null", 0);
    return ;
  } 
  ((btTransform const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerialize(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btTransformFloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerializeDouble(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformDoubleData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformDoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btTransformDoubleData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerializeFloat(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btTransformFloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransform(void * jarg1) {
  btTransform *arg1 = (btTransform *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformFloatData_m_basis_set(void * jarg1, void * jarg2) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformFloatData_m_basis_get(void * jarg1) {
  void * jresult ;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  result = (btMatrix3x3FloatData *)& ((arg1)->m_basis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformFloatData_m_origin_set(void * jarg1, void * jarg2) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformFloatData_m_origin_get(void * jarg1) {
  void * jresult ;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_origin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformFloatData() {
  void * jresult ;
  btTransformFloatData *result = 0 ;
  
  result = (btTransformFloatData *)new btTransformFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformFloatData(void * jarg1) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformDoubleData_m_basis_set(void * jarg1, void * jarg2) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  arg2 = (btMatrix3x3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformDoubleData_m_basis_get(void * jarg1) {
  void * jresult ;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_basis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformDoubleData_m_origin_set(void * jarg1, void * jarg2) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformDoubleData_m_origin_get(void * jarg1) {
  void * jresult ;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_origin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformDoubleData() {
  void * jresult ;
  btTransformDoubleData *result = 0 ;
  
  result = (btTransformDoubleData *)new btTransformDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformDoubleData(void * jarg1) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAabbSupport(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btAabbSupport((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_integrateTransform(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  btTransform *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btTransform *arg5 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  btTransformUtil::integrateTransform((btTransform const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateVelocityQuaternion(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion *arg3 = 0 ;
  btQuaternion *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg4 = (btQuaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateVelocityQuaternion((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btQuaternion const &)*arg3,(btQuaternion const &)*arg4,arg5,*arg6,*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateDiffAxisAngleQuaternion(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateDiffAxisAngleQuaternion((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateVelocity(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateVelocity((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateDiffAxisAngle(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateDiffAxisAngle((btTransform const &)*arg1,(btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformUtil() {
  void * jresult ;
  btTransformUtil *result = 0 ;
  
  result = (btTransformUtil *)new btTransformUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformUtil(void * jarg1) {
  btTransformUtil *arg1 = (btTransformUtil *) 0 ;
  
  arg1 = (btTransformUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexSeparatingDistanceUtil(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConvexSeparatingDistanceUtil *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConvexSeparatingDistanceUtil *)new btConvexSeparatingDistanceUtil(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(void * jarg1) {
  float jresult ;
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btScalar result;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  result = (btScalar)(arg1)->getConservativeSeparatingDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_updateSeparatingDistance(void * jarg1, void * jarg2, void * jarg3) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->updateSeparatingDistance((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_initSeparatingDistance(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->initSeparatingDistance((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexSeparatingDistanceUtil(void * jarg1) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btVector3DataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btVector3FloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_m_floats_set(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3__SWIG_0() {
  void * jresult ;
  btVector3 *result = 0 ;
  
  result = (btVector3 *)new btVector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btVector3 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btVector3 *)new btVector3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->dot((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_length2(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar)((btVector3 const *)arg1)->length2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_length(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar)((btVector3 const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_distance2(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->distance2((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_distance(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->distance((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_safeNormalize(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btVector3 *) &(arg1)->safeNormalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_normalize(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btVector3 *) &(arg1)->normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_normalized(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  result = ((btVector3 const *)arg1)->normalized();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_rotate(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = ((btVector3 const *)arg1)->rotate((btVector3 const &)*arg2,arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_angle(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->angle((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_absolute(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  result = ((btVector3 const *)arg1)->absolute();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_cross(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btVector3 const *)arg1)->cross((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_triple(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_minAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->minAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_maxAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->maxAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_furthestAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->furthestAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_closestAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->closestAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setInterpolate3(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = ((btVector3 const *)arg1)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getX(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getX();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getY(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getY();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getZ(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getZ();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setX(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setY(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setZ(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setW(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setW(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_x(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->x();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_y(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->y();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_z(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->z();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_w(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->w();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setMax(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMax((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setMin(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMin((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setValue(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btVector3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_getSkewSymmetricMatrix(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  ((btVector3 const *)arg1)->getSkewSymmetricMatrix(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setZero(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  (arg1)->setZero();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVector3_isZero(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (bool)((btVector3 const *)arg1)->isZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVector3_fuzzyZero(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (bool)((btVector3 const *)arg1)->fuzzyZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serialize(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerialize(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btVector3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serializeFloat(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerializeFloat(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btVector3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serializeDouble(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serializeDouble(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerializeDouble(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btVector3DoubleData const &)*arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_btVector3_maxDot(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  result = (long)((btVector3 const *)arg1)->maxDot((btVector3 const *)arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_btVector3_minDot(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  result = (long)((btVector3 const *)arg1)->minDot((btVector3 const *)arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_dot3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btVector3 const *)arg1)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDot(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDot((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDistance2(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDistance2((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDistance(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDistance((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngle__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btAngle((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCross(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btCross((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriple(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btTriple((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = lerp((btVector3 const &)*arg1,(btVector3 const &)*arg2,(float const &)*arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector4__SWIG_0() {
  void * jresult ;
  btVector4 *result = 0 ;
  
  result = (btVector4 *)new btVector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btVector4 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btVector4 *)new btVector4((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector4_absolute4(void * jarg1) {
  void * jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector4 result;
  
  arg1 = (btVector4 *)jarg1; 
  result = ((btVector4 const *)arg1)->absolute4();
  jresult = new btVector4((const btVector4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector4_getW(void * jarg1) {
  float jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (btScalar)((btVector4 const *)arg1)->getW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_maxAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->maxAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_minAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->minAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_closestAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->closestAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector4_setValue(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  arg1 = (btVector4 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector4(void * jarg1) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  
  arg1 = (btVector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapScalarEndian(float jarg1, void * jarg2) {
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp1 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btSwapScalarEndian((float const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapVector3Endian(void * jarg1, void * jarg2) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btSwapVector3Endian((btVector3 const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUnSwapVector3Endian(void * jarg1) {
  btVector3 *arg1 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btUnSwapVector3Endian(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3FloatData_m_floats_set(void * jarg1, void * jarg2) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *arg2 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3FloatData_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3FloatData() {
  void * jresult ;
  btVector3FloatData *result = 0 ;
  
  result = (btVector3FloatData *)new btVector3FloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3FloatData(void * jarg1) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3DoubleData_m_floats_set(void * jarg1, void * jarg2) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3DoubleData_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  result = (double *)(double *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3DoubleData() {
  void * jresult ;
  btVector3DoubleData *result = 0 ;
  
  result = (btVector3DoubleData *)new btVector3DoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3DoubleData(void * jarg1) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT btQuadWord * SWIGSTDCALL CSharp_btQuaternion_SWIGUpcast(btQuaternion *jarg1) {
    return (btQuadWord *)jarg1;
}

SWIGEXPORT btSerializer * SWIGSTDCALL CSharp_btDefaultSerializer_SWIGUpcast(btDefaultSerializer *jarg1) {
    return (btSerializer *)jarg1;
}

SWIGEXPORT btVector3 * SWIGSTDCALL CSharp_btVector4_SWIGUpcast(btVector4 *jarg1) {
    return (btVector3 *)jarg1;
}

#ifdef __cplusplus
}
#endif

