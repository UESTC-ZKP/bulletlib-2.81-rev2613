/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class vecint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal vecint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(vecint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~vecint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_vecint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public vecint(int _sz) : this(examplePINVOKE.new_vecint(_sz), true) {
  }

  public SWIGTYPE_p_int get(int index) {
    SWIGTYPE_p_int ret = new SWIGTYPE_p_int(examplePINVOKE.vecint_get(swigCPtr, index), false);
    return ret;
  }

  public void set(int index, SWIGTYPE_p_int val) {
    examplePINVOKE.vecint_set(swigCPtr, index, SWIGTYPE_p_int.getCPtr(val));
    if (examplePINVOKE.SWIGPendingException.Pending) throw examplePINVOKE.SWIGPendingException.Retrieve();
  }

  public int getitem(int index) {
    int ret = examplePINVOKE.vecint_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, int val) {
    examplePINVOKE.vecint_setitem(swigCPtr, index, val);
  }

}
