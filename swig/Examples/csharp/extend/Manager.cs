/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Manager : Employee {
  private HandleRef swigCPtr;

  internal Manager(IntPtr cPtr, bool cMemoryOwn) : base(examplePINVOKE.Manager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Manager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Manager() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_Manager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Manager(string n) : this(examplePINVOKE.new_Manager(n), true) {
    SwigDirectorConnect();
  }

  public override string getPosition() {
    string ret = (SwigDerivedClassHasMethod("getPosition", swigMethodTypes2) ? examplePINVOKE.Manager_getPositionSwigExplicitManager(swigCPtr) : examplePINVOKE.Manager_getPosition(swigCPtr));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("getTitle", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateManager_0(SwigDirectorgetTitle);
    if (SwigDerivedClassHasMethod("getName", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateManager_1(SwigDirectorgetName);
    if (SwigDerivedClassHasMethod("getPosition", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateManager_2(SwigDirectorgetPosition);
    examplePINVOKE.Manager_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Manager));
    return hasDerivedMethod;
  }

  private string SwigDirectorgetTitle() {
    return getTitle();
  }

  private string SwigDirectorgetName() {
    return getName();
  }

  private string SwigDirectorgetPosition() {
    return getPosition();
  }

  public delegate string SwigDelegateManager_0();
  public delegate string SwigDelegateManager_1();
  public delegate string SwigDelegateManager_2();

  private SwigDelegateManager_0 swigDelegate0;
  private SwigDelegateManager_1 swigDelegate1;
  private SwigDelegateManager_2 swigDelegate2;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
}
