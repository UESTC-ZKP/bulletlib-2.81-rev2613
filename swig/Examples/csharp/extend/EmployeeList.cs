/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class EmployeeList : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EmployeeList(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(EmployeeList obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~EmployeeList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          examplePINVOKE.delete_EmployeeList(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public EmployeeList() : this(examplePINVOKE.new_EmployeeList(), true) {
  }

  public void addEmployee(Employee p) {
    examplePINVOKE.EmployeeList_addEmployee(swigCPtr, Employee.getCPtr(p));
  }

  public Employee get_item(int i) {
    IntPtr cPtr = examplePINVOKE.EmployeeList_get_item(swigCPtr, i);
    Employee ret = (cPtr == IntPtr.Zero) ? null : new Employee(cPtr, false);
    return ret;
  }

}
